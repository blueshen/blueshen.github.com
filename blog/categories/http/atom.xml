<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：HTTP | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/blog/categories/http/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2013-12-14T21:41:39+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《HTTP权威指南》读书笔记1]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/05/15/http-the-definitive-guide-reading-notes/"/>
    <updated>2013-05-15T16:53:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/05/15/http-the-definitive-guide-reading-notes</id>
    <content type="html"><![CDATA[<h3>URL语法</h3>

<p>完整的URL是建立在由以下9个部分构成的通用格式上的。</p>

<pre><code>&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;   
</code></pre>

<p>其中各个部分代表：</p>

<ul>
<li>scheme(方案)：使用的哪种协议;默认无</li>
<li>user（用户）：用户名；默认匿名</li>
<li>password(密码)：密码</li>
<li>host(主机)：服务器主机名或点分IP地址</li>
<li>port(端口)：服务器监听端口。不同协议，默认值不一样，HTTP默认80</li>
<li>path(路径)：/分割的资源路径</li>
<li>params(参数)：名/值对，使用；分割。</li>
<li>query（查询）：名=值对，用&amp;分割多个</li>
<li>frag（片段）：小片资源的名字。在html就是一个锚点名了。自动从锚点开始显示。</li>
</ul>


<!--more-->


<h3>HTTP报文格式</h3>

<h4>1.请求报文（request message）</h4>

<pre><code>&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;
&lt;headers&gt;

&lt;entity-body&gt;
</code></pre>

<p>例如：</p>

<pre><code>GET /images/blog/qunit-pic.png HTTP/1.0
Host: www.shenyanchao.cn
</code></pre>

<h4>2.响应报文（request message）</h4>

<pre><code>&lt;version&gt; &lt;status-code&gt; &lt;reason-phrase&gt;
&lt;headers&gt;

&lt;entity-body&gt;
</code></pre>

<p>例如：</p>

<pre><code>HTTP/1.1 200 OK
Content-Type: image/png
Content-Length: 18107
</code></pre>

<p>以上报文格式中，各个部分的描述如下：</p>

<ul>
<li>method（方法）：希望服务器对资源执行的动作。如GET，POST等。</li>
<li>request-URL（请求的URL）：要请求的资源。</li>
<li>version（版本）：报文使用的HTTP协议版本。</li>
<li>status-code(状态码)：描述了请求过程中的状态。</li>
<li>reason-phrase（原因短语）：状态码的可读版本。</li>
<li>header(首部)：可以有0或多个首部。每个首部，名字跟着一个冒号，紧接着是空格，然后是一个值，最后是一个CRLF。</li>
<li>entity-body（实体的主题部分）：任意数据组成的数据块。</li>
</ul>


<h3>HTTP方法</h3>

<h4>1.GET</h4>

<p>请求服务器发送某个资源。请求无主体部分。</p>

<h4>2.HEAD</h4>

<p>与GET方法类似，但服务器在响应中只返回header。请求无主体部分，同时服务器也不会返回主体部分。使用HEAD方法，主要用于以下：</p>

<ul>
<li>在不获取资源的情况下了解资源的情况（比如其类型）;</li>
<li>通过查看响应中的状态码，判断某个对象是否存在。</li>
<li>通过查看header，测试资源是否被修改了。</li>
</ul>


<h4>3.PUT</h4>

<p>PUT方法用于向服务器写入文档。请求有主体部分。</p>

<h4>4.POST</h4>

<p>POST方法用于向服务器输入数据。经常用于表单提交。请求有主体部分。</p>

<h4>5.TRACE</h4>

<p>客户端发起一个请求时，这个请求可能要船防火墙、代理、网关或其他一些应用程序。每个中间点都可能修改原始HTTP请求。TRACE方法允许客户端在最终将请求发送给服务器时，看看它变成什么样子。简单说，就是TRACE方式会把服务器接受到的请求，返回给客户端。请求无主体部分。</p>

<h4>6.OPTIONS</h4>

<p>OPTIONS方法请求WEB服务器告知其支持的各种功能。可以询问服务器支持哪些方法，或者对某些特殊资源支持哪些方法。这位客户端提供了一种手段，使其不用访问那些资源就能判定访问各资源的最优方式。请求无主体部分。</p>

<h4>7.DELETE</h4>

<p>DELETE方法，请求服务器删除请求URL所指定的资源。请求无主体部分。</p>

<h3>HTTP连接</h3>

<p>HTTP通信都是由TCP/IP所承载的。HTTP连接实际上就是TCP连接及其使用规则，TCP连接是因特网上的可靠连接。TCP有著名的“三次握手”以及“四次挥手”来保证有效可靠的连接。 <br/>
HTTP性能在很大程度上取决于底层TCP通道的性能。影响TCP性能主要有以下几个方面：</p>

<ul>
<li>客户端需要根据URI确定WEB服务器的IP和端口号。这依赖于DNS解析速度，有可能很慢。</li>
<li>客户端与服务器端建立TCP连接有时延。如果并发大的话，时延更长。</li>
<li>连接建立后，通过TCP管道发送HTTP请求，然后服务器读取报文并处理都耗费时间。</li>
<li>服务器回送响应也花费时间。</li>
</ul>


<h4>1.TCP连接握手时延</h4>

<p>由于3次握手的存在，很可能造成：小的HTTP事务可能在TCP建立上花费50%乃至更多的时间。这样很不划算了。</p>

<h4>2.延迟确认</h4>

<p>网络无法确保可靠的分组传输，因此TCP实现了自己的确认机制来确保数据的成功传输。每个TCP段都有一个序列号和数据完整性校验和。每个段的接收者收到完好的段，都会向发送者回送小的确认分组。如果发送者没有在指定的窗口时间内收到确认信息，发送者认为没发送成功，并重发数据。 <br/>
由于确认报文很小，所以TCP允许在发往同方向的输出数据分组中对其进行“捎带”。TCP中称之为“延迟确认”。延迟确认算法在一个特定的窗口时间（100～200ms）内将输出确认放在缓冲区内，以寻找能够捎带它的数据分组。如果那段时间没没有，就单独发送。延迟确认算法会引入相当大的时延。</p>

<h4>3.TCP慢启动</h4>

<p>TCP数据传输的性能取决于TCP连接的使用时间。TCP连接随着时间进行自我调谐，防止因特网的突然过载和拥塞。因此新连接的传输速度会比已经调谐的连接慢一些。</p>

<h4>4.Nagle算法与TCP_NODELAY</h4>

<p>一个TCP段都至少装载了40个字节的标记和首部，如果TCP发送大量只包含少量的分组（一个字节），网络的性能就会严重下降。Nagle算法试图在发送一个分组前，将大量TCP数据绑定在一起来提高网络效率。但是这样也造成了不少时延，HTTP应用程序常常在自己的栈中设置参数TCP_NODELAY来禁用Nagle算法。</p>

<h4>5.TIME_WAIT累积与端口耗尽</h4>

<p>在四次挥手中，客户端关闭TCP连接时，会在内存维护一个小的控制块，用来记录最近所关闭的连接的IP地址和端口号。此时客户端处于TIME_WAIT状态，并维持2MSL（2分钟）的时间，确保这段时间内不会创建具有相同地址和端口号的新连接。这个时候问题就来了，在做性能测试的时候，很容易造成大量TIME_WAIT的连接，同时也不能新建新的连接了，因为无端口可用了。这也是增加时延的因素。可以考虑改小MSL。</p>

<h3>HTTP状态码</h3>

<p>+------------+---------------+---------+<br/>
|  整体范围   |   已定义范围     |   分类   |  <br/>
+------------+----------------+---------+ <br/>
| 100～199   | 100～101        | 信息提示 | <br/>
+------------+----------------+---------+ <br/>
| 200～299   | 200～206        | 成功    |  <br/>
+------------+----------------+---------+ <br/>
| 300~399    | 300~305        | 重定向   |  <br/>
+------------+----------------+---------+ <br/>
| 400～499   | 400～415       |客户端错误| <br/>
+------------+----------------+---------+ <br/>
| 500~599    | 500~505        | 服务器错误|   <br/>
+------------+----------------+---------+</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Header]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/22/http-header/"/>
    <updated>2012-10-22T20:34:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/22/http-header</id>
    <content type="html"><![CDATA[<p>HTTP（HyperTextTransferProtocol） 即超文本传输协议，目前网页传输的的通用协议。HTTP协议采用了请求/响应模型，浏览器或其他客户端发出请求，服务器给与响应。就整个网络资源传输而 言，包括message-header和message-body两部分。首先传递message-header，即http header消息。http header 消息通常被分为4个部分：general; header, request header, response header, entity header。但是这种分法就理解而言，感觉界限不太明确。根据维基百科对http header内容的组织形式，大体分为Request和Response两部分.</p>

<!--more-->


<p> <br/>
<strong>Response部分</strong></p>

<div>
<table border="1" width="90%" >
    <tbody>
        <tr>
            <th>
                Header</th>
            <th>
                解释</th>
            <th>
                示例</th>
        </tr>
        <tr>
            <td >
                Accept-Ranges</td>
            <td >
                表明服务器是否支持指定范围请求及哪种类型的分段请求</td>
            <td >
                Accept-Ranges: bytes</td>
        </tr>
        <tr>
            <td >
                Age</td>
            <td >
                从原始服务器到代理缓存形成的估算时间（以秒计，非负）</td>
            <td >
                Age: 12</td>
        </tr>
        <tr>
            <td >
                Allow</td>
            <td >
                对某网络资源的有效的请求行为，不允许则返回405</td>
            <td >
                Allow: GET, HEAD</td>
        </tr>
        <tr>
            <td >
                Cache-Control</td>
            <td >
                告诉所有的缓存机制是否可以缓存及哪种类型</td>
            <td >
                Cache-Control: no-cache</td>
        </tr>
        <tr>
            <td >
                Content-Encoding</td>
            <td >
                web服务器支持的返回内容压缩编码类型。</td>
            <td >
                Content-Encoding: gzip</td>
        </tr>
        <tr>
            <td >
                Content-Language</td>
            <td >
                响应体的语言</td>
            <td >
                Content-Language: en,zh</td>
        </tr>
        <tr>
            <td >
                Content-Length</td>
            <td >
                响应体的长度</td>
            <td >
                Content-Length: 348</td>
        </tr>
        <tr>
            <td >
                Content-Location</td>
            <td >
                请求资源可替代的备用的另一地址</td>
            <td >
                Content-Location: /index.htm</td>
        </tr>
        <tr>
            <td >
                Content-MD5</td>
            <td >
                返回资源的MD5校验值</td>
            <td >
                Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</td>
        </tr>
        <tr>
            <td >
                Content-Range</td>
            <td >
                在整个返回体中本部分的字节位置</td>
            <td >
                Content-Range: bytes 21010-47021/47022</td>
        </tr>
        <tr>
            <td >
                Content-Type</td>
            <td >
                返回内容的MIME类型</td>
            <td >
                Content-Type: text/html; charset=utf-8</td>
        </tr>
        <tr>
            <td >
                Date</td>
            <td >
                原始服务器消息发出的时间</td>
            <td >
                Date: Tue, 15 Nov 2010 08:12:31 GMT</td>
        </tr>
        <tr>
            <td >
                ETag</td>
            <td >
                请求变量的实体标签的当前值</td>
            <td >
                ETag: “737060cd8c284d8af7ad3082f209582d”</td>
        </tr>
        <tr>
            <td >
                Expires</td>
            <td >
                响应过期的日期和时间</td>
            <td >
                Expires: Thu, 01 Dec 2010 16:00:00 GMT</td>
        </tr>
        <tr>
            <td >
                Last-Modified</td>
            <td >
                请求资源的最后修改时间</td>
            <td >
                Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</td>
        </tr>
        <tr>
            <td >
                Location</td>
            <td >
                用来重定向接收方到非请求URL的位置来完成请求或标识新的资源</td>
            <td >
                Location: http://www.zcmhi.com/archives/94.html</td>
        </tr>
        <tr>
            <td >
                Pragma</td>
            <td >
                包括实现特定的指令，它可应用到响应链上的任何接收方</td>
            <td >
                Pragma: no-cache</td>
        </tr>
        <tr>
            <td >
                Proxy-Authenticate</td>
            <td >
                它指出认证方案和可应用到代理的该URL上的参数</td>
            <td >
                Proxy-Authenticate: Basic</td>
        </tr>
        <tr>
            <td >
                refresh</td>
            <td >
                应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）</td>
            <td >
                <div>
                    &nbsp;</div>
                <p style="margin-left:auto;">
                    &nbsp;</p>
                <div id="_mcePaste">
                    Refresh: 5; url=</div>
                <div>
                    http://www.zcmhi.com/archives/94.html</div>
            </td>
        </tr>
        <tr>
            <td >
                Retry-After</td>
            <td >
                如果实体暂时不可取，通知客户端在指定时间之后再次尝试</td>
            <td >
                Retry-After: 120</td>
        </tr>
        <tr>
            <td >
                Server</td>
            <td >
                web服务器软件名称</td>
            <td >
                Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)</td>
        </tr>
        <tr>
            <td >
                Set-Cookie</td>
            <td >
                设置Http Cookie</td>
            <td >
                Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</td>
        </tr>
        <tr>
            <td >
                Trailer</td>
            <td >
                指出头域在分块传输编码的尾部存在</td>
            <td >
                Trailer: Max-Forwards</td>
        </tr>
        <tr>
            <td >
                Transfer-Encoding</td>
            <td >
                文件传输编码</td>
            <td >
                Transfer-Encoding:chunked</td>
        </tr>
        <tr>
            <td >
                Vary</td>
            <td >
                告诉下游代理是使用缓存响应还是从原始服务器请求</td>
            <td >
                Vary: *</td>
        </tr>
        <tr>
            <td >
                Via</td>
            <td >
                告知代理客户端响应是通过哪里发送的</td>
            <td >
                Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>
        </tr>
        <tr>
            <td >
                Warning</td>
            <td >
                警告实体可能存在的问题</td>
            <td >
                Warning: 199 Miscellaneous warning</td>
        </tr>
        <tr>
            <td >
                WWW-Authenticate</td>
            <td >
                表明客户端请求实体应该使用的授权方案</td>
            <td >
                WWW-Authenticate: Basic</td>
        </tr>
    </tbody>
</table>

更多参见 [w3c官网](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)
<table border="1" width="90%" >
    <tbody>
        <tr>
            <td >
                Content-Type</td>
            <td >
                请求的与实体对应的MIME信息</td>
            <td >
                Content-Type: application/x-www-form-urlencoded</td>
        </tr>
        <tr>
            <td >
                Date</td>
            <td >
                请求发送的日期和时间</td>
            <td >
                Date: Tue, 15 Nov&nbsp;2010 08:12:31 GMT</td>
        </tr>
        <tr>
            <td >
                Expect</td>
            <td >
                请求的特定的服务器行为</td>
            <td >
                Expect: 100-continue</td>
        </tr>
        <tr>
            <td >
                From</td>
            <td >
                发出请求的用户的Email</td>
            <td >
                From: user@email.com</td>
        </tr>
        <tr>
            <td >
                Host</td>
            <td >
                指定请求的服务器的域名和端口号</td>
            <td >
                Host: www.zcmhi.com</td>
        </tr>
        <tr>
            <td >
                If-Match</td>
            <td >
                只有请求内容与实体相匹配才有效</td>
            <td >
                If-Match: “737060cd8c284d8af7ad3082f209582d”</td>
        </tr>
        <tr>
            <td >
                If-Modified-Since</td>
            <td >
                如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码</td>
            <td >
                If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>
        </tr>
        <tr>
            <td >
                If-None-Match</td>
            <td >
                如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td>
            <td >
                If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td>
        </tr>
        <tr>
            <td >
                If-Range</td>
            <td >
                如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag</td>
            <td >
                If-Range: “737060cd8c284d8af7ad3082f209582d”</td>
        </tr>
        <tr>
            <td >
                If-Unmodified-Since</td>
            <td >
                只在实体在指定时间之后未被修改才请求成功</td>
            <td >
                If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>
        </tr>
        <tr>
            <td >
                Max-Forwards</td>
            <td >
                限制信息通过代理和网关传送的时间</td>
            <td >
                Max-Forwards: 10</td>
        </tr>
        <tr>
            <td >
                Pragma</td>
            <td >
                用来包含实现特定的指令</td>
            <td >
                Pragma: no-cache</td>
        </tr>
        <tr>
            <td >
                Proxy-Authorization</td>
            <td >
                连接到代理的授权证书</td>
            <td >
                Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>
        </tr>
        <tr>
            <td >
                Range</td>
            <td >
                只请求实体的一部分，指定范围</td>
            <td >
                Range: bytes=500-999</td>
        </tr>
        <tr>
            <td >
                Referer</td>
            <td >
                先前网页的地址，当前请求网页紧随其后,即来路</td>
            <td >
                Referer: http://www.zcmhi.com/archives/71.html</td>
        </tr>
        <tr>
            <td >
                TE</td>
            <td >
                客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td>
            <td >
                TE: trailers,deflate;q=0.5</td>
        </tr>
        <tr>
            <td >
                Upgrade</td>
            <td >
                向服务器指定某种传输协议以便服务器进行转换（如果支持）</td>
            <td >
                Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td>
        </tr>
        <tr>
            <td >
                User-Agent</td>
            <td >
                User-Agent的内容包含发出请求的用户信息</td>
            <td >
                User-Agent: Mozilla/5.0 (Linux; X11)</td>
        </tr>
        <tr>
            <td >
                Via</td>
            <td >
                通知中间网关或代理服务器地址，通信协议</td>
            <td >
                Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>
        </tr>
        <tr>
            <td >
                Warning</td>
            <td >
                关于消息实体的警告信息</td>
            <td >
                Warn: 199 Miscellaneous warning<br />
                &nbsp;</td>
        </tr>
    </tbody>
</table>

**Requests部分**
<table border="1"  width="90%">
    <tbody>
        <tr>
            <th>
                Header</th>
            <th>
                解释</th>
            <th>
                示例</th>
        </tr>
        <tr>
            <td >
                Accept</td>
            <td >
                指定客户端能够接收的内容类型</td>
            <td >
                Accept: text/plain, text/html</td>
        </tr>
        <tr>
            <td >
                Accept-Charset</td>
            <td >
                浏览器可以接受的字符编码集。</td>
            <td >
                Accept-Charset: iso-8859-5</td>
        </tr>
        <tr>
            <td >
                Accept-Encoding</td>
            <td >
                指定浏览器可以支持的web服务器返回内容压缩编码类型。</td>
            <td >
                Accept-Encoding: compress, gzip</td>
        </tr>
        <tr>
            <td >
                Accept-Language</td>
            <td >
                浏览器可接受的语言</td>
            <td >
                Accept-Language: en,zh</td>
        </tr>
        <tr>
            <td >
                Accept-Ranges</td>
            <td >
                可以请求网页实体的一个或者多个子范围字段</td>
            <td >
                Accept-Ranges: bytes</td>
        </tr>
        <tr>
            <td >
                Authorization</td>
            <td >
                HTTP授权的授权证书</td>
            <td >
                Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>
        </tr>
        <tr>
            <td >
                Cache-Control</td>
            <td >
                指定请求和响应遵循的缓存机制</td>
            <td >
                Cache-Control: no-cache</td>
        </tr>
        <tr>
            <td >
                Connection</td>
            <td >
                表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</td>
            <td >
                Connection: close</td>
        </tr>
        <tr>
            <td >
                Cookie</td>
            <td >
                HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</td>
            <td >
                Cookie: $Version=1; Skin=new;</td>
        </tr>
        <tr>
            <td >
                Content-Length</td>
            <td >
                请求的内容长度</td>
            <td >
                Content-Length: 348</td>
        </tr>
    </tbody>
</table>

</div>


<p>参考文档：<a href="http://www.itniwo.net/blog/v/26466.html">http://www.itniwo.net/blog/v/26466.html</a></p>
]]></content>
  </entry>
  
</feed>
