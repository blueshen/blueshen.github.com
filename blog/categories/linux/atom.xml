<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：linux | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2014-11-25T12:56:14+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux中文件编码转换]]></title>
    <link href="http://www.shenyanchao.cn/blog/2014/11/13/encode-convert-in-linux/"/>
    <updated>2014-11-13T16:20:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2014/11/13/encode-convert-in-linux</id>
    <content type="html"><![CDATA[<p>　在工作中，经常会遇到使用操作系统不一样的环境，从而导致在不同环境下的文件编辑的编码是不一样的，Windows默认是GBK编码格式，Linux默认是UTF-8的格式，这样就会出现把GBK编码的文件拷贝到Linux下出现乱码情况，很是让人头疼，下面给大家介绍下GBK->UTF-8文件编码批量转换。</p>

<p>Linux命令-enca 查看文件的编码</p>

<p>Enca语法</p>

<pre><code>Usage:  enca [-L LANGUAGE] [OPTION]... [FILE]...
        enconv [-L LANGUAGE] [OPTION]... [FILE]...
        Detect encoding of text files and convert them if required.
</code></pre>

<p>Enca用法</p>

<pre><code>$ enca -L zh_CN file 检查文件的编码
$ enca -L zh_CN -x UTF-8 file 将文件编码转换为"UTF-8"编码
$ enca -L zh_CN -x UTF-8 file1 file2 如果不想覆盖原文件可以这样
</code></pre>

<p>除了有检查文件编码的功能以外，”enca”还有一个好处就是如果文件本来就是你要转换的那种编码，它不会报错，还是会print出结果来， 而”iconv”则会报错。这对于脚本编写是比较方便的事情。</p>

<!--more-->


<p>转换单个文件的编码</p>

<pre><code>$ enca -L none -x utf-8  index.html
</code></pre>

<p>转换多个文件的编码</p>

<pre><code>$ enca -x utf-8 *
</code></pre>

<p>Linux文件名编码批量转换--convmv</p>

<p>Convmv语法</p>

<pre><code>$ convmv -f 源编码 -t 新编码 [选项] 文件名
</code></pre>

<p>Convmv 常用参数</p>

<pre><code>-r 递归处理子文件夹
–notest 真正进行操作，请注意在默认情况下是不对文件进行真实操作的，而只是试验。
–list 显示所有支持的编码
–unescap 可以做一下转义，比如把%20变成空格
</code></pre>

<p>示例</p>

<p>转换一个文件由GBK转换成UTF-8</p>

<pre><code>convmv -f GBK -t UTF-8 --notest utf8 filename
</code></pre>

<p>GBK->UTF-8文件编码批量转换脚本</p>

<pre><code>$ find default -type f -exec convmv -f GBK -t UTF-8 --notest utf8 {} -o utf/{} \;
</code></pre>

<p>使用iconv 转换</p>

<p>Iconv语法</p>

<pre><code>iconv -f encoding -t encoding inputfile
</code></pre>

<p>示例</p>

<p>单个文件转换</p>

<pre><code>$ iconv -f GBK -t UTF-8 file1 -o file2
</code></pre>

<p>批量转换</p>

<pre><code>$ find default -type d -exec mkdir -p utf/{} \;
$ find default -type f -exec iconv -f GBK -t UTF-8 {} -o utf/{} \;
</code></pre>

<p>这两行命令将default目录下的文件由GBK编码转换为UTF-8编码，目录结构不变，转码后的文件保存在utf/default目录下。</p>

<hr />

<p>原文:<a href="http://blog.csdn.net/a280606790/article/details/8504133">http://blog.csdn.net/a280606790/article/details/8504133</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH原理]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/11/26/the-principle-of-ssh/"/>
    <updated>2013-11-26T16:04:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/11/26/the-principle-of-ssh</id>
    <content type="html"><![CDATA[<h3>一、什么是SSH？</h3>

<p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。</p>

<p>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p>

<p>最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p>

<p>需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。</p>

<!--more-->


<h3>二、最基本的用法</h3>

<p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。</p>

<pre><code>$ ssh user@host
</code></pre>

<p>如果本地用户名与远程用户名一致，登录时可以省略用户名。</p>

<pre><code>$ ssh host
</code></pre>

<p>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。</p>

<p>　　$ ssh -p 2222 user@host</p>

<p>上面这条命令表示，ssh直接连接远程主机的2222端口。</p>

<h3>三、中间人攻击</h3>

<p>SSH之所以能够保证安全，原因在于它采用了公钥加密。</p>

<p>整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。  <br/>
这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p>

<p>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的"中间人攻击"（Man-in-the-middle attack）。 <br/>
SSH协议是如何应对的呢？</p>

<h3>四、口令登录</h3>

<p>如果你是第一次登录对方主机，系统会出现下面的提示：</p>

<pre><code>$ ssh user@host
The authenticity of host 'host (12.18.429.21)' can't be established.
RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.
Are you sure you want to continue connecting (yes/no)?
</code></pre>

<p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？  <br/>
所谓"公钥指纹"，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。   <br/>
很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。   <br/>
假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</p>

<pre><code>Are you sure you want to continue connecting (yes/no)? yes
</code></pre>

<p>系统会出现一句提示，表示host主机已经得到认可。</p>

<pre><code>Warning: Permanently added 'host,12.18.429.21' (RSA) to the list of known hosts.
</code></pre>

<p>然后，会要求输入密码。</p>

<pre><code>Password: (enter password)
</code></pre>

<p>如果密码正确，就可以登录了。   <br/>
当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。   <br/>
每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。</p>

<h3>五、公钥登录</h3>

<p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。   <br/>
所谓"公钥登录"，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。   <br/>
这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</p>

<pre><code>$ ssh-keygen
</code></pre>

<p>运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</p>

<p>运行结束以后，在$HOME/.ssh/目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。   <br/>
这时再输入下面的命令，将公钥传送到远程主机host上面：</p>

<pre><code>$ ssh-copy-id user@host
</code></pre>

<p>好了，从此你再登录，就不需要输入密码了。    <br/>
如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面"#"注释是否取掉。</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys
</code></pre>

<p>然后，重启远程主机的ssh服务。</p>

<pre><code>// ubuntu系统
service ssh restart
// debian系统
/etc/init.d/ssh restart
</code></pre>

<h3>六、authorized_keys文件</h3>

<p>远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。</p>

<p>这里不使用上面的ssh-copy-id命令，改用下面的命令，解释公钥的保存过程：</p>

<pre><code>$ ssh user@host 'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub     
</code></pre>

<p>这条命令由多个语句组成，依次分解开来看： <br/>
（1）<code>$ ssh user@host</code>，表示登录远程主机； <br/>
（2）单引号中的<code>mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys</code>，表示登录后在远程shell上执行的命令： <br/>
（3）<code>$ mkdir -p .ssh</code>的作用是，如果用户主目录中的.ssh目录不存在，就创建一个;   <br/>
（4）<code>cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub</code>的作用是，将本地的公钥文件<code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件authorized_keys的末尾。    <br/>
写入authorized_keys文件后，公钥登录的设置就完成了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从windows到linux]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/05/02/my-linux-dream/"/>
    <updated>2013-05-02T16:37:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/05/02/my-linux-dream</id>
    <content type="html"><![CDATA[<p>从高中时代最早接触计算机,当初什么都不懂,能会用下email就绝对是达人了啊.最早见到OS应该是windows 95,那时候虽然已经出了windows 98,不过学校仍预装的是windows 95.</p>

<p>高中时期,就感觉计算机挺新奇,很感兴趣,至于具体会发展到什么样也不清楚.大学报考时间果断选择了计算机科学与技术这一专业.从此就走上了这一不归路.</p>

<p>大学时期对计算机有了更深刻的认识,也知道除了windows之外还有一个linux的东西所在.这期间先后给自己的机器安装过红帽,安装过国产的红旗.不过这些东西也都没有什么深入,安装后发现也很不好用,不得已而放弃掉.</p>

<p>研究生期间有更多的linux伙伴,有人在用也有人给推荐.那个时候选择了ubuntu作为自己首选,因为大家推荐说资源多,新人入手容易.那个时候应该是9.04左右的版本.</p>

<p>工作后,接触到了更多的服务器,也经历了各种在windows下的程序无法很好在linux运行的情况,因此下决心学习.私人的笔记本装上了ubuntu 10.04,不过公司的工作电脑还是没敢做成ubuntu系统,只是弄了一个虚拟机.</p>

<p>大概在大半年以前,我下定了决心,把系统给完全换成了ubuntu,版本也升到了12.04.这时的系统已经足够成熟,几乎可以满足工作的需要.而最近发布的ubuntu 13.04则更加的完善,各种替代软件都可以找到.</p>

<p>个人常用软件推荐:</p>

<ul>
<li>office: wps for linux  or libreoffice</li>
<li>输入法:  sogou for linux</li>
<li>开发IDE: Intellij IDEA or Eclipse</li>
<li>编辑器: sublime,retext</li>
<li>浏览器: chrome,firefox</li>
<li>邮件客户端: thunderbird</li>
</ul>

]]></content>
  </entry>
  
</feed>
