<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: encode，Java | Blues 小站]]></title>
  <link href="http://blueshen.github.com/blog/categories/encode-java/atom.xml" rel="self"/>
  <link href="http://blueshen.github.com/"/>
  <updated>2012-10-23T20:28:50+08:00</updated>
  <id>http://blueshen.github.com/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java字符编码及其使用详解]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/23/encode-in-java/"/>
    <updated>2012-10-23T18:58:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/23/encode-in-java</id>
    <content type="html"><![CDATA[<h2>Java的编译存储</h2>

<p>Java是跨平台的一种语言，这一概念想必已经深入人心。Java是如何实现跨平台的呢?其中起到重大作用的便是Unicode编码。在使用IDE进行开发时，比如ECLIPSE,IDEA等，可以指定源文件（.java）的编码格式，此处的编码格式是指Java文件自身的编码。Java文件可以用各种编码进行存储，考虑到兼容中文字符，大多采用GBK,UTF-8,GB18030等编码格式。但是经过javac命令编译后，生成的.class文件毫无疑问都是Unicode编码。这样在class被加载进JVM后，所有的对象都是Unicode进行编码的，这确保了Java的跨平台特性。<br/>
<strong>简言之</strong></p>

<p>.java(任意编码) ---> .class(Unicode) ---> JVM内（Unicode）</p>

<h2>是什么导致了乱码的出现？</h2>

<p>在JVM内，从class文件加载的源码全部以UNICODE编码。即使如<code>String str = "中国";</code>这样的语句，在JVM内存中仍然是unicode编码的。可是，程序本身难免牵涉到外部文件的读写、与数据库的交互等。这样就会造成很多非unicode编码的字符存在于JVM中，这也就是乱码出现的根本原因所在。</p>

<p>未完待续，期待吧。</p>
]]></content>
  </entry>
  
</feed>
