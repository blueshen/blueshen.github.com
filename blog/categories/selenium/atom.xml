<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: selenium | Blues 小站]]></title>
  <link href="http://blueshen.github.com/blog/categories/selenium/atom.xml" rel="self"/>
  <link href="http://blueshen.github.com/"/>
  <updated>2012-10-19T11:58:15+08:00</updated>
  <id>http://blueshen.github.com/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PageObjects 设计模式]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/16/pageobjects-design-pattern/"/>
    <updated>2012-10-16T16:40:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/16/pageobjects-design-pattern</id>
    <content type="html"><![CDATA[<h2>什么是Page Objects(翻译为：页面对象？)...</h2>

<p>简单的说，Page Objects是指UI界面上用于与用户进行交互的对象。它可以指整个页面，也可以指Page上的某个区域。Page Objects是你的test code的交互对象，是对实际UI的一种抽象模型化。通过Page Objects可以减少重复代码的编写，例如，很多页面都有同样的header，footer，navigator等部分，如果对这些进行抽象，只写一次就可以在其他地方通用了。</p>

<p><strong>注意PageObjects与Page Objects是不一样的</strong>，PageObjects用于特指采用Page Objects进行封装的一种设计模式（Design Pattern）,而不仅仅是多一个空格的区别。哈。</p>

<h2>如何实现PageObjects设计模式？</h2>

<p>一般情况下，对于一个Page Objects对象，它有两个方面的特征：</p>

<ul>
<li>自身元素(WebElement)</li>
<li>实现功能 (Services)</li>
</ul>


<!--more-->


<p></p>

<p>自身元素很好理解，就是实实在在的页面元素。而Page Object通常也都是实现一定的功能的。就Test的开发人员来说，更关心的是Page Objects它们实现了什么交互功能，而不是其内部的实现，因此，这里的功能与开发人员理解的功能是<strong>不一样的</strong>。</p>

<p>以用户登录为例：在登录界面，点击登录后要么成功，转向首页。要么失败，出现提示出错信息。 <br/>
相信这是一个很容易理解的场景吧！<br/>
Java Code可能类似如下：</p>

<pre><code>public class LoginPage {
    //用户名录入框
    private WebElement usernameBox;
    //密码录入框
    private WebElement passwordBox;
    //提交按钮
    private WebElement submitButton;

    public HomePage loginAs(String username, String password) {
        usernameBox.sendKeys(username);
        passwordBox.sendKeys(password);
        submitButton.submit();
        return new HomePage(...)
    }

    public LoginPage loginAsExpectingError(String username, String password) {
         //  出错的username,password 仍留在LoginPage
     }

    public String getErrorMessage() {
    // 获取错误信息
    }
}   
</code></pre>

<p>从上面可以看出，同时封装了元素以及功能。此处样例，元素是没有初始化的。可以通过类似于<code>driver.findElement()</code>的函数来直接进行初始化，另外WebDriver提供了一个PageFactory用于对PageObjects设计模式进行支持，下面将会讲到。<br/>
通过上面的这段代码，也展现出了一个重要的问题，那就是assertion不应该在Page Objects内部，而应该由tests进行处理。Page Objects只是返回需要验证的信息即可。</p>

<h2>总结</h2>

<ul>
<li>public方法代表Page提供的功能</li>
<li>尽量不要暴露Page的内部细节</li>
<li>不要assertion</li>
<li>方法可以返回其他Page Objects</li>
<li>Page Objects不用代表整个页面，可以是任意一个部分</li>
<li>一样的操作，不同的结果应该分开（正确登录，错误登录）</li>
</ul>


<h2>样例</h2>

<pre><code>public class LoginPage {
    private final WebDriver driver;
    // 用户名录入框
    private WebElement usernameBox;
    // 密码录入框
    private WebElement passwordBox;
    // 提交按钮
    private WebElement submitButton;

    public LoginPage(WebDriver driver) {
        this.driver = driver;
        if (!"Login".equals(driver.getTitle())) {
            throw new IllegalStateException("This is not the login page");
        }
        this.usernameBox = driver.findElement(By.id("username"));
        this.passwordBox = driver.findElement(By.id("passwd"));
        this.submitButton = driver.findElement(By.id("login"));
    }

    public HomePage loginAs(String username, String password) {
        usernameBox.sendKeys(username);
        passwordBox.sendKeys(password);
        submitButton.submit();
        return new HomePage(driver);
    }
}
</code></pre>

<h2>PageFactory</h2>

<p>从上面的样例中，有没有发现每个元素都要进行<code>driver.findElement()</code>这样的操作，写起来好累啊，一堆重复性的代码。有没有更好的，更优雅的处理方法呢？<strong><code>org.openqa.selenium.support.PageFactory</code></strong>就是用来负责处理这个的，真Happy! <br/>
下面以<a href="http://www.baidu.com">百度搜索</a>作为样例场景，搜索一个关键字：</p>

<pre><code>import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.support.PageFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
* @author shenyanchao
* 
 */
public class BaiduSearchPage {
    public static final Logger LOG = LoggerFactory
        .getLogger(BaiduSearchPage.class);
    private WebElement wd;

    public void searchFor(String keyword) {
        wd.sendKeys(keyword);
        wd.submit();
    }

    public static void main(String[] args) {
        WebDriver driver = new HtmlUnitDriver();
        driver.get("http://www.baidu.com");
        BaiduSearchPage baiduPage = PageFactory.initElements(driver,
            BaiduSearchPage.class);
        LOG.info("before search url is:{}",driver.getCurrentUrl());
        baiduPage.searchFor("blueshen");
        LOG.info("after search url is:{}",driver.getCurrentUrl());
    }
}
</code></pre>

<p>运行以上代码，发现已经可以正常运行，结果如下：</p>

<pre><code>......
before search url is:http://www.baidu.com/
......
after search url is:http://www.baidu.com/s?wd=blueshen&amp;rsv_bp=0&amp;rsv_spt=3
</code></pre>

<p>可见，搜索后，已经转向了正确的搜索结果页面。然而WebElement是如何初始化的呢？玄机就在<code>BaiduSearchPage baiduPage = PageFactory.initElements(driver,BaiduSearchPage.class);</code>这行代码。PageFactory负责初始化了Page里的元素，amazing，用起来就是这么的优雅。 <br/>
那么下来，我就要问了：PageFactory是怎么定位元素的呢？</p>

<blockquote><p>原来PageFactory初始化元素有一个惯例，样例中将WebElement的名称定为wd,那么PageFactory将按类似以下的形式对其进行初始化：  <br/>
<code>driver.findElement(By.id("wd"));</code><br/>
PageFactory认为wd是HTML元素的id或者name字段的值,并且优先从id开始查找。至此，我们终于知道怎么回事了。</p></blockquote>

<p>随着项目的变大，以及使用的更加深入，HTML元素的id，name字段并不一定唯一，并且Java Class的属性看起来都是一堆无意义的名称。这些要求我们必须要进行改进。幸好PageFactory已经提前考虑到了这一切，它支持annotations来显式定位元素。那么上述的百度搜索样例，可以修改为如下形式：</p>

<pre><code>public class BaiduSearchPage {
    public static final Logger LOG = LoggerFactory
        .getLogger(BaiduSearchPage.class);
    @FindBy(how = How.NAME, using = "wd")
    @CacheLookup
    private WebElement serachBox;

    public void searchFor(String keyword) {
        serachBox.sendKeys(keyword);
        serachBox.submit();
    }
......
}
</code></pre>

<p>明确的指定HOW.NAME,using="wd",意为查找name="wd"的元素，并将其初始化赋值给searchBox这一有意义的属性名。其中@CacheLookup用于标识其只初始化一次，然后缓存起来备用。</p>

<p>感觉还不够简洁吗？继续修改：</p>

<pre><code>@FindBy(name = "wd")
private WebElement searchBox;
</code></pre>

<p>这是其简略模式，还支持各种定位方式。</p>

<pre><code>    @FindBy(id="...")
    @FindBy(className="...")
    @FindBy(name="...")
    @FindBy(xpath="...")
    @FindBy(linkText="...")
    @FindBy(partialLinkText="...")
    @FindBy(tagName="...")
    @FindBy(css="...")
</code></pre>

<p>同时支持<code>@FindBys</code>用于支持列表元素查找定位，返回<code>List&lt;WebElement&gt;</code>类型。</p>

<p><strong>总之，利用PageObjects设计模式并且配合PageFactory使用，将使你的自动化测试优雅、易度、易维护。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium WebDriver的多浏览器支持]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/12/selenium-multiple-browser-support/"/>
    <updated>2012-10-12T14:56:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/12/selenium-multiple-browser-support</id>
    <content type="html"><![CDATA[<h2>Selenium WebDriver支持哪儿些浏览器？</h2>

<p>按照官方文档的说法，现阶段有以下的drivers:</p>

<blockquote><ul>
<li>ChromeDriver</li>
<li>InternetExplorerDriver</li>
<li>FirefoxDriver</li>
<li>OperaDriver</li>
<li>HtmlUnitDriver</li>
<li>AndroidDriver(mobile testing)</li>
<li>OperaMobileDriver(mobile testing)</li>
<li>IPhoneDriver(mobile testing)</li>
</ul>
</blockquote>

<!--more-->


<p></p>

<h2>为什么selenium自动化case在一个浏览器运行的很好，换为另外一个浏览器则不行？</h2>

<h3>一个Driver可以打开浏览器，另外一个Driver却不行？</h3>

<p>WebDriver是通过调用native浏览器来操作的，浏览器之间的差异注定会出现一些问题。下面以InternetExplorer,Firefox,Chrome为例进行说明：</p>

<h4>InternetExplorer：</h4>

<blockquote><p>1.它分不同的版本，版本之间差异很大。InternetExplorerDriver支持IE6、7、8、9。操作系统支持XP、Vista、Windows 7。 <br/>
2.InternetExplorerDriver同时支持32/64bit的浏览器，这个取决于你用的是什么版本的<a href="http://code.google.com/p/selenium/downloads/list">IEDriverServer.exe</a>。 <br/>
3.要求条件如下：</p>

<blockquote><ul>
<li><a href="http://code.google.com/p/selenium/downloads/list">IEDriverServer</a>在系统环境的PATH内（selenium2.26.0+版本推荐方式）。</li>
<li>在windows vista、windows7操作系统中，如果使用IE7+的浏览器，应该保证浏览器的<strong>保护模式</strong>都处于<strong>同一状态</strong>[开启或者关闭]。如果不一致，那么报错信息类似于<code>Caused by: org.openqa.selenium.WebDriverException: Unexpected error launching Internet Explorer. Protected Mode settings are not the same for all zones. Enable Protected Mode must be set to the same value (enabled or disabled) for all zones. (WARNING: The server did not provide any stacktrace information)</code> <br/>
不会设置吗？ <br/>
操作如下：打开浏览器->Internet选项 ->安全->启用保护模式。保证Internet、本地Intranet、受信任的站点、受限制的站点4个zone保护模式一致就OK</li>
<li>为了确保能获得正确的坐标点，要把浏览器的缩放设为100%。 <br/>
设置方法：打开浏览器->页面->缩放(Z)->100%</li>
</ul>
</blockquote></blockquote>

<p>参考<a href="http://code.google.com/p/selenium/wiki/InternetExplorerDriver">http://code.google.com/p/selenium/wiki/InternetExplorerDriver</a></p>

<h4>Firefox:</h4>

<blockquote><p>1.Firefox不像InternetExplorer一样，用户可以自定义安装路径。因此使用时，需要制定firefox.exe的安装路径。<br/>
怎么指定?</p>

<blockquote><ul>
<li>java code: <code>System.setProperty()</code></li>
<li>命令行：<code>-DpropertyName='value'</code></li>
</ul>
</blockquote>

<p>2.系统变量的值为：<code>webdriver.firefox.bin</code>，以及其他的key值，详见参考页面。webdriver.firefox.bin用来指定Firefox的安装路径。如不设置，默认从%PROGRAMFILES%\Mozilla Firefox\firefox.exe加载。<strong>个人强烈建议，即使安装在默认路径也进行指定</strong>。 <br/>
3.Java代码如下：</p>

<pre><code>System.setProperty("webdriver.firefox.bin", "C://Mozila/firefox.exe");  
WebDriver driver = new FirefoxDriver();  
</code></pre>

<p>其中firefox的安装路径，按情况自行替换。</p></blockquote>

<p>参考<a href="http://code.google.com/p/selenium/wiki/FirefoxDriver">http://code.google.com/p/selenium/wiki/FirefoxDriver</a></p>

<h4>Chrome:</h4>

<p>chrome要求条件如下：</p>

<blockquote><p>1.Chrome应当安装在默认路径下（如果是从官方下载的，安装后直接都是默认路径）。
<table border=”1px">
<tbody>
<tr><td>OS</td><td>默认位置</td></tr>
<tr><td>Linux</td><td>/usr/bin/google-chrome</td></tr>
<tr><td>Mac</td><td>/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome</td></tr>
<tr><td>Windwos XP</td><td>%HOMEPATH%\Local Settings\Application Data\Google\Chrome\Application\chrome.exe</td></tr>
<tr><td>Windwos Vista</td><td>C:\Users\%USERNAME%\AppData\Local\Google\Chrome\Application\chrome.exe</td></tr>
</tbody>
</table>  <br/>
2.需要下载相应版本的<a href="http://code.google.com/p/chromedriver/downloads/list">chromedriver</a>，用来架起chrome浏览器与webdriver之间的桥梁。 <br/>
3.与FirefoxDriver差不多，需要设置chromedriver的路径。key值为：webdriver.chrome.driver. <br/>
4.Java代码如下：</p>

<pre><code>System.setProperty("webdriver.chrome.driver", "C://drivers/chromedriver.exe");  
WebDriver driver = new ChromeDriver();    
</code></pre>

<p>需要注意的是，chrome浏览器会自动更新，而<a href="http://code.google.com/p/chromedriver/downloads/list">chromedriver</a>也是不断更新的。如果chrome版本太新，而chromedriver没有相应的更换，会造成只是打开chrome浏览器，而不进行任何操作的问题。另外，ChromeDriver只适用于chrome 12.0.712.0+,如果需要使用更老的版本，见参考页面的详细描述。</p></blockquote>

<p>参考<a href="http://code.google.com/p/selenium/wiki/ChromeDriver">http://code.google.com/p/selenium/wiki/ChromeDriver</a></p>

<h3>在一个浏览器里，元素可以找到或者可以操作，而在另外一个浏览器内则不行，为什么？</h3>

<p>不同浏览器之间解析DOM以及响应事件的机制不同，难免会有一些不兼容性。解决方法：</p>

<blockquote><p>1.元素定位，通常是由于DOM解析不同造成的，可以使用不同的findElement方法进行实验，如id,class,xpath等。这个没有统一的结论，大多数情况下id是最靠谱的。<strong>推荐！</strong> <br/>
2.事件的响应，这个如果存在问题，一般比较难解决。通常是由于浏览器之间的差异造成的。可以通过使用selenium更高的版本，或者更换浏览器的版本来解决。或者想一下，有没有其他的方式，换个事件来绕过去，总有办法的。如果实在解决不了，那也只能暂时是这样了。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[selenium FAQ:如何处理JavaScript弹出的alert、prompt窗口]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/12/selenium-faq-alerts-and-prompts/"/>
    <updated>2012-10-12T14:39:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/12/selenium-faq-alerts-and-prompts</id>
    <content type="html"><![CDATA[<h2>经常会碰到，页面操作后，出现一个alert窗口或者prompt确认窗口的情况，这时需要获得窗口的提示信息以及点击确定或取消的情况。</h2>

<pre><code>// Get a handle to the open alert, prompt or confirmation
Alert alert = driver.switchTo().alert();
// Get the text of the alert or prompt
alert.getText();  
// And acknowledge the alert (equivalent to clicking "OK")
alert.accept();
</code></pre>

<p>这是通用的处理方法。但是如果弹出的窗口不是<code>alert()</code>或者<code>prompt()</code>弹出来的则不适用。请注意。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[selenium FAQ:怎么样调用Javascript？]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/12/selenium-faq-how-to-use-javascript/"/>
    <updated>2012-10-12T14:30:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/12/selenium-faq-how-to-use-javascript</id>
    <content type="html"><![CDATA[<h2>selenium自动化开发中，难免需要用到直接调用javascript，怎么用呢？</h2>

<pre><code>WebDriver driver; // Assigned elsewhere
JavascriptExecutor js = (JavascriptExecutor) driver;
js.executeScript("return document.title");
</code></pre>

<p>直接将driver强制转化为JavascriptExecutor,然后执行javascript即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[提高selenium自动化的稳定性2-等待]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/11/selenium-stable-2/"/>
    <updated>2012-10-11T14:32:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/11/selenium-stable-2</id>
    <content type="html"><![CDATA[<h2>很多页面元素都是ajax动态生成的，这就要求进行适当的等待</h2>

<h2>如何进行等待呢？</h2>

<h3>1.直接sleep</h3>

<pre><code>public static void sleep(int seconds) {
    try {
        TimeUnit.SECONDS.sleep(seconds);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>这种方法，用于直接的让thread进行等待指定的seconds。</p>

<!--more-->


<h3>2.使用selenium webdriver提供的等待方法</h3>

<pre><code>driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
</code></pre>

<p>这种方法是webdriver提供的一种隐式等待。<br/>
隐式等待是指当要查找元素（<code>driver.findElement()</code>），而这个元素没有马上出现时，告诉WebDriver查询Dom一定时间。默认值是0,但是设置之后，这个时间将在WebDriver对象实例整个生命周期都起作用。 <br/>
比如使用：<code>driver.findElement(By.id("element"));</code>来查找id="element"的元素。如果没有设置隐式等待，那么执行到这一步的时候就会直接报错<code>NoSuchElementException</code>。而设置后，则会在10秒内不断就查询元素是否存在，如果存在则返回。超过10秒仍没找到，才报错。</p>

<h3>3.使用WebDriver提供的<code>Wait&lt;T&gt;</code>接口</h3>

<pre><code>FluentWait&lt;T&gt; implements Wait&lt;T&gt;  

Wait&lt;WebDriver&gt; wait = new FluentWait&lt;WebDriver&gt;(driver)
   .withTimeout(30, SECONDS)
   .pollingEvery(5, SECONDS)
   .ignoring(NoSuchElementException.class);

WebElement element = wait.until(new Function&lt;WebDriver, WebElement&gt;() {
 public WebElement apply(WebDriver driver) {
   return driver.findElement(By.id("element"));
 }
});
element.click();//something to do
</code></pre>

<p>此方法用于等待一个元素在页面上出现，超时时间为30S，每隔5S去请求一次，并且忽略掉until中抛出的<code>NoSuchElementException</code>。 <br/>
FluentWait的源码中这样写到:</p>

<pre><code>private Duration timeout = FIVE_HUNDRED_MILLIS;  
private Duration interval = FIVE_HUNDRED_MILLIS;   
</code></pre>

<p>因此，如果不设置<code>withTimeout</code>、<code>pollingEvery</code>则相当于等待了500ms,并且请求了一次，要使用<code>FluentWait</code>应该依据实际需要进行设置。那有没有更好的方法呢，有的，请往下看。</p>

<pre><code>WebDriverWait extends FluentWait&lt;WebDriver&gt;

Wait&lt;WebDriver&gt; waiter = new WebDriverWait(driver, 10);
WebElement element = waiter.until(new Function&lt;WebDriver, WebElement&gt;() {
        public WebElement apply(WebDriver driver) {
            return driver.findElement(By.id("element"));
        }

    });
element.click();//something to do
</code></pre>

<p><code>WebDriverWait</code>是继承于<code>FluentWait</code>的，并且实现了对功能进行了增强。从源码看出<code>WebDriverWait</code>的构造函数进行了如下的设置：</p>

<pre><code>withTimeout(timeOutInSeconds, TimeUnit.SECONDS);
pollingEvery(sleepTimeOut, TimeUnit.MILLISECONDS);
ignoring(NotFoundException.class);
</code></pre>

<p>设置了超时时间、每次请求的间隔为<code>sleepTimeOut</code>（默认500ms）、忽略了<code>NotFoundException</code>。因此直接使用<code>WebDriverWait</code>更加的省事。</p>

<h3>总结</h3>

<p>WebDriver提供了很多等待机制来增加selenium自动化的稳定性，只要合理利用是可以达到理想的效果的。 <br/>
无疑第一种方法sleep是最不可取的，是万不得已才用的一份方法，因为元素的加载与网络速度等客观因素直接相关。这个sleep的值是很难取的，值小了不行，值大了会造成case的运行速度缓慢。 <br/>
第二种方法是从全局的角度来解决元素查找问题的，在解决通用性的问题上有一定的优势，可以考虑使用。 <br/>
第三种方法是最好的，也是<strong>推荐</strong>的一种等待方式，很好的解决了动态元素的查找问题。</p>

<hr />
]]></content>
  </entry>
  
</feed>
