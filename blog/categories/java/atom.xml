<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：java | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2015-01-30T12:30:06+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java新特性]]></title>
    <link href="http://www.shenyanchao.cn/blog/2014/08/27/java-new-feature/"/>
    <updated>2014-08-27T14:43:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2014/08/27/java-new-feature</id>
    <content type="html"><![CDATA[<h2>Java7新特性</h2>

<h3>Java7语法特性</h3>

<p>根据JSR 334，Java7添加了数个语法方面的新特性：</p>

<h4>1. switch可以消化String</h4>

<p>比如：</p>

<pre><code>public static void switchString(String s){
    switch (s){
    case "db": ...
    case "wls": ...
    case "ibm": ...
    case "soa": ...
    case "fa": ...
    default: ...
    }
}
</code></pre>

<!--more-->


<h4>2. 新的整数字面表达方式 - "0b"前缀和"_"连数符，提升程序员的幸福感。</h4>

<ul>
<li><p>a. 表示二进制字面值的前缀, 0b:
比如以下三个变量的值相同：</p>

<pre><code>   byte b1 = 0b00100001;     // New
   byte b2 = 0x21;        // Old
   byte b3 = 33;        // Old
</code></pre></li>
<li><p>b. 用下划线连接整数提升其可读性，自身无含义，不可用在数字的起始和末尾：</p>

<pre><code>  long phone_nbr = 021_1111_2222;
</code></pre></li>
</ul>


<h4>3. 简化了泛型对象创建的语法 - "菱形 new"，以下两个语句等价：</h4>

<pre><code>    ArrayList&lt;String&gt; al1 = new ArrayList&lt;String&gt;();    // Old
    ArrayList&lt;String&gt; al2 = new ArrayList&lt;&gt;();        // New
</code></pre>

<h4>4. 为所有的reflect操作异常找了个新爸爸 - ReflectOperationException，孩儿们是：</h4>

<pre><code>    ClassNotFoundException, 
    IllegalAccessException, 
    InstantiationException, 
    InvocationTargetException, 
    NoSuchFieldException, 
    NoSuchMethodException
</code></pre>

<h4>5. catch有了多重捕获功能，也玩起了包养的勾当，以下代码心领神会：</h4>

<pre><code>    try{
        // code
    }
    catch (SQLException | IOException ex) {
        // ...
    }
</code></pre>

<h4>6. 异常精确重抛 - 重抛时自动造型为子类，有点半主动制导武器的style：</h4>

<pre><code>    public void test() throws NoSuchMethodException, NoSuchFieldException{    // 子类
        try{
            // code
        }
        catch (RelectiveOperationException ex){    // 父类
            throws ex;
        }
    }
</code></pre>

<h4>7. 发明了try()结构 - Try with Resources，能够自动接住异常并关闭资源(所谓的资源需要利用新的java.lang.AutoCloseable接口)，注意以下代码中try后面跟的是"("不是"{"：</h4>

<pre><code>try(BufferedReader br = new BufferedReader(new FileReader("/home/oracle/temp.txt"))){
    ... br.readLine() ...
}
</code></pre>

<p>try-with-resources语句可以带catch，也可以向上例一样一个catch也没有。</p>

<h3>Java7 NIO 新方法</h3>

<p>整体来说，对IO操作进行了优化，使用起来更加顺手，甚至可以替换apache common-io包。</p>

<h4>1.增加<code>java.nio.file.Paths</code>用于目录操作</h4>

<pre><code>    Path path = Paths.get("/home/shenyanchao", "Desktop");
    System.out.println(path.toAbsolutePath());
    System.out.println(path.getParent());
    System.out.println(path.getFileSystem().isOpen());
</code></pre>

<h4>2.增加<code>java.nio.file.Files</code>工具类来处理文件</h4>

<pre><code>    Files.copy(src,dest, StandardCopyOption.COPY_ATTRIBUTES,StandardCopyOption.REPLACE_EXISTING);

    Files.move(src,dest,StandardCopyOption.ATOMIC_MOVE);

    Files.createLink(src,dest);
    Files.createSymbolicLink(src,dest);
    Files.deleteIfExists(dest);

    Files.readAllLines(src);

    Files.createTempFile(src,"aa","bb");
</code></pre>

<h4>3.目录树遍历</h4>

<p>使用<code>FileVisitor</code>来实现访问者模式。</p>

<pre><code>preVisitDirectory(T dir, BasicFileAttributes attrs);
visitFile(T dir, BasicFileAttributes attrs);
visitFileFailed(T dir, IOException exc);
postVisitDirectory(T dir, IOException exc);
</code></pre>

<h4>4.使用WatchService来监控目录，变化请通知</h4>

<pre><code>    WatchService watchService = FileSystems.getDefault().newWatchService();
    Path path = Paths.get("/home/shenyanchao/Documents");
    WatchKey watchKey = path.register(watchService, StandardWatchEventKinds.ENTRY_CREATE,
            StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY);
    while (true) {
        List&lt;WatchEvent&lt;?&gt;&gt; watchEvents = watchService.take().pollEvents();
        for (WatchEvent&lt;?&gt; watchEvent : watchEvents) {
            System.out.printf("[%s]文件发生了[%s]事件。%n", watchEvent.context(), watchEvent.kind());
        }
        boolean valid = watchKey.reset();
        if (!valid){
            break;
        }
    }
</code></pre>

<h3>Java7并发（JSR166Y）</h3>

<h4>Fork Join框架，大任务分解为小任务</h4>

<p>通过ForkJoinPool，ForkJoinTask来实现的。</p>

<pre><code>public class Fibonacci extends RecursiveTask&lt;Integer&gt; {

    final int n;

    Fibonacci(int n) {
        this.n = n;
    }

    @Override
    protected Integer compute() {
        if (n &lt;= 1)
            return n;
        Fibonacci f1 = new Fibonacci(n - 1);
        f1.fork();
        Fibonacci f2 = new Fibonacci(n - 2);
        f2.fork();
        return f1.join() + f2.join();
    }

    public static void main(String[] args) {
        Fibonacci fibonacci = new Fibonacci(4);
        System.out.println(fibonacci.compute());
    }
}
</code></pre>

<h4>TransferQueue，ConcurrentLinkedDeque等新类</h4>

<p>TransferQueue是一个继承了 BlockingQueue的接口，并且增加若干新的方法。</p>

<h4>ThreadLocalRandom用于生成随机数</h4>

<pre><code>ThreadLocalRandom.current().nextInt (...)
</code></pre>

<p>Random是线程安全的，但速度较慢。而这个是快速的，但是速度很快。适用于线程内部的使用。</p>

<h3>Java7 client</h3>

<p>诸如更新了很多swing显示相关的api. <br/>
更好的支持linux fonts</p>

<h3>Java7 VM新特性</h3>

<h4>1.引入Garbage First回收算法</h4>

<p>Garbage First简称G1，它的目标是要做到尽量减少GC所导致的应用暂停的时间，让应用达到准实时的效果，同时保持JVM堆空间的利用率。用于替代CMS</p>

<hr />

<p>参考文档：<a href="http://www.slideshare.net/boulderjug/55-things-in-java-7">http://www.slideshare.net/boulderjug/55-things-in-java-7</a></p>

<h2>Java8新特性</h2>

<h3>1.接口默认方法[接口允许有实现啦]</h3>

<p>Java 8允许我们给接口添加一个非抽象的方法实现，只需要使用 <code>default</code>关键字即可，这个特征又叫做扩展方法。</p>

<pre><code>interface Formula {
    double calculate(int a);

    default double sqrt(int a) {
        return Math.sqrt(a);
    }
}
</code></pre>

<h3>2.Lambda表达式</h3>

<p>据说借鉴了各种动态语言的新特性，比如scala，python
首先看看在老版本的Java中是如何排列字符串的：</p>

<pre><code>List&lt;String&gt; names = Arrays.asList("peter", "anna", "mike", "xenia");

Collections.sort(names, new Comparator&lt;String&gt;() {
@Override
public int compare(String a, String b) {
    return b.compareTo(a);
}
});
</code></pre>

<p>Java 8 提供了更为简介的语法，lambda表达式：</p>

<pre><code>Collections.sort(names, (String a, String b) -&gt; {
    return b.compareTo(a);
});
</code></pre>

<p>可以更短：</p>

<pre><code>Collections.sort(names, (String a, String b) -&gt; b.compareTo(a));
</code></pre>

<p>再短：</p>

<pre><code>Collections.sort(names, (a, b) -&gt; b.compareTo(a));
</code></pre>

<h3>3.@FunctionalInterface</h3>

<p>这是新引入的一个注解，用于支持lambda。用<code>FunctionalInterface</code>标识的接口，必须只包含1个抽象方法。否则会编译报错的。因为如果有多个抽象方法，lambda就无法知道对应哪个方法了。</p>

<pre><code>@FunctionalInterface
interface Converter&lt;F, T&gt; {
    T convert(F from);
}

Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);
Integer converted = converter.convert("123");
System.out.println(converted);    // 123
</code></pre>

<p>例子中，<code>(from) -&gt; Integer.valueOf(from)</code>这个lambda表达式指出了convert方法的具体实现。</p>

<h4>(1)方法与构造函数的引用::</h4>

<p>Java 8 允许你使用 :: 关键字来传递方法或者构造函数引用,下面的代码展示了如何引用一个静态方法</p>

<pre><code>Converter&lt;String, Integer&gt; converter = Integer::valueOf;
Integer converted = converter.convert("123");
System.out.println(converted);   // 123
</code></pre>

<p>当然也可以引用一个对象的方法：</p>

<pre><code>converter = something::startsWith;
String converted = converter.convert("Java");
System.out.println(converted);    // "J"
</code></pre>

<p>那么如何引用构造函数呢？</p>

<pre><code>class Person {
    String firstName;
    String lastName;

    Person() {}

    Person(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
}
</code></pre>

<p>这是一个pojo类。下面创建一个用于创建person对象的FunctionalInterface：</p>

<pre><code>interface PersonFactory&lt;P extends Person&gt; {
    P create(String firstName, String lastName);
}
</code></pre>

<p>这里我们使用构造函数引用来将他们关联起来，而不是实现一个完整的工厂：</p>

<pre><code>PersonFactory&lt;Person&gt; personFactory = Person::new;
Person person = personFactory.create("Peter", "Parker");
</code></pre>

<p>我们只需要使用 Person::new 来获取Person类构造函数的引用，Java编译器会自动根据PersonFactory.create方法的签名来选择合适的构造函数。</p>

<h4>(2)内嵌的Functional Interfaces</h4>

<p>上面提到的Comparator接口，为什么可以使用lambda表达式，正是因为在java 8中，被定义为了FunctionalInterface。这些已经存在的接口是通过添加@FunctionalInterface注解来支持的。</p>

<p>另外，java 8 api还提供了丰富的接口。这些接口貌似都是从Google Guava包里得到的提示，命名甚至都是一样的。</p>

<ul>
<li>Predicates</li>
</ul>


<p>Predicate 接口只有一个参数，返回boolean类型。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）：</p>

<pre><code>    Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; 0;

    predicate.test("foo");              // true
    predicate.negate().test("foo");     // false

    Predicate&lt;Boolean&gt; nonNull = Objects::nonNull;
    Predicate&lt;Boolean&gt; isNull = Objects::isNull;

    Predicate&lt;String&gt; isEmpty = String::isEmpty;
    Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();
</code></pre>

<ul>
<li>Function</li>
</ul>


<p>Function 接口有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法（compose, andThen）：</p>

<pre><code>    Function&lt;String, Integer&gt; toInteger = Integer::valueOf;
    Function&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf);

    backToString.apply("123");     // "123"
</code></pre>

<ul>
<li>Supplier</li>
</ul>


<p>Supplier 接口返回一个给定类型的泛型，和Function接口不同的是该接口不接受任何参数.</p>

<pre><code>    Supplier&lt;Person&gt; personSupplier = Person::new;
    personSupplier.get();   // new Person
</code></pre>

<ul>
<li>Consumer</li>
</ul>


<p>Consumer在一个输入参数上做一些操作。</p>

<pre><code>    Consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println("Hello, " + p.firstName);
    greeter.accept(new Person("Luke", "Skywalker"));
</code></pre>

<ul>
<li>Comparator</li>
</ul>


<p>Comparator是早就存在的，不过java 8提供了一些默认方法。</p>

<pre><code>    Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);

    Person p1 = new Person("John", "Doe");
    Person p2 = new Person("Alice", "Wonderland");

    comparator.compare(p1, p2);             // &gt; 0
    comparator.reversed().compare(p1, p2);  // &lt; 0
</code></pre>

<ul>
<li>Optional</li>
</ul>


<p>Optional其实并不是一个FunctionInterface，而是一个用来避免<code>NullPointerException</code>的工具。</p>

<pre><code>    Optional&lt;String&gt; optional = Optional.of("bam");

    optional.isPresent();           // true
    optional.get();                 // "bam"
    optional.orElse("fallback");    // "bam"

    optional.ifPresent((s) -&gt; System.out.println(s.charAt(0)));     // "b"
</code></pre>

<ul>
<li>Stream</li>
</ul>


<p><code>java.util.stream.Stream</code>代表了能在其上做一系列操作的一串元素。在java 8中，Collections被扩展了。我们可以通过<code>Collections.stream()</code>或者<code>Collections.parallelStream()</code>来创建Stream。
首先，新建一个数组。</p>

<pre><code>    List&lt;String&gt; stringCollection = new ArrayList&lt;&gt;();
    stringCollection.add("ddd2");
    stringCollection.add("aaa2");
    stringCollection.add("bbb1");
    stringCollection.add("aaa1");
    stringCollection.add("bbb3");
    stringCollection.add("ccc");
    stringCollection.add("bbb2");
    stringCollection.add("ddd1");
</code></pre>

<p>具体使用如下：</p>

<pre><code>    stringCollection
        .stream()
        .sorted()
        .filter((s) -&gt; s.startsWith("a"))
        .forEach(System.out::println);

    // "aaa1", "aaa2"
</code></pre>

<p>map()函数可以把每个值转换为另外的值。</p>

<pre><code>    stringCollection
        .stream()
        .map(String::toUpperCase)
        .sorted((a, b) -&gt; b.compareTo(a))
        .forEach(System.out::println);

    // "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "AAA2", "AAA1"        
</code></pre>

<p>另外提供有各种match方法。</p>

<pre><code>    boolean anyStartsWithA =
        stringCollection
            .stream()
            .anyMatch((s) -&gt; s.startsWith("a"));

    System.out.println(anyStartsWithA);      // true

    boolean allStartsWithA =
        stringCollection
            .stream()
            .allMatch((s) -&gt; s.startsWith("a"));

    System.out.println(allStartsWithA);      // false

    boolean noneStartsWithZ =
        stringCollection
            .stream()
            .noneMatch((s) -&gt; s.startsWith("z"));

    System.out.println(noneStartsWithZ);      // true
</code></pre>

<p>count()方法返回的是一个值。</p>

<pre><code>    long startsWithB =
        stringCollection
            .stream()
            .filter((s) -&gt; s.startsWith("b"))
            .count();

    System.out.println(startsWithB);    // 3        
</code></pre>

<p>reduce则进行了归一化处理：</p>

<pre><code>    Optional&lt;String&gt; reduced =
        stringCollection
            .stream()
            .sorted()
            .reduce((s1, s2) -&gt; s1 + "#" + s2);

    reduced.ifPresent(System.out::println);
    // "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"
</code></pre>

<ul>
<li>ParallelStream</li>
</ul>


<p>它是一个并行的。速度要比stream快的多。</p>

<ul>
<li>Map</li>
</ul>


<p>Map并不支持Stream，不过Java 8 提供了各种有用的新方法：</p>

<pre><code>    Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();

    for (int i = 0; i &lt; 10; i++) {
        map.putIfAbsent(i, "val" + i);
    }

    map.forEach((id, val) -&gt; System.out.println(val));

    map.computeIfPresent(3, (num, val) -&gt; val + num);
    map.get(3);             // val33

    map.computeIfPresent(9, (num, val) -&gt; null);
    map.containsKey(9);     // false

    map.computeIfAbsent(23, num -&gt; "val" + num);
    map.containsKey(23);    // true

    map.computeIfAbsent(3, num -&gt; "bam");
    map.get(3);             // val33

    map.remove(3, "val3");
    map.get(3);             // val33

    map.remove(3, "val33");
    map.get(3);             // null

    map.getOrDefault(42, "not found");  // not found

    map.merge(9, "val9", (value, newValue) -&gt; value.concat(newValue));
    map.get(9);             // val9

    map.merge(9, "concat", (value, newValue) -&gt; value.concat(newValue));
    map.get(9);             // val9concat
</code></pre>

<h3>4.时间API</h3>

<p>Java8更新了Date API,这个新的api与joda-time类似。</p>

<h4>(1)Clock</h4>

<p>Clock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 System.currentTimeMillis() 来获取当前的微秒数。某一个特定的时间点也可以使用Instant类来表示，Instant类也可以用来创建老的java.util.Date对象。</p>

<pre><code>    Clock clock = Clock.systemDefaultZone();
    long millis = clock.millis();

    Instant instant = clock.instant();
    Date legacyDate = Date.from(instant);   // legacy java.util.Date
</code></pre>

<h4>(2)TimeZones</h4>

<p>在新API中时区使用ZoneId来表示。时区可以很方便的使用静态方法of来获取到。 时区定义了到UTS时间的时间差，在Instant时间点对象到本地日期对象之间转换的时候是极其重要的</p>

<pre><code>    System.out.println(ZoneId.getAvailableZoneIds());
    // prints all available timezone ids

    ZoneId zone1 = ZoneId.of("Europe/Berlin");
    ZoneId zone2 = ZoneId.of("Brazil/East");
    System.out.println(zone1.getRules());
    System.out.println(zone2.getRules());

    // ZoneRules[currentStandardOffset=+01:00]
    // ZoneRules[currentStandardOffset=-03:00]
</code></pre>

<h4>(3)LocalTime</h4>

<p>LocalTime 定义了一个没有时区信息的时间，例如 晚上10点，或者 17:30:15。下面的例子使用前面代码创建的时区创建了两个本地时间。之后比较时间并以小时和分钟为单位计算两个时间的时间差：</p>

<pre><code>    LocalTime now1 = LocalTime.now(zone1);
    LocalTime now2 = LocalTime.now(zone2);

    System.out.println(now1.isBefore(now2));  // false

    long hoursBetween = ChronoUnit.HOURS.between(now1, now2);
    long minutesBetween = ChronoUnit.MINUTES.between(now1, now2);

    System.out.println(hoursBetween);       // -3
    System.out.println(minutesBetween);     // -239
</code></pre>

<p>LocalTime 提供了多种工厂方法来简化对象的创建，包括解析时间字符串</p>

<pre><code>    LocalTime late = LocalTime.of(23, 59, 59);
    System.out.println(late);       // 23:59:59

    DateTimeFormatter germanFormatter =
        DateTimeFormatter
            .ofLocalizedTime(FormatStyle.SHORT)
            .withLocale(Locale.GERMAN);

    LocalTime leetTime = LocalTime.parse("13:37", germanFormatter);
    System.out.println(leetTime);   // 13:37
</code></pre>

<h4>(4)LocalDate</h4>

<p>LocalDate 表示了一个确切的日期，比如 2014-03-11。该对象值是不可变的，用起来和LocalTime基本一致。下面的例子展示了如何给Date对象加减天/月/年。另外要注意的是这些对象是不可变的，操作返回的总是一个新实例。</p>

<pre><code>    LocalDate today = LocalDate.now();
    LocalDate tomorrow = today.plus(1, ChronoUnit.DAYS);
    LocalDate yesterday = tomorrow.minusDays(2);

    LocalDate independenceDay = LocalDate.of(2014, Month.JULY, 4);
    DayOfWeek dayOfWeek = independenceDay.getDayOfWeek();
    System.out.println(dayOfWeek);    // FRIDAY

    DateTimeFormatter germanFormatter =
        DateTimeFormatter
            .ofLocalizedDate(FormatStyle.MEDIUM)
            .withLocale(Locale.GERMAN);

    LocalDate xmas = LocalDate.parse("24.12.2014", germanFormatter);
    System.out.println(xmas);   // 2014-12-24
</code></pre>

<h4>(5)LocalDateTime</h4>

<pre><code>    LocalDateTime 同时表示了时间和日期，相当于前两节内容合并到一个对象上了。LocalDateTime和LocalTime还有LocalDate一样，都是不可变的。LocalDateTime提供了一些能访问具体字段的方法。

    LocalDateTime sylvester = LocalDateTime.of(2014, Month.DECEMBER, 31, 23, 59, 59);

    DayOfWeek dayOfWeek = sylvester.getDayOfWeek();
    System.out.println(dayOfWeek);      // WEDNESDAY

    Month month = sylvester.getMonth();
    System.out.println(month);          // DECEMBER

    long minuteOfDay = sylvester.getLong(ChronoField.MINUTE_OF_DAY);
    System.out.println(minuteOfDay);    // 1439

    Instant instant = sylvester
            .atZone(ZoneId.systemDefault())
            .toInstant();

    Date legacyDate = Date.from(instant);
    System.out.println(legacyDate);     // Wed Dec 31 23:59:59 CET 2014

    DateTimeFormatter formatter =
        DateTimeFormatter
            .ofPattern("MMM dd, yyyy - HH:mm");

    LocalDateTime parsed = LocalDateTime.parse("Nov 03, 2014 - 07:13", formatter);
    String string = formatter.format(parsed);
    System.out.println(string);     // Nov 03, 2014 - 07:13
</code></pre>

<h3>5.支持重复注解了，注解也可以用在任何地方了</h3>

<p>java8之前，类，属性，方法才有注解，现在几乎任何地方都可以了。</p>

<pre><code>new @Interned MyObject();
myString = (@NonNull String) str;

void monitorTemperature() throws @Critical TemperatureException { ... }
</code></pre>

<p>之前要实现重复注解需要这样：</p>

<pre><code>public @interface Authority {
     String role();
}

public @interface Authorities {
    Authority[] value();
}

public class RepeatAnnotationUseOldVersion {

    @Authorities({@Authority(role="Admin"),@Authority(role="Manager")})
    public void doSomeThing(){
    }
}
</code></pre>

<p>而现在：</p>

<pre><code>@Repeatable(Authorities.class)
public @interface Authority {
     String role();
}

public @interface Authorities {
    Authority[] value();
}

public class RepeatAnnotationUseNewVersion {
    @Authority(role="Admin")
    @Authority(role="Manager")
    public void doSomeThing(){ }
}
</code></pre>

<h3>6.Nashorn JavaScript 引擎</h3>

<p>简单的说，它是 Rhino 的接替者.升级啦。</p>

<h3>7.StampedLock</h3>

<p>它是java8在java.util.concurrent.locks新增的一个API。</p>

<p>ReentrantReadWriteLock 在沒有任何读写锁时，才可以取得写入锁，这可用于实现了悲观读取（Pessimistic Reading），即如果执行中进行读取时，经常可能有另一执行要写入的需求，为了保持同步，ReentrantReadWriteLock 的读取锁定就可派上用场。</p>

<p>然而，如果读取执行情况很多，写入很少的情况下，使用 ReentrantReadWriteLock 可能会使写入线程遭遇饥饿（Starvation）问题，也就是写入线程吃吃无法竞争到锁定而一直处于等待状态。</p>

<p>StampedLock控制锁有三种模式（写，读，乐观读），一个StampedLock状态是由版本和模式两个部分组成，锁获取方法返回一个数字作为票据stamp，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。在读锁上分为悲观锁和乐观锁。</p>

<p>所谓的乐观读模式，也就是若读的操作很多，写的操作很少的情况下，你可以乐观地认为，写入与读取同时发生几率很少，因此不悲观地使用完全的读取锁定，程序可以查看读取资料之后，是否遭到写入执行的变更，再采取后续的措施（重新读取变更信息，或者抛出异常） ，这一个小小改进，可大幅度提高程序的吞吐量！！</p>

<p>它是java8在java.util.concurrent.locks新增的一个API。</p>

<p>ReentrantReadWriteLock 在沒有任何读写锁时，才可以取得写入锁，这可用于实现了悲观读取（Pessimistic Reading），即如果执行中进行读取时，经常可能有另一执行要写入的需求，为了保持同步，ReentrantReadWriteLock 的读取锁定就可派上用场。</p>

<p>然而，如果读取执行情况很多，写入很少的情况下，使用 ReentrantReadWriteLock 可能会使写入线程遭遇饥饿（Starvation）问题，也就是写入线程吃吃无法竞争到锁定而一直处于等待状态。</p>

<p>StampedLock控制锁有三种模式（写，读，乐观读），一个StampedLock状态是由版本和模式两个部分组成，锁获取方法返回一个数字作为票据stamp，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。在读锁上分为悲观锁和乐观锁。</p>

<p>所谓的乐观读模式，也就是若读的操作很多，写的操作很少的情况下，你可以乐观地认为，写入与读取同时发生几率很少，因此不悲观地使用完全的读取锁定，程序可以查看读取资料之后，是否遭到写入执行的变更，再采取后续的措施（重新读取变更信息，或者抛出异常） ，这一个小小改进，可大幅度提高程序的吞吐量！！</p>

<pre><code>class Point {
   private double x, y;
   private final StampedLock sl = new StampedLock();
   void move(double deltaX, double deltaY) { // an exclusively locked method
     long stamp = sl.writeLock();
     try {
       x += deltaX;
       y += deltaY;
     } finally {
       sl.unlockWrite(stamp);
     }
   }
  //下面看看乐观读锁案例
   double distanceFromOrigin() { // A read-only method
     long stamp = sl.tryOptimisticRead(); //获得一个乐观读锁
     double currentX = x, currentY = y; //将两个字段读入本地局部变量
     if (!sl.validate(stamp)) { //检查发出乐观读锁后同时是否有其他写锁发生？
        stamp = sl.readLock(); //如果没有，我们再次获得一个读悲观锁
        try {
          currentX = x; // 将两个字段读入本地局部变量
          currentY = y; // 将两个字段读入本地局部变量
        } finally {
           sl.unlockRead(stamp);
        }
     }
     return Math.sqrt(currentX * currentX + currentY * currentY);
   }
//下面是悲观读锁案例
   void moveIfAtOrigin(double newX, double newY) { // upgrade
     // Could instead start with optimistic, not read mode
     long stamp = sl.readLock();
     try {
       while (x == 0.0 &amp;&amp; y == 0.0) { //循环，检查当前状态是否符合
         long ws = sl.tryConvertToWriteLock(stamp); //将读锁转为写锁
         if (ws != 0L) { //这是确认转为写锁是否成功
           stamp = ws; //如果成功 替换票据
           x = newX; //进行状态改变
           y = newY; //进行状态改变
           break;
         }
         else { //如果不能成功转换为写锁
           sl.unlockRead(stamp); //我们显式释放读锁
           stamp = sl.writeLock(); //显式直接进行写锁 然后再通过循环再试
         }
       }
     } finally {
       sl.unlock(stamp); //释放读锁或写锁
     }
   }
 }
</code></pre>

<hr />

<p>参考文档：<a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/">http://winterbe.com/posts/2014/03/16/java-8-tutorial/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSTL介绍]]></title>
    <link href="http://www.shenyanchao.cn/blog/2014/03/18/use-jstl/"/>
    <updated>2014-03-18T18:49:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2014/03/18/use-jstl</id>
    <content type="html"><![CDATA[<h3>EL 表达式</h3>

<p>在JSP页面中，使用标签库代替传统的Java片段语言来实现页面的显示逻辑已经不是新技术了，然而，由自定义标签很容易造成重复定义和非标准的实现。鉴于此，出现了JSTL（JSP Standard Tag Library），为大多数JSP页面逻辑提供了实现的JSTL技术，该技术本身就是一个标签库。</p>

<p>Sun公司Java规范标准的JSTL由apache jakarta组织负责维护。作为开源的标准技术，它一直在不断地完善。JSTL的发布包有两个版本：Standard-1.0 Taglib、Standard-1.1 Taglib，它们在使用时是不同的。</p>

<p>Standard-1.0 Taglib（JSTL1.0）支持Servlet2.3和JSP1.2规范，Web应用服务器Tomcat4支持这些规范，而它的发布也在Tomcat 4.1.24测试通过了。</p>

<p>Standard-1.1 Taglib（JSTL1.1）支持Servlet2.4和JSP2.0规范，Web应用服务器Tomcat5支持这些规范，它的发布在Tomcat 5.0.3测试通过了。</p>

<p>本文将以由Sun发布的Standard-1.1 Taglib标签库为主，而apache jakarta组织发布的开源标签库，可以从http://jakarta.apache.org/taglibs/找到所需要的帮助。Sun发布的标准JSTL1.1标签库有以下几个标签：</p>

<ul>
<li>核心标签库：包含Web应用的常见工作，比如：循环、表达式赋值、基本输入输出等。</li>
<li>国际化标签库：用来格式化显示数据的工作，比如：对不同区域的日期格式化等。</li>
<li>数据库标签库：可以做访问数据库的工作。</li>
<li>XML标签库：用来访问XML文件的工作，这是JSTL标签库的一个特点。</li>
<li>函数标签库：用来读取已经定义的某个函数。</li>
</ul>


<p>此外，JSTL还提供了EL表达式语言（Expression Language）来进行辅助的工作。</p>

<p>JSTL标签库由标签库和EL表达式语言两个部分组成。EL在JSTL 1.0规范中被引入，当时用来作为Java表达式来工作，而该表达式必须配合JSTL的标签库才能得到需要的结果。</p>

<p>说明：在JSTL 1.1规范中，JSP2.0容器已经能够独立的理解任何EL表达式。EL可以独立出现在JSP页面的任何角落。本文随后的内容将以JSTL 1.1规范作为介绍的重点。</p>

<!--more-->


<h4>9.2.1JSTL EL 表达式语言简介</h4>

<p>EL是从JavaScript脚本语言得到启发的一种表达式语言，它借鉴了JavaScript多类型转换无关性的特点。在使用EL从scope中得到参数时可以自动转换类型，因此对于类型的限制更加宽松。Web服务器对于request请求参数通常会以String类型来发送，在得到时使用的Java语言脚本就应该是request.getParameter(“XXX”)，这样的话，对于实际应用还必须进行强制类型转换。而EL就将用户从这种类型转换的繁琐工作脱离出来，允许用户直接使用EL表达式取得的值，而不用关心它是什么类型。</p>

<p>下面的示例就是一个EL表达式，见例9.1。</p>

<p>例9.1：简单EL表达式</p>

<pre><code>  &lt;%@ page contentType="text/html; charset=UTF-8"%&gt;
  &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
  &lt;html&gt;
   &lt;body&gt; ${sampleValue + 1} &lt;br&gt; &lt;/body&gt;
  &lt;/html&gt;
</code></pre>

<p>这个示例将在JSP页面显示为“1”，EL表达式必须以“${XXX}”来表示，其中“XXX”部分就是具体表达式内容，“${}”将这个表达式内容包含在其中作为EL表达式的定义。本示例可以在满足JSP2.0规范的任何Web应用服务器中使用。</p>

<h4>9.2.2 EL 表达式的默认变量</h4>

<p>一个EL表达式包含变量和操作符两个内容。任何存在于JSP作用范围的JavaBean都可以被转化成EL表达式来使用，它所包含的默认变量如下：</p>

<p>1．默认变量pageScope、requestScope、sessionScope、applicationScope</p>

<pre><code>  这4个默认变量包含Scope作用范围的参数集合，相当于被保存在java.util.Map中的某个参数。下面看简单的示例9.2：
</code></pre>

<p>例9.2：使用sessionScope变量的EL表达式</p>

<pre><code>&lt;%request.getSession().setAttribute("sampleValue", new Integer(10));%&gt;
${sessionScope.sampleValue}
</code></pre>

<p>取得保存在Session中参数的sessionScope变量的EL表达式，“.”是property访问操作符，在这里表示从Session中取得“键”为“sampleValue”的参数，并显示出来。显示结果为“10”。</p>

<p>2．默认变量param、paramValues</p>

<pre><code>  这两个默认变量包含请求参数的集合，param表明请求包含的参数为单一控件，paramValues表明请求包含的参数为控件数组。下面看一个简单示例9.3：
</code></pre>

<p>例9.3：提交请求的页面和接受的页面</p>

<pre><code>&lt;%@ page contentType="text/html; charset=UTF-8"%&gt;
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
 &lt;body&gt;
     &lt;form action="SampleJsp.jsp"&gt;
    &lt;input type="text" name="sampleValue" value="10"&gt;
    &lt;input type="text" name="sampleValue" value="11"&gt;
    &lt;input type="text" name="sampleValue" value="12"&gt;
    &lt;input type="text" name="sampleSingleValue" value="SingleValue"&gt;
    &lt;input type="submit" value="Submit"&gt;
    &lt;/form&gt;
 &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>在这个页面中定义了两组控件，控件名为“sampleValue”的是一套控件数组，控件名为“sampleSingleValue”的是单一控件，通过递交将请求参数传送到SampleJsp.jsp。</p>

<pre><code>&lt;%@ page contentType="text/html; charset=UTF-8"%&gt;
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
 &lt;body&gt;
    ${paramValues.sampleValue[2]} &lt;br&gt;
    ${param.sampleSingleValue} &lt;br&gt;
 &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>这是请求转发到的页面，通过EL表达式的paramValues变量得到控件数组中最后一个控件的递交参数，通过EL表达式的param变量得到单一控件的递交参数。控件数组参数的EL表达式使用“[]”来指定数组下标。本示例将显示控件数组中最后一个控件的值“12”和单一控件的值“SingleValue”。</p>

<p>3．默认变量header、headerValues</p>

<p>这两个默认变量包含请求参数头部信息的集合，header变量表示单一头部信息，headerValues则表示数组型的头部信息。</p>

<p>4．默认变量cookie</p>

<p>包含所有请求的cookie集合，集合中的每个对象对应javax.servlet.http.Cookie。</p>

<p>5．默认变量initParam</p>

<p>包含所有应用程序初始化参数的集合。</p>

<p>6．默认变量pageContext</p>

<p>等价于page环境类javax.servlet.jsp.PageContext的实例，用来提供访问不同的请求参数。
11个默认变量几乎包含了Web应用的所有基本操作，若一个表达式不使用这些变量而直接使用参数名，那么就采用就近原则。该表达式将使用最近取得的参数值。</p>

<h3>表达式的操作符</h3>

<p>EL表达式中还有许多操作符可以帮助完成各种所需的操作，之前的示例中“.”、“[]”就是其中的两个，下面将用表9.1来展示所有操作符及它们各自的功能。</p>

<p>表9.1 EL表达式的操作符</p>

<table cellspacing="0" cellpadding="0" width="562" border="1">
                        <tbody>
                            <tr>
                                <td width="64">
                                <p align="left">操作符</p>
                                </td>
                                <td width="498">
                                <p align="left">功能和作用</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">.</p>
                                </td>
                                <td width="498">
                                <p align="left">访问一个bean属性或者Map entry</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">[]</p>
                                </td>
                                <td width="498">
                                <p align="left">访问一个数组或者链表元素</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">()</p>
                                </td>
                                <td width="498">
                                <p align="left">对子表达式分组，用来改变赋值顺序</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">? :</p>
                                </td>
                                <td width="498">
                                <p align="left">条件语句，比如：条件?ifTrue:ifFalse</p>
                                <p align="left">如果条件为真，表达式值为前者，反之为后者</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">+</p>
                                </td>
                                <td width="498">
                                <p align="left">数学运算符，加操作</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">-</p>
                                </td>
                                <td width="498">
                                <p align="left">数学运算符，减操作或者对一个值取反</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">*</p>
                                </td>
                                <td width="498">
                                <p align="left">数学运算符，乘操作</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">/ 或div</p>
                                </td>
                                <td width="498">
                                <p align="left">数学运算符，除操作</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">% 或mod</p>
                                </td>
                                <td width="498">
                                <p align="left">数学运算符，模操作(取余)</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">== 或eq</p>
                                </td>
                                <td width="498">
                                <p align="left">逻辑运算符，判断符号左右两端是否相等，如果相等返回true，否则返回false</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">!= 或ne</p>
                                </td>
                                <td width="498">
                                <p align="left">逻辑运算符，判断符号左右两端是否不相等，如果不相等返回true，否则返回false</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">&lt; 或lt</p>
                                </td>
                                <td width="498">
                                <p align="left">逻辑运算符，判断符号左边是否小于右边，如果小于返回true，否则返回false</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">&gt; 或gt</p>
                                </td>
                                <td width="498">
                                <p align="left">逻辑运算符，判断符号左边是否大于右边，如果大于返回true，否则返回false</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">&lt;= 或le</p>
                                </td>
                                <td width="498">
                                <p align="left">逻辑运算符，判断符号左边是否小于或者等于右边，如果小于或者等于返回true，否则返回false</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">&gt;= 或ge</p>
                                </td>
                                <td width="498">
                                <p align="left">逻辑运算符，判断符号左边是否大于或者等于右边，如果大于或者等于返回true，否则返回false</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">&amp;&amp; 或and</p>
                                </td>
                                <td width="498">
                                <p align="left">逻辑运算符，与操作赋。如果左右两边同为true返回true，否则返回false</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">|| 或or</p>
                                </td>
                                <td width="498">
                                <p align="left">逻辑运算符，或操作赋。如果左右两边有任何一边为true返回true，否则返回false</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">! 或not</p>
                                </td>
                                <td width="498">
                                <p align="left">逻辑运算符，非操作赋。如果对true取运算返回false，否则返回true</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">empty</p>
                                </td>
                                <td width="498">
                                <p align="left">用来对一个空变量值进行判断: null、一个空String、空数组、空Map、没有条目的Collection集合</p>
                                </td>
                            </tr>
                            <tr>
                                <td valign="top" width="64">
                                <p align="left">func(args)</p>
                                </td>
                                <td width="498">
                                <p align="left">调用方法, func是方法名，args是参数，可以没有，或者有一个、多个参数.参数间用逗号隔开</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>这些操作符都是极其有用的，下面通过几个示例来演示它们的使用方法：</p>

<p>例9.4：几组操作符的示例</p>

<pre><code>${pageScope.sampleValue + 12} &lt;br&gt;           //显示12
${(pageScope.sampleValue + 12)/3} &lt;br&gt;     //显示4.0
${(pageScope.sampleValue + 12) /3==4} &lt;br&gt;         //显示true
${(pageScope.sampleValue + 12) /3&gt;=5} &lt;br&gt;         //显示false
&lt;input type="text" name="sample1" value="${pageScope.sampleValue + 10}"&gt; //显示值为10的Text控件
</code></pre>

<p>可以看到，对于这些示例，程序设计者完全无需管理它们的类型转换，在表达式内部都已经处理了。有了EL表达式，在JSP页面的编程变得更灵活，也更容易。</p>

<h3>标签库介绍</h3>

<p>在JSTL1.1中有以下这些标签库是被支持的：Core标签库、XML processing标签库、I18N formatting标签库、Database access标签库、Functions标签库。
对应的标识符见表9.2所示：</p>

<p>表9.2 标签库的标识符</p>

<table cellspacing="0" cellpadding="0" width="360" border="1">
                        <tbody>
                            <tr>
                                <td width="107">
                                <p align="left">标签库</p>
                                </td>
                                <td width="202">
                                <p align="left">URI</p>
                                </td>
                                <td width="50">
                                <p align="center">前缀</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="107">
                                <p align="left">Core</p>
                                </td>
                                <td width="202">
                                <p align="left">http://java.sun.com/jsp/jstl/core</p>
                                </td>
                                <td width="50">
                                <p align="left">c</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="107">
                                <p align="left">XML processing</p>
                                </td>
                                <td width="202">
                                <p align="left">http://java.sun.com/jsp/jstl/xml</p>
                                </td>
                                <td width="50">
                                <p align="left">x</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="107">
                                <p align="left">I18N formatting</p>
                                </td>
                                <td width="202">
                                <p align="left">http://java.sun.com/jsp/jstl/fmt</p>
                                </td>
                                <td width="50">
                                <p align="left">fmt</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="107">
                                <p align="left">Database access</p>
                                </td>
                                <td width="202">
                                <p align="left">http://java.sun.com/jsp/jstl/sql</p>
                                </td>
                                <td width="50">
                                <p align="left">sql</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="107">
                                <p align="left">Functions</p>
                                </td>
                                <td width="202">
                                <p align="left">http://java.sun.com/jsp/jstl/functions</p>
                                </td>
                                <td width="50">
                                <p align="left">fn</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看例9.5，简单使用标签库的示例。</p>

<p>例9.5：简单JSTL标签库示例</p>

<pre><code>&lt;%@ page contentType="text/html; charset=UTF-8"%&gt;
&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
 &lt;body&gt;
    &lt;c:forEach var="i" begin="1" end="10" step="1"&gt; ${i} &lt;br /&gt;&lt;/c:forEach&gt;
 &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>在该示例的JSP页面中声明了将使用Core标签库，它的URI为“http://java.sun.com/jsp/jstl/core”，前缀为“c”。之后，页面中&lt;c:forEach>标签就是使用了JSTL的标签进行了工作。对于该标签的功能，这里暂时不作具体讲解，只是让读者能够有个简单的概念，了解怎样定义和使用标签库。</p>

<h3>标签库</h3>

<p>Core标签库，又被称为核心标签库，该标签库的工作是对于JSP页面一般处理的封装。在该标签库中的标签一共有14个，被分为了四类，分别是：</p>

<ul>
<li>多用途核心标签：&lt;c:out>、&lt;c:set>、&lt;c:remove>、&lt;c:catch>。</li>
<li>条件控制标签：&lt;c:if>、&lt;c:choose>、&lt;c:when>、&lt;c:otherwise>。</li>
<li>循环控制标签：&lt;c:forEach>、&lt;c:forTokens>。</li>
<li>URL相关标签：&lt;c:import>、&lt;c:url>、&lt;c:redirect>、&lt;c:param>。</li>
</ul>


<p>以下是各个标签的用途和属性以及简单示例。</p>

<h3>用于显示的<code>&lt;c:out&gt;</code> 标签</h3>

<p><code>&lt;c:out&gt;</code>标签是一个最常用的标签，用于在JSP中显示数据。它的属性和描述如表9.3所示：</p>

<p>表9.3　<code>&lt;c:out&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" width="535" border="1">
                        <tbody>
                            <tr>
                                <td width="79">
                                <p align="left">属性</p>
                                </td>
                                <td width="456">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="79">
                                <p align="left">value</p>
                                </td>
                                <td width="456">
                                <p align="left">输出到页面的数据，可以是EL表达式或常量（必须）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="79">
                                <p align="left">default</p>
                                </td>
                                <td width="456">
                                <p align="left">当value为null时显示的数据（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="79">
                                <p align="left">escapeXml</p>
                                </td>
                                <td width="456">
                                <p align="left">当设置为true时会主动更换特殊字符，比如&ldquo;&amp;lt;,&amp;gt;,&amp;amp;&rdquo;（可选，默认为true）</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>在JSTL1.0的时候，在页面显示数据必须使用&lt;c:out>来进行。然而，在JSTL1.1中，由于JSP2.0规范已经默认支持了EL表达式，因此可以直接在JSP页面使用表达式。下面看一个示例。</p>

<pre><code>&lt;c:out value="${sessionScope.anyValue}" default="no value" escapeXml="false"/&gt;
</code></pre>

<p>该示例将从Session查找名为“anyValue”的参数，并显示在页面，若没有找到则显示“no value”。</p>

<h3><code>&lt;c: &gt;</code> 标签</h3>

<h4>用于赋值的&lt;c:set>标签</h4>

<p><code>&lt;c:set&gt;</code>标签用于为变量或JavaBean中的变量属性赋值的工作。它的属性和描述如表9.4所示：</p>

<p>表9.4　<code>&lt;c:set&gt;</code>标签属性和说明</p>

<table cellpadding="0" width="393" border="1">
                        <tbody>
                            <tr>
                                <td width="72">
                                <p align="left">属性</p>
                                </td>
                                <td width="311">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                <p align="left">value</p>
                                </td>
                                <td>
                                <p align="left">值的信息，可以是EL表达式或常量</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                <p align="left">target</p>
                                </td>
                                <td>
                                <p align="left">被赋值的JavaBean实例的名称，若存在该属性则必须<br />
                                存在property属性（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                <p align="left">property</p>
                                </td>
                                <td>
                                <p align="left">JavaBean实例的变量属性名称（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                <p align="left">var</p>
                                </td>
                                <td>
                                <p align="left">被赋值的变量名（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                <p align="left">scope</p>
                                </td>
                                <td>
                                <p align="left">变量的作用范围，若没有指定，默认为page（可选）</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p> 当不存在value的属性时，将以包含在标签内的实体数据作为赋值的内容。下面看一个示例：</p>

<pre><code>&lt;c:set value="this is andy" var="oneString"/&gt;
${oneString} &lt;br&gt;
</code></pre>

<p>该示例将为名为“oneString”的变量赋值为“this is andy”，其作用范围为page。</p>

<h4>9.3.3 用于删除的 <code>&lt;c:remove&gt;</code>标签</h4>

<p><code>&lt;c:remove&gt;</code>标签用于删除存在于scope中的变量。它的属性和描述如表9.5所示：</p>

<p>表9.5　<code>&lt;c:remove&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" width="365" border="1">
                        <tbody>
                            <tr>
                                <td width="53">
                                <p align="left">属性</p>
                                </td>
                                <td width="312">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="53">
                                <p align="left">var</p>
                                </td>
                                <td width="312">
                                <p align="left">需要被删除的变量名</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="53">
                                <p align="left">scope</p>
                                </td>
                                <td width="312">
                                <p align="left">变量的作用范围，若没有指定，默认为全部查找（可选）</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例：</p>

<pre><code>&lt;c:remove var="sampleValue" scope="session"/&gt;
${sessionScope.sampleValue} &lt;br&gt;
</code></pre>

<p>该示例将存在于Session中名为“sampleValue”的变量删除。下一句EL表达式显示该变量时，该变量已经不存在了。</p>

<h4>9.3.4 用于异常捕获的 <code>&lt;c:catch&gt;</code> 标签</h4>

<p><code>&lt;c:catch&gt;</code>标签允许在JSP页面中捕捉异常。它包含一个var属性，是一个描述异常的变量，改变量可选。若没有var属性的定义，那么仅仅捕捉异常而不做任何事情，若定义了var属性，则可以利用var所定义的异常变量进行判断转发到其他页面或提示报错信息。看一个示例。</p>

<pre><code>&lt;c:catch var="err"&gt; ${param.sampleSingleValue[9] == 3}&lt;/c:catch&gt;
${err}
</code></pre>

<p>当“${param.sampleSingleValue[9] == 3}”表达式有异常时，可以从var属性“err”得到异常的内容，通常判断“err”是否为null来决定错误信息的提示。</p>

<h4>9.3.5 用于判断的 <code>&lt;c:if&gt;</code> 标签</h4>

<p><code>&lt;c:if&gt;</code>标签用于简单的条件语句。它的属性和描述如表9.6所示：</p>

<p>表9.6　<code>&lt;c:if&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" width="454" border="1">
                        <tbody>
                            <tr>
                                <td width="60">
                                <p align="left">属性</p>
                                </td>
                                <td width="394">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="60">
                                <p align="left">test</p>
                                </td>
                                <td width="394">
                                <p align="left">需要判断的条件</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="60">
                                <p align="left">var</p>
                                </td>
                                <td width="394">
                                <p align="left">保存判断结果true或false的变量名，该变量可供之后的工作使用（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="60">
                                <p align="left">scope</p>
                                </td>
                                <td width="394">
                                <p align="left">变量的作用范围，若没有指定，默认为保存于page范围中的变量（可选）</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例：</p>

<pre><code>&lt;c:if test="${paramValues.sampleValue[2] == 12}" var="visits"&gt;It is 12&lt;/c:if&gt;&lt;br&gt;
${visits} &lt;br&gt;
</code></pre>

<p>该示例将判断request请求提交的传入控件数组参数中，下标为“2”的控件内容是否为“12”，若为12则显示“It is 12”。判断结果被保存在page范围中的“visits”变量中。</p>

<h4>9.3.6 用于复杂判断的 <code>&lt;c:choose&gt; 、 &lt;c:when&gt; 、 &lt;c:otherwise&gt;</code> 标签</h4>

<p>这三个标签用于实现复杂条件判断语句，类似“if,elseif”的条件语句。</p>

<p><code>&lt;c:choose&gt;</code>标签没有属性，可以被认为是父标签，<code>&lt;c:when&gt;、&lt;c:otherwise&gt;</code>将作为其子标签来使用。
<code>&lt;c:when&gt;</code>标签等价于“if”语句，它包含一个test属性，该属性表示需要判断的条件。
<code>&lt;c:otherwise&gt;</code>标签没有属性，它等价于“else”语句。</p>

<p>下面看一个复杂条件语句的示例。</p>

<pre><code>&lt;c:choose&gt;
         &lt;c:when test="${paramValues.sampleValue[2] == 11}"&gt;
                   not 12 not 13,it is 11
         &lt;/c:when&gt;
         &lt;c:when test="${paramValues.sampleValue[2] == 12}"&gt;
                   not 11 not 13,it is 12
         &lt;/c:when&gt;
         &lt;c:when test="${paramValues.sampleValue[2] == 13}"&gt;
                   not 11 not 12,it is 13
         &lt;/c:when&gt;
         &lt;c:otherwise&gt;
                   not 11 、12、13
         &lt;/c:otherwise&gt;
&lt;/c:choose&gt;
</code></pre>

<p>该示例将判断request请求提交的传入控件数组参数中，下标为“2”控件内容是否为“11”或“12”或“13”，并根据判断结果显示各自的语句，若都不是则显示“not 11 、12、13”。</p>

<h4>9.3.7 用于循环的 <code>&lt;c:forEach&gt;</code> 标签</h4>

<p><code>&lt;c:forEach&gt;</code>为循环控制标签。它的属性和描述如表9.7所示：</p>

<p>表9.7　<code>&lt;c:forEach&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" width="511" border="1">
                        <tbody>
                            <tr>
                                <td width="59">
                                <p align="left">属性</p>
                                </td>
                                <td width="452">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="59">
                                <p align="left">items</p>
                                </td>
                                <td width="452">
                                <p align="left">进行循环的集合（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="59">
                                <p align="left">begin</p>
                                </td>
                                <td width="452">
                                <p align="left">开始条件（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="59">
                                <p align="left">end</p>
                                </td>
                                <td width="452">
                                <p align="left">结束条件（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="59">
                                <p align="left">step</p>
                                </td>
                                <td width="452">
                                <p align="left">循环的步长，默认为1（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="59">
                                <p align="left">var</p>
                                </td>
                                <td width="452">
                                <p align="left">做循环的对象变量名，若存在items属性，则表示循环集合中对象的变量名（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="59">
                                <p align="left">varStatus</p>
                                </td>
                                <td width="452">
                                <p align="left">显示循环状态的变量（可选）</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个集合循环的示例。</p>

<p>&lt;%ArrayList arrayList = new ArrayList();</p>

<pre><code>               arrayList.add("aa");
               arrayList.add("bb");
               arrayList.add("cc");
</code></pre>

<p>%>
&lt;%request.getSession().setAttribute("arrayList", arrayList);%>
&lt;c:forEach items="${sessionScope.arrayList}" var="arrayListI"></p>

<pre><code>     ${arrayListI}
</code></pre>

<p>&lt;/c:forEach></p>

<p>该示例将保存在Session中的名为“arrayList”的ArrayList类型集合参数中的对象依次读取出来，items属性指向了ArrayList类型集合参数，var属性定义了一个新的变量来接收集合中的对象。最后直接通过EL表达式显示在页面上。下面看一个简单循环的示例。</p>

<pre><code>&lt;c:forEach var="i" begin="1" end="10" step="1"&gt;
      ${i}&lt;br /&gt;
&lt;/c:forEach&gt;
</code></pre>

<p>该示例从“1”循环到“10”，并将循环中变量“i”显示在页面上。</p>

<h4>9.3.8 用于分隔字符的 <code>&lt;c:forTokens&gt;</code> 标签</h4>

<p><code>&lt;c:forTokens&gt;</code>标签可以根据某个分隔符分隔指定字符串，相当于java.util.StringTokenizer类。它的属性和描述如表9.8所示：</p>

<p>表9.8　<code>&lt;c:forTokens&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" width="268" border="1">
                        <tbody>
                            <tr>
                                <td width="76">
                                <p align="left">属性</p>
                                </td>
                                <td width="192">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="76">
                                <p align="left">items</p>
                                </td>
                                <td width="192">
                                <p align="left">进行分隔的EL表达式或常量</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="76">
                                <p align="left">delims</p>
                                </td>
                                <td width="192">
                                <p align="left">分隔符</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="76">
                                <p align="left">begin</p>
                                </td>
                                <td width="192">
                                <p align="left">开始条件（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="76">
                                <p align="left">end</p>
                                </td>
                                <td width="192">
                                <p align="left">结束条件（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="76">
                                <p align="left">step</p>
                                </td>
                                <td width="192">
                                <p align="left">循环的步长，默认为1（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="76">
                                <p align="left">var</p>
                                </td>
                                <td width="192">
                                <p align="left">做循环的对象变量名（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="76">
                                <p align="left">varStatus</p>
                                </td>
                                <td width="192">
                                <p align="left">显示循环状态的变量（可选）</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例。</p>

<pre><code>&lt;c:forTokens items="aa,bb,cc,dd" begin="0" end="2" step="2" delims="," var="aValue"&gt;
         ${aValue}
&lt;/c:forTokens&gt;
</code></pre>

<p>需要分隔的字符串为“aa,bb,cc,dd”，分隔符为“,”。begin属性指定从第一个“,”开始分隔，end属性指定分隔到第三个“,”，并将做循环的变量名指定为“aValue”。由于步长为“2”，使用EL表达式${aValue}只能显示“aa</p>

<h3><code>&lt;x: &gt;</code> 标签</h3>

<h4>9.3.9 用于包含页面的<code>&lt;c:import&gt;</code></h4>

<p><code>&lt;c:import&gt;</code>标签允许包含另一个JSP页面到本页面来。它的属性和描述如表9.9所示：</p>

<p>表9.9　<code>&lt;c:import&gt;</code>标签属性和说明</p>

<table cellpadding="0" width="360" border="1">
                        <tbody>
                            <tr>
                                <td width="73">
                                <p align="left">属性</p>
                                </td>
                                <td width="271">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                <p align="left">rl</p>
                                </td>
                                <td>
                                <p align="left">需要导入页面的URL</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                <p align="left">context</p>
                                </td>
                                <td>
                                <p align="left">Web Context该属性用于在不同的Context下导入页面，当出现context属性时，必须以&ldquo;/&rdquo;开头，此时也需要url属性以&ldquo;/&rdquo;开头（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                <p align="left">charEncoding</p>
                                </td>
                                <td>
                                <p align="left">导入页面的字符集（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                <p align="left">var</p>
                                </td>
                                <td>
                                <p align="left">可以定义导入文本的变量名（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                <p align="left">scope</p>
                                </td>
                                <td>
                                <p align="left">导入文本的变量名作用范围（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                <p align="left">varReader</p>
                                </td>
                                <td>
                                <p align="left">接受文本的java.io.Reader类变量名（可选）</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p> 下面看一个示例。</p>

<pre><code>&lt;c:import url="/MyHtml.html" var="thisPage" /&gt;
&lt;c:import url="/MyHtml.html" context=”/sample2” var="thisPage"/&gt;
&lt;c:import url="www.sample.com/MyHtml.html" var="thisPage"/&gt;
</code></pre>

<p>该示例演示了三种不同的导入方法，第一种是在同一 Context 下的导入，第二种是在不同的 Context 下导入，第三种是导入任意一个 URL 。</p>

<h4>9.3.10 用于得到URL地址的<code>&lt;c:url&gt;</code>标签</h4>

<p><code>&lt;c:url&gt;</code> 标签用于得到一个 URL 地址。它的属性和描述如表 9.10 所示：</p>

<p>表9.10 <code>&lt;c:url&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" width="459" border="1">
                        <tbody>
                            <tr>
                                <td width="81">
                                <p align="left">属性</p>
                                </td>
                                <td width="378">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="81">
                                <p align="left">value</p>
                                </td>
                                <td width="378">
                                <p align="left">页面的URL地址</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="81">
                                <p align="left">context</p>
                                </td>
                                <td width="378">
                                <p align="left">Web Context该属性用于得到不同Context下的URL地址，当出现context属性时，必须以&ldquo;/&rdquo;开头，此时也需要url属性以&ldquo;/&rdquo;开头（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="81">
                                <p align="left">charEncoding</p>
                                </td>
                                <td width="378">
                                <p align="left">URL的字符集（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="81">
                                <p align="left">var</p>
                                </td>
                                <td width="378">
                                <p align="left">存储URL的变量名（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="81">
                                <p align="left">scope</p>
                                </td>
                                <td width="378">
                                <p align="left">变量名作用范围（可选）</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例：</p>

<pre><code>&lt;c:url value="/MyHtml.html" var="urlPage" /&gt;
&lt;a href="${urlPage}"&gt;link&lt;/a&gt;
</code></pre>

<p>得到了一个 URL 后，以 EL 表达式放入<code>&lt;a&gt;</code> 标签的 href 属性，达到链接的目的。</p>

<h4>9.3.11 用于页面重定向的<code>&lt;c:redirect&gt;</code>标签</h4>

<p><code>&lt;c:redirect&gt;</code> 用于页面的重定向，该标签的作用相当于 <code>response.setRedirect</code> 方法的工作。它包含 url 和 context 两个属性，属性含义和 <code>&lt;c:url&gt;</code> 标签相同。下面看一个示例。</p>

<pre><code>&lt;c:redirect url="/MyHtml.html"/&gt;
</code></pre>

<p>该示例若出现在 JSP 中，则将重定向到当前 Web Context 下的“ MyHtml.html ”页面，一般会与 <code>&lt;c:if&gt;</code> 等标签一起使用。</p>

<h4>9.3.12 用于包含传递参数的<code>&lt;c:param&gt;</code>标签</h4>

<p> <code>&lt;c:param&gt;</code> 用来为包含或重定向的页面传递参数。它的属性和描述如表 9.11 所示：</p>

<p>表9.11　<code>&lt;c:param&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" width="190" border="1">
                        <tbody>
                            <tr>
                                <td width="58">
                                <p align="left">属性</p>
                                </td>
                                <td width="132">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="58">
                                <p align="left">name</p>
                                </td>
                                <td width="132">
                                <p align="left">传递的参数名</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="58">
                                <p align="left">value</p>
                                </td>
                                <td width="132">
                                <p align="left">传递的参数值（可选）</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面是一个示例：</p>

<pre><code>&lt;c:redirect url="/MyHtml.jsp"&gt;
&lt;c:param name="userName" value=”RW” /&gt;
&lt;/c:redirect&gt;
</code></pre>

<p>该示例将为重定向的“ MyHtml.jsp ”传递指定参数“ userName=’RW’ ”。</p>

<h3>9.4 JSTL XML processing标签库</h3>

<p>在企业级应用越来越依赖 XML 的今天， XML 格式的数据被作为信息交换的优先选择。 XML processing 标签库为程序设计者提供了基本的对 XML 格式文件的操作。在该标签库中的标签一共有 10 个，被分为了三类，分别是：</p>

<ul>
<li>XML核心标签：<code>&lt;x:parse&gt;、&lt;x:out&gt;、&lt;x:set&gt;</code>。</li>
<li>XML流控制标签：<code>&lt;x:if&gt;、&lt;x:choose&gt;、&lt;x:when&gt;、&lt;x:otherwise&gt;、&lt;x:forEach&gt;</code>。</li>
<li>XML转换标签：<code>&lt;x:transform&gt;、&lt;x:param&gt;</code>。</li>
</ul>


<p>由于该组标签库专注于对某一特定领域的实现，因此本书将只选择其中常见的一些标签和属性进行介绍。</p>

<h4>9.4.1 用于解析XML文件的<code>&lt;x:parse&gt;</code>标签</h4>

<p><code>&lt;x:parse&gt;</code> 标签是该组标签库的核心，从其标签名就可以知道，它是作为解析 XML 文件而存在的。它的属性和描述如表 9.12 所示：</p>

<p>表9.12　<code>&lt;x:parse&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" width="537" border="1">
                        <tbody>
                            <tr>
                                <td width="67">
                                <p align="left">属性</p>
                                </td>
                                <td width="470">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="67">
                                <p align="left">doc</p>
                                </td>
                                <td width="470">
                                <p align="left">源XML的内容，该属性的内容应该为String类型或者java.io.Reader的实例，可以用xml属性来替代，但是不被推荐</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="67">
                                <p align="left">var</p>
                                </td>
                                <td width="470">
                                <p align="left">将解析后的XML保存在该属性所指定的变量中，之后XML processing标签库中的其他标签若要取XML中的内容就可以从该变量中得到（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="67">
                                <p align="left">scope</p>
                                </td>
                                <td width="470">
                                <p align="left">变量的作用范围（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="67">
                                <p align="left">varDom</p>
                                </td>
                                <td width="470">
                                <p align="left">指定保存的变量为org.w3c.dom.Document接口类型（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="67">
                                <p align="left">scopeDom</p>
                                </td>
                                <td width="470">
                                <p align="left">org.w3c.dom.Document的接口类型变量作用范围（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="67">
                                <p align="left">systemId</p>
                                </td>
                                <td width="470">
                                <p align="left">定义一个URI，该URI将被使用到XML文件中以接入其他资源文件（可选）</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="67">
                                <p align="left">filter</p>
                                </td>
                                <td width="470">
                                <p align="left">该属性必须为org.xml.sax.XMLFilter类的一个实例，可以使用EL表达式传入，将对XML文件做过滤得到自身需要的部分（可选）</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>其中， var 、 scope 和 varDom 、 scopeDom 不应该同时出现，而应该被视为两个版本来使用，二者的变量都可以被 XML processing 标签库的其他标签来使用。</p>

<p><code>&lt;x:parse&gt;</code>标签单独使用的情况很少，一般会结合 XML processing 标签库中的其他标签来一起工作。下面看一个示例。</p>

<p>首先给出一个简单的 XML 文件，将对该 XML 文件做解析，该 XML 文件名为 SampleXml.xml 。</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xml-body&gt;
         &lt;name&gt;RW&lt;/name&gt;
         &lt;passWord&gt;123456&lt;/passWord&gt;
         &lt;age&gt;28&lt;/age&gt;
         &lt;books&gt;
                   &lt;book&gt;book1&lt;/book&gt;
                   &lt;book&gt;book2&lt;/book&gt;
                   &lt;book&gt;book3&lt;/book&gt;
         &lt;/books&gt;
&lt;/xml-body&gt;
</code></pre>

<p>标签库的工作：</p>

<pre><code>&lt;c:import var="xmlFile" url="http://localhost:8080/booksamplejstl/SampleXml.xml"/&gt;
&lt;x:parse var="xmlFileValue" doc="${xmlFile}"/&gt;
</code></pre>

<h3><code>&lt;fmt: &gt;</code> 标签</h3>

<p>看到I18N就应该想到知识“国际化”，I18N formatting标签库就是用于在JSP页面中做国际化的动作。在该标签库中的标签一共有12个，被分为了两类，分别是：</p>

<ul>
<li>国际化核心标签：<code>&lt;fmt:setLocale&gt;、&lt;fmt:bundle&gt;、&lt;fmt:setBundle&gt;、&lt;fmt:message&gt;、&lt;fmt:param&gt;、&lt;fmt:requestEncoding&gt;</code>。</li>
<li>格式化标签：<code>&lt;fmt:timeZone&gt;、&lt;fmt:setTimeZone&gt;、&lt;fmt:formatNumber&gt;、&lt;fmt:parseNumber&gt;、&lt;fmt:formatDate&gt;、&lt;fmt:parseDate&gt;</code>。</li>
</ul>


<p>下面只选择其中常见的一些标签和属性进行介绍。</p>

<h4>9.5.1 用于设置本地化环境的<code>&lt;fmt:setLocale&gt;</code>标签</h4>

<pre><code>`&lt;fmt:setLocale&gt;`标签用于设置Locale环境。它的属性和描述如表9.17所示：
</code></pre>

<p>表9.17　<code>&lt;fmt:setLocale&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" border="1">
                        <tbody>
                            <tr>
                                <td width="49">
                                <p align="left">属性</p>
                                </td>
                                <td width="336">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="49">
                                <p align="left">value</p>
                                </td>
                                <td width="336">
                                <p align="left">Locale环境的指定，可以是java.util.Locale或String类型的实例</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="49">
                                <p align="left">scope</p>
                                </td>
                                <td width="336">
                                <p align="left">Locale环境变量的作用范围（可选）</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例：</p>

<pre><code>&lt;fmt:setLocale value="zh_TW"/&gt;
</code></pre>

<p>表示设置本地环境为繁体中文。</p>

<h4>9.5.2 用于资源文件绑定的<code>&lt;fmt:bundle&gt;、&lt;fmt:setBundle&gt;</code>标签</h4>

<p>这两组标签用于资源配置文件的绑定，唯一不同的是<code>&lt;fmt:bundle&gt;</code>标签将资源配置文件绑定于它标签体中的显示，<code>&lt;fmt:setBundle&gt;</code>标签则允许将资源配置文件保存为一个变量，在之后的工作可以根据该变量来进行。</p>

<p>根据Locale环境的不同将查找不同后缀的资源配置文件，这点在国际化的任何技术上都是一致的，通常来说，这两种标签单独使用是没有意义的，它们都会与I18N formatting标签库中的其他标签配合使用。它们的属性和描述如表9.18所示：</p>

<p>表9.18　<code>&lt;fmt:bundle&gt;、&lt;fmt:setBundle&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" border="1">
                        <tbody>
                            <tr>
                                <td width="69">
                                <p align="left">属性</p>
                                </td>
                                <td width="421">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="69">
                                <p align="left">basename</p>
                                </td>
                                <td width="421">
                                <p align="left">资源配置文件的指定，只需要指定文件名而无须扩展名，二组标签共有的属性</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="69">
                                <p align="left">var</p>
                                </td>
                                <td width="421">
                                <p align="left">&lt;fmt:setBundle&gt;独有的属性，用于保存资源配置文件为一个变量</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="69">
                                <p align="left">scope</p>
                                </td>
                                <td width="421">
                                <p align="left">变量的作用范围</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例</p>

<pre><code>&lt;fmt:setLocale value="zh_CN"/&gt;
&lt;fmt:setBundle basename="applicationMessage" var="applicationBundle"/&gt;
</code></pre>

<p>该示例将会查找一个名为applicationMessage_zh_CN.properties的资源配置文件，来作为显示的Resource绑定。</p>

<h4>9.5.3  用于显示资源配置文件信息的<code>&lt;fmt:message&gt;</code>标签</h4>

<p>用于信息显示的标签，将显示资源配置文件中定义的信息。它的属性和描述如表9.19所示：</p>

<p>表9.19　<code>&lt;fmt:message&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" border="1">
                        <tbody>
                            <tr>
                                <td width="55">
                                <p align="left">属性</p>
                                </td>
                                <td width="513">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="55">
                                <p align="left">key</p>
                                </td>
                                <td width="513">
                                <p align="left">资源配置文件的&ldquo;键&rdquo;指定</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="55">
                                <p align="left">bundle</p>
                                </td>
                                <td width="513">
                                <p align="left">若使用&lt;fmt:setBundle&gt;保存了资源配置文件，该属性就可以从保存的资源配置文件中进行查找</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="55">
                                <p align="left">var</p>
                                </td>
                                <td width="513">
                                <p align="left">将显示信息保存为一个变量</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="55">
                                <p align="left">scope</p>
                                </td>
                                <td width="513">
                                <p align="left">变量的作用范围</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例：</p>

<pre><code>&lt;fmt:setBundle basename="applicationMessage" var="applicationBundle"/&gt;
&lt;fmt:bundle basename="applicationAllMessage"&gt;
         &lt;fmt:message key="userName" /&gt;
         &lt;p&gt;
         &lt;fmt:message key="passWord" bundle="${applicationBundle}" /&gt;
&lt;/fmt:bundle&gt;
</code></pre>

<p>该示例使用了两种资源配置文件的绑定的做法，“ applicationMessage ”资源配置文件利用<code>&lt;fmt:setBundle&gt;</code>标签被赋于了变量“ applicationBundle ”，而作为<code>&lt;fmt:bundle&gt;</code>标签定义的“ applicationAllMessage ”资源配置文件作用于其标签体内的显示。</p>

<p>第一个<code>&lt;fmt:message&gt;</code>标签将使用“ applicationAllMessage ”资源配置文件中“键”为“ userName ”的信息显示。
第二个<code>&lt;fmt:message&gt;</code>标签虽然被定义在<code>&lt;fmt:bundle&gt;</code>标签体内，但是它使用了bundle属性，因此将指定之前由<code>&lt;fmt:setBundle&gt;</code>标签保存的“ applicationMessage ”资源配置文件，该“键”为“ passWord ”的信息显示。</p>

<h4>9.5.4  用于参数传递的<code>&lt;fmt:param&gt;</code>标签</h4>

<p><code>&lt;fmt:param&gt;</code>标签应该位于<code>&lt;fmt:message&gt;</code>标签内，将为该消息标签提供参数值。它只有一个属性value。
<code>&lt;fmt:param&gt;</code>标签有两种使用版本，一种是直接将参数值写在value属性中，另一种是将参数值写在标签体内。</p>

<h4>9.5.6  用于为请求设置字符编码的<code>&lt;fmt:requestEncoding&gt;</code>标签</h4>

<p><code>&lt;fmt:requestEncoding&gt;</code>标签用于为请求设置字符编码。它只有一个属性value，在该属性中可以定义字符编码。</p>

<h4>9.5.7  用于设定时区的<code>&lt;fmt:timeZone&gt;、&lt;fmt:setTimeZone&gt;</code>标签</h4>

<p>这两组标签都用于设定一个时区。唯一不同的是<code>&lt;fmt:timeZone&gt;</code>标签将使得在其标签体内的工作可以使用该时区设置，<code>&lt;fmt:setBundle&gt;</code>标签则允许将时区设置保存为一个变量，在之后的工作可以根据该变量来进行。它们的属性和描述如表9.20所示：</p>

<p>表9.20　<code>&lt;fmt:timeZone&gt;、&lt;fmt:setTimeZone&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" border="1">
                        <tbody>
                            <tr>
                                <td width="53">
                                <p align="left">属性</p>
                                </td>
                                <td width="312">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="53">
                                <p align="left">value</p>
                                </td>
                                <td width="312">
                                <p align="left">时区的设置</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="53">
                                <p align="left">var</p>
                                </td>
                                <td width="312">
                                <p align="left">&lt;fmt:setTimeZone&gt;独有的属性，用于保存时区为一个变量</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="53">
                                <p align="left">scope</p>
                                </td>
                                <td width="312">
                                <p align="left">变量的作用范围</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<h4>9.5.8  用于格式化数字的<code>&lt;fmt:formatNumber&gt;</code>标签</h4>

<p><code>&lt;fmt: formatNumber &gt;</code> 标签用于格式化数字。它的属性和描述如表9.21所示：</p>

<p>表9.21　<code>&lt;fmt:formatNumber&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" border="1">
                        <tbody>
                            <tr>
                                <td width="104">
                                <p align="left">属性</p>
                                </td>
                                <td width="384">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="104">
                                <p align="left">value</p>
                                </td>
                                <td width="384">
                                <p align="left">格式化的数字，该数值可以是String类型或java.lang.Number类型的实例</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="104">
                                <p align="left">type</p>
                                </td>
                                <td width="384">
                                <p align="left">格式化的类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="104">
                                <p align="left">pattern</p>
                                </td>
                                <td width="384">
                                <p align="left">格式化模式</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="104">
                                <p align="left">var</p>
                                </td>
                                <td width="384">
                                <p align="left">结果保存变量</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="104">
                                <p align="left">scope</p>
                                </td>
                                <td width="384">
                                <p align="left">变量的作用范围</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="104">
                                <p align="left">maxIntegerDigits</p>
                                </td>
                                <td width="384">
                                <p align="left">指定格式化结果的最大值</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="104">
                                <p align="left">minIntegerDigits</p>
                                </td>
                                <td width="384">
                                <p align="left">指定格式化结果的最小值</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="104">
                                <p align="left">maxFractionDigits</p>
                                </td>
                                <td width="384">
                                <p align="left">指定格式化结果的最大值，带小数</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="104">
                                <p align="left">minFractionDigits</p>
                                </td>
                                <td width="384">
                                <p align="left">指定格式化结果的最小值，带小数</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p><code>&lt;fmt:formatNumber&gt;</code>标签实际是对应java.util.NumberFormat类，type属性的可能值包括currency（货币）、number（数字）和percent（百分比）。</p>

<p>下面看一个示例。</p>

<pre><code>&lt;fmt:formatNumber value="1000.888" type="currency" var="money"/&gt;
</code></pre>

<p>该结果将被保存在“ money ”变量中，将根据Locale环境显示当地的货币格式。</p>

<h4>9.5.9  用于解析数字的<code>&lt;fmt:parseNumber&gt;</code>标签</h4>

<p><code>&lt;fmt:parseNumber&gt;</code>标签用于解析一个数字，并将结果作为java.lang.Number类的实例返回。<code>&lt;fmt:parseNumber&gt;</code>标签看起来和<code>&lt;fmt:formatNumber&gt;</code>标签的作用正好相反。它的属性和描述如表9.22所示：</p>

<p>表9.22　<code>&lt;fmt:parseNumber&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" border="1">
                        <tbody>
                            <tr>
                                <td width="72">
                                <p align="left">属性</p>
                                </td>
                                <td width="463">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">value</p>
                                </td>
                                <td width="463">
                                <p align="left">将被解析的字符串</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">type</p>
                                </td>
                                <td width="463">
                                <p align="left">解析格式化的类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">pattern</p>
                                </td>
                                <td width="463">
                                <p align="left">解析格式化模式</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">var</p>
                                </td>
                                <td width="463">
                                <p align="left">结果保存变量，类型为java.lang.Number</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">scope</p>
                                </td>
                                <td width="463">
                                <p align="left">变量的作用范围</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">parseLocale</p>
                                </td>
                                <td width="463">
                                <p align="left">以本地化的形式来解析字符串，该属性的内容应为String或java.util.Locale类型的实例</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例。</p>

<pre><code>&lt;fmt:parseNumber value="15%" type="percent" var="num"/&gt;
</code></pre>

<p>解析之后的结果为“ 0.15 ”。</p>

<h4>9.5.10  用于格式化日期的<code>&lt;fmt:formatDate&gt;</code>标签</h4>

<p><code>&lt;fmt:formatDate&gt;</code>标签用于格式化日期。它的属性和描述如表9.23所示：</p>

<p>表9.23　<code>&lt;fmt:formatDate&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" border="1">
                        <tbody>
                            <tr>
                                <td width="105">
                                <p align="left">属性</p>
                                </td>
                                <td width="343">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="105">
                                <p align="left">value</p>
                                </td>
                                <td width="343">
                                <p align="left">格式化的日期，该属性的内容应该是java.util.Date类型的实例</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="105">
                                <p align="left">type</p>
                                </td>
                                <td width="343">
                                <p align="left">格式化的类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="105">
                                <p align="left">pattern</p>
                                </td>
                                <td width="343">
                                <p align="left">格式化模式</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="105">
                                <p align="left">var</p>
                                </td>
                                <td width="343">
                                <p align="left">结果保存变量</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="105">
                                <p align="left">scope</p>
                                </td>
                                <td width="343">
                                <p align="left">变量的作用范围</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="105">
                                <p align="left">timeZone</p>
                                </td>
                                <td width="343">
                                <p align="left">指定格式化日期的时区</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p><code>&lt;fmt:formatDate&gt;</code>标签与<code>&lt;fmt:timeZone&gt;、&lt;fmt:setTimeZone&gt;</code>两组标签的关系密切。若没有指定 timeZone属性，也可以通过<code>&lt;fmt:timeZone&gt;、&lt;fmt:setTimeZone&gt;</code>两组标签设定的时区来格式化最后的结果。</p>

<h4>9.5.11  用于解析日期的<code>&lt;fmt:parseDate&gt;</code>标签</h4>

<p><code>&lt;fmt:parseDate&gt;</code>标签用于解析一个日期，并将结果作为java.lang.Date类型的实例返回。<code>&lt;fmt:parseDate&gt;</code>标签看起来和<code>&lt;fmt:formatDate&gt;</code>标签的作用正好相反。它的属性和描述如表9.24所示：</p>

<p>表9.24　<code>&lt;fmt:parseDate&gt;</code>标签属性和说明</p>

<table cellspacing="0" cellpadding="0" border="1">
                        <tbody>
                            <tr>
                                <td width="72">
                                <p align="left">属性</p>
                                </td>
                                <td width="451">
                                <p align="left">描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">value</p>
                                </td>
                                <td width="451">
                                <p align="left">将被解析的字符串</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">type</p>
                                </td>
                                <td width="451">
                                <p align="left">解析格式化的类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">pattern</p>
                                </td>
                                <td width="451">
                                <p align="left">解析格式化模式</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">var</p>
                                </td>
                                <td width="451">
                                <p align="left">结果保存变量，类型为java.lang.Date</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">scope</p>
                                </td>
                                <td width="451">
                                <p align="left">变量的作用范围</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">parseLocale</p>
                                </td>
                                <td width="451">
                                <p align="left">以本地化的形式来解析字符串，该属性的内容为String或java.util.Locale类型的实例</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="72">
                                <p align="left">timeZone</p>
                                </td>
                                <td width="451">
                                <p align="left">指定解析格式化日期的时区</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p><code>&lt;fmt:parseNumber&gt;</code>和<code>&lt;fmt:parseDate&gt;</code>两组标签都实现解析字符串为一个具体对象实例的工作，因此，这两组解析标签对var属性的字符串参数要求非常严格。就JSP页面的表示层前段来说，处理这种解析本不属于份内之事，因此<code>&lt;fmt:parseNumber&gt;</code>和<code>&lt;fmt:parseDate&gt;</code>两组标签应该尽量少用，替代工作的地方应该在服务器端表示层的后段，比如在Servlet中。</p>

<p> <code>&lt;sql:&gt;</code>标签</p>

<h3>9.6  Database access 标签库</h3>

<p>Database access标签库中的标签用来提供在JSP页面中可以与数据库进行交互的功能，虽然它的存在对于早期纯JSP开发的应用以及小型的开发有着意义重大的贡献，但是对于MVC模型来说，它却是违反规范的。因为与数据库交互的工作本身就属于业务逻辑层的工作，所以不应该在JSP页面中出现，而是应该在模型层中进行。</p>

<p>对于Database access标签库本书不作重点介绍，只给出几个简单示例让读者略微了解它们的功能。</p>

<p>Database access标签库有以下6组标签来进行工作：<code>&lt;sql:setDataSource&gt;、&lt;sql:query&gt;、&lt;sql:update&gt;、&lt;sql:transaction&gt;、&lt;sql:setDataSource&gt;、&lt;sql:param&gt;、&lt;sql:dateParam&gt;</code>。</p>

<h4>9.6.1 用于设置数据源的 <code>&lt;sql:setDataSource&gt;</code> 标签</h4>

<p><code>&lt;sql:setDataSource&gt;</code>标签用于设置数据源，下面看一个示例：</p>

<pre><code>&lt;sql:setDataSource
         var="dataSrc"
         url="jdbc:postgresql://localhost:5432/myDB"
         driver="org.postgresql.Driver"
         user="admin"
         password="1111"/&gt;
</code></pre>

<p>该示例定义一个数据源并保存在“ dataSrc ”变量内。</p>

<h4>9.6.2 用于查询的 <code>&lt;sql:query&gt;</code>标签</h4>

<p><code>&lt;sql:query&gt;</code>标签用于查询数据库，它标签体内可以是一句查询SQL。下面看一个示例：</p>

<pre><code>&lt;sql:query var="queryResults" dataSource="${dataSrc}"&gt;
      select * from table1
&lt;/sql:query&gt;
</code></pre>

<p>该示例将返回查询的结果到变量“ queryResults ”中，保存的结果是javax.servlet.jsp.jstl.sql.Result类型的实例。要取得结果集中的数据可以使用<code>&lt;c:forEach&gt;</code>循环来进行。下面看一个示例。</p>

<pre><code>&lt;c:forEach var="row" items="${queryResults.rows}"&gt;
      &lt;tr&gt;
               &lt;td&gt;${row.userName}&lt;/td&gt;
                &lt;td&gt;${row.passWord}&lt;/td&gt;
      &lt;/tr&gt;
&lt;/c:forEach&gt;
</code></pre>

<p>“ rows ”是javax.servlet.jsp.jstl.sql.Result实例的变量属性之一，用来表示数据库表中的“列”集合，循环时，通过“ ${row.XXX} ”表达式可以取得每一列的数据，“ XXX ”是表中的列名。</p>

<h4>9.6.3 用于更新的 <code>&lt;sql:update&gt;</code> 标签</h4>

<p><code>&lt;sql:update&gt;</code>标签用于更新数据库，它的标签体内可以是一句更新的SQL语句。其使用和<code>&lt;sql:query&gt;</code>标签没有什么不同。</p>

<h4>9.6.4 用于事务处理的<code>&lt;sql:transaction&gt;</code>标签</h4>

<p><code>&lt;sql:transaction&gt;</code>标签用于数据库的事务处理，在该标签体内可以使用<code>&lt;sql:update&gt;</code>标签和<code>&lt;sql:query&gt;</code>标签，而<code>&lt;sql:transaction&gt;</code>标签的事务管理将作用于它们之上。
<code>&lt;sql:transaction&gt;</code>标签对于事务处理定义了read_committed、read_uncommitted、repeatable_read、serializable4个隔离级别。</p>

<h4>9.6.5 用于事务处理的<code>&lt;sql:param&gt; 、 &lt;sql:dateParam&gt;</code> 标签</h4>

<p>这两个标签用于向SQL语句提供参数，就好像程序中预处理SQL的“ ? ”一样。<code>&lt;sql:param&gt;</code>标签传递除java.util.Date类型以外的所有相融参数，<code>&lt;sql:dateParam&gt;</code>标签则指定必须传递java.util.Date类型的参数。</p>

<h3><code>&lt;fn:&gt;</code> 标签</h3>

<h3>9.7 Functions 标签库</h3>

<pre><code>   称呼Functions标签库为标签库，倒不如称呼其为函数库来得更容易理解些。因为Functions标签库并没有提供传统的标签来为JSP页面的工作服务，而是被用于EL表达式语句中。在JSP2.0规范下出现的Functions标签库为EL表达式语句提供了许多更为有用的功能。Functions标签库分为两大类，共16个函数。

   长度函数：fn:length
   字符串处理函数：fn:contains、fn:containsIgnoreCase、fn:endsWith、fn:escapeXml、fn:indexOf、fn:join、fn:replace、fn:split、fn:startsWith、fn:substring、fn:substringAfter、fn:substringBefore、fn:toLowerCase、fn:toUpperCase、fn:trim
</code></pre>

<p>以下是各个函数的用途和属性以及简单示例。</p>

<h4>9.7.1 长度函数 fn:length 函数</h4>

<pre><code>   长度函数fn:length的出现有重要的意义。在JSTL1.0中，有一个功能被忽略了，那就是对集合的长度取值。虽然java.util.Collection接口定义了size方法，但是该方法不是一个标准的JavaBean属性方法（没有get,set方法），因此，无法通过EL表达式“ ${collection.size} ”来轻松取得。
</code></pre>

<p>fn:length函数正是为了解决这个问题而被设计出来的。它的参数为input，将计算通过该属性传入的对象长度。该对象应该为集合类型或String类型。其返回结果是一个int类型的值。下面看一个示例。</p>

<pre><code>&lt;%ArrayList arrayList1 = new ArrayList();
                            arrayList1.add("aa");
                            arrayList1.add("bb");
                            arrayList1.add("cc");

%&gt;
&lt;%request.getSession().setAttribute("arrayList1", arrayList1);%&gt;
${fn:length(sessionScope.arrayList1)}
</code></pre>

<p>假设一个ArrayList类型的实例“ arrayList1 ”，并为其添加三个字符串对象，使用fn:length函数后就可以取得返回结果为“ 3 ”。</p>

<h4>9.7.2 判断函数 fn:contains 函数</h4>

<pre><code>   fn:contains函数用来判断源字符串是否包含子字符串。它包括string和substring两个参数，它们都是String类型，分布表示源字符串和子字符串。其返回结果为一个boolean类型的值。下面看一个示例。

${fn:contains("ABC", "a")}&lt;br&gt;
${fn:contains("ABC", "A")}&lt;br&gt;
</code></pre>

<p>前者返回“ false ”，后者返回“ true ”。</p>

<h4>9.7.3 fn:containsIgnoreCase函数</h4>

<pre><code>  fn:containsIgnoreCase函数与fn:contains函数的功能差不多，唯一的区别是fn:containsIgnoreCase函数对于子字符串的包含比较将忽略大小写。它与fn:contains函数相同，包括string和substring两个参数，并返回一个boolean类型的值。下面看一个示例。

${fn:containsIgnoreCase("ABC", "a")}&lt;br&gt;
${fn:containsIgnoreCase("ABC", "A")}&lt;br&gt;
</code></pre>

<p>前者和后者都会返回“ true ”。</p>

<h4>9.7.4 词头判断函数 fn:startsWith 函数</h4>

<pre><code>   fn:startsWith函数用来判断源字符串是否符合一连串的特定词头。它除了包含一个string参数外，还包含一个subffx参数，表示词头字符串，同样是String类型。该函数返回一个boolean类型的值。下面看一个示例。

${fn:startsWith ("ABC", "ab")}&lt;br&gt;
${fn:startsWith ("ABC", "AB")}&lt;br&gt;
</code></pre>

<p>前者返回“ false ”，后者返回“ true ”。</p>

<h4>9.7.5 词尾判断函数 fn:endsWith 函数</h4>

<pre><code>   fn:endsWith函数用来判断源字符串是否符合一连串的特定词尾。它与fn:startsWith函数相同，包括string和subffx两个参数，并返回一个boolean类型的值。下面看一个示例。

${fn:endsWith("ABC", "bc")}&lt;br&gt;
${fn:endsWith("ABC", "BC")}&lt;br&gt;
</code></pre>

<p>前者返回“ false ”，后者返回“ true ”。</p>

<h4>9.7.6 字符实体转换函数 fn:escapeXml 函数</h4>

<p>fn:escapeXml函数用于将所有特殊字符转化为字符实体码。它只包含一个string参数，返回一个String类型的值。</p>

<h4>9.7.8 字符匹配函数 fn:indexOf 函数</h4>

<pre><code>   fn:indexOf函数用于取得子字符串与源字符串匹配的开始位置，若子字符串与源字符串中的内容没有匹配成功将返回“ -1 ”。它包括string和substring两个参数，返回结果为int类型。下面看一个示例。

${fn:indexOf("ABCD","aBC")}&lt;br&gt;
${fn:indexOf("ABCD","BC")}&lt;br&gt;
</code></pre>

<p>前者由于没有匹配成功，所以返回-1，后者匹配成功将返回位置的下标，为1。</p>

<h4>9.7.9 分隔符函数 fn:join 函数</h4>

<pre><code>   fn:join函数允许为一个字符串数组中的每一个字符串加上分隔符，并连接起来。它的参数、返回结果和描述如表9.25所示：
</code></pre>

<p>表9.25　fn:join函数</p>

<table cellspacing="0" cellpadding="0" width="350" border="1">
                        <tbody>
                            <tr>
                                <td width="65">
                                <p>参数</p>
                                </td>
                                <td width="216">
                                <p>描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="65">
                                <p>array</p>
                                </td>
                                <td width="216">
                                <p>字符串数组。其类型必须为String[]类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="65">
                                <p>separator</p>
                                </td>
                                <td width="216">
                                <p>分隔符。其类型必须为String类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="65">
                                <p>返回结果</p>
                                </td>
                                <td width="216">
                                <p>返回一个String类型的值</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例。</p>

<pre><code>&lt;% String[] stringArray = {"a","b","c"}; %&gt;
&lt;%request.getSession().setAttribute("stringArray", stringArray);%&gt;
${fn:join(sessionScope.stringArray,";")}&lt;br&gt;
</code></pre>

<p>定义数组并放置到Session中，然后通过Session得到该字符串数组，使用fn:join函数并传入分隔符“ ; ”，得到的结果为“ a;b;c ”。</p>

<h4>9.7.10 替换函数 fn:replace 函数</h4>

<pre><code>   fn:replace函数允许为源字符串做替换的工作。它的参数、返回结果和描述如表9.26所示：
</code></pre>

<p>表9.26　fn:replace函数</p>

<table cellspacing="0" cellpadding="0" width="353" border="1">
                        <tbody>
                            <tr>
                                <td width="105">
                                <p>参数</p>
                                </td>
                                <td width="249">
                                <p>描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="105">
                                <p>inputString</p>
                                </td>
                                <td width="249">
                                <p>源字符串。其类型必须为String类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="105">
                                <p>beforeSubstring</p>
                                </td>
                                <td width="249">
                                <p>指定被替换字符串。其类型必须为String类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="105">
                                <p>afterSubstring</p>
                                </td>
                                <td width="249">
                                <p>指定替换字符串。其类型必须为String类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="105">
                                <p>返回结果</p>
                                </td>
                                <td width="249">
                                <p>返回一个String类型的值</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例。</p>

<p>${fn:replace("ABC","A","B")}<br></p>

<p>将“ ABC ”字符串替换为“ BBC ”，在“ ABC ”字符串中用“ B ”替换了“ A ”。</p>

<h4>9.7.11 分隔符转换数组函数 fn:split 函数</h4>

<p>fn:split函数用于将一组由分隔符分隔的字符串转换成字符串数组。它的参数、返回结果和描述如表9.27所示：</p>

<p>表9.27　fn:split函数</p>

<table cellspacing="0" cellpadding="0" width="281" border="1">
                        <tbody>
                            <tr>
                                <td width="65">
                                <p>参数</p>
                                </td>
                                <td width="216">
                                <p>描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="65">
                                <p>string</p>
                                </td>
                                <td width="216">
                                <p>源字符串。其类型必须为String类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="65">
                                <p>delimiters</p>
                                </td>
                                <td width="216">
                                <p>指定分隔符。其类型必须为String类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="65">
                                <p>返回结果</p>
                                </td>
                                <td width="216">
                                <p>返回一个String[]类型的值</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例。</p>

<p>${fn:split("A,B,C",",")}<br></p>

<p>将“ A,B,C ”字符串转换为数组{A,B,C}。</p>

<h4>9.7.12 字符串截取函数 fn:substring 函数</h4>

<p>fn:substring函数用于截取字符串。它的参数、返回结果和描述如表9.28所示：</p>

<p>表9.28　fn:substring函数</p>

<table cellspacing="0" cellpadding="0" width="353" border="1">
                        <tbody>
                            <tr>
                                <td width="68">
                                <p>参数</p>
                                </td>
                                <td width="285">
                                <p>描述</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="68">
                                <p>string</p>
                                </td>
                                <td width="285">
                                <p>源字符串。其类型必须为String类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="68">
                                <p>beginIndex</p>
                                </td>
                                <td width="285">
                                <p>指定起始下标（值从0开始）。其类型必须为int类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="68">
                                <p>endIndex</p>
                                </td>
                                <td width="285">
                                <p>指定结束下标（值从0开始）。其类型必须为int类型</p>
                                </td>
                            </tr>
                            <tr>
                                <td width="68">
                                <p>返回结果</p>
                                </td>
                                <td width="285">
                                <p>返回一个String类型的值</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>


<p>下面看一个示例。</p>

<p>${fn:substring("ABC","1","2")}<br></p>

<p>截取结果为“ B ”。</p>

<h4>9.7.14 起始到定位截取字符串函数 fn:substringBefore 函数</h4>

<p>fn:substringBefore函数允许截取源字符从开始到某个字符串。它的参数和fn:substringAfter函数相同，不同的是substring表示的是结束字符串。下面看一个示例。</p>

<pre><code>${fn:substringBefore("ABCD","BC")}&lt;br&gt;
</code></pre>

<p>截取的结果为“ A ”。</p>

<h4>9.7.15 小写转换函数 fn:toLowerCase 函数</h4>

<p>fn:toLowerCase函数允许将源字符串中的字符全部转换成小写字符。它只有一个表示源字符串的参数string，函数返回一个String类型的值。下面看一个示例。</p>

<pre><code>${fn:toLowerCase("ABCD")}&lt;br&gt;
</code></pre>

<p>转换的结果为“ abcd ”。</p>

<h4>9.7.16大写转换函数 fn:toUpperCase 函数</h4>

<p>fn:toUpperCase函数允许将源字符串中的字符全部转换成大写字符。它与fn:toLowerCase函数相同，也只有一个String参数，并返回一个String类型的值。下面看一个示例。</p>

<pre><code>${fn:toUpperCase("abcd")}&lt;br&gt;
</code></pre>

<p>转换的结果为“ ABCD ”。</p>

<h4>9.7.17空格删除函数 fn:trim 函数</h4>

<p>fn:trim函数将删除源字符串中结尾部分的“空格”以产生一个新的字符串。它与fn:toLowerCase函数相同，只有一个String参数，并返回一个String类型的值。下面看一个示例。</p>

<pre><code>${fn:trim("AB C ")}D&lt;br&gt;
</code></pre>

<p>转换的结果为“ AB CD ”，注意，它将只删除词尾的空格而不是全部，因此“ B ”和“ C ”之间仍然留有一个空格。</p>

<p>参考文档<a href="http://www.javawind.net/help/html/jstl_el.htm">http://www.javawind.net/help/html/jstl_el.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Eclipse AST来解析Java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/06/19/use-eclipse-ast-to-parser-java/"/>
    <updated>2013-06-19T14:46:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/06/19/use-eclipse-ast-to-parser-java</id>
    <content type="html"><![CDATA[<p>Eclipse中有个Outline视图，这个视图内可以显示类的各种信息，包括属性、方法等。同时在这个视图内点击哪里，就能定位的类什么地方。这是个神奇的东西，那么它是如何实现的呢？其实就是AST（Abstract Syntax Tree），抽象语法树了。利用这个来对Java源码进行解析。
另外，Eclipse有一个<a href="http://www.eclipse.org/jdt/ui/astview/">AST View</a>插件，使用这个能更加的清楚的看到解析后的效果。</p>

<p><img src="/images/blog/eclipse-ast-view.png" alt="Eclipse AST View" /></p>

<!--more-->


<h4>依赖的jar包</h4>

<ul>
<li>org.eclipse.core.contenttype_3.4.100.v20110423-0524.jar</li>
<li>org.eclipse.core.jobs_3.5.101.v20120113-1953.jar</li>
<li>org.eclipse.core.resources_3.7.101.v20120125-1505.jar</li>
<li>org.eclipse.core.runtime_3.7.0.v20110110.jar</li>
<li>org.eclipse.equinox.common_3.6.0.v20110523.jar</li>
<li>org.eclipse.equinox.preferences_3.4.2.v20120111-2020.jar</li>
<li>org.eclipse.jdt.core_3.7.3.v20120119-1537.jar</li>
<li>org.eclipse.osgi_3.7.2.v20120110-1415.jar</li>
</ul>


<p>这些包都可以在eclipse的plugin目录找到。可能版本有所区别。 <br/>
如果使用maven管理，经个人试验，直接使用以下dependency也是可以的。</p>

<pre><code>          &lt;dependency&gt;
                &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt;
                &lt;artifactId&gt;org.eclipse.jdt.core&lt;/artifactId&gt;
                &lt;version&gt;3.8.0.v_C03&lt;/version&gt;
            &lt;/dependency&gt;
             &lt;dependency&gt;
                 &lt;groupId&gt;org.eclipse.core&lt;/groupId&gt;
                 &lt;artifactId&gt;org.eclipse.core.runtime&lt;/artifactId&gt;
                 &lt;version&gt;3.6.0.v20100505&lt;/version&gt;
             &lt;/dependency&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.eclipse.core&lt;/groupId&gt;
                &lt;artifactId&gt;org.eclipse.core.resources&lt;/artifactId&gt;
                &lt;version&gt;3.6.0.v20100526-0737&lt;/version&gt;
            &lt;/dependency&gt;
</code></pre>

<h4>如何解析Java</h4>

<pre><code>package cn.shenyanchao.ast;

import org.apache.commons.io.FileUtils;
import org.eclipse.jdt.core.dom.*;

import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * Created with IntelliJ IDEA.
 *
 * @author shenyanchao
 *         Date:  6/13/13
 *         Time:  11:52 AM
 */
public class AstAnalyzer {
    public static void main(String[] args) throws IOException {

        String javaSource = FileUtils.readFileToString(new File("/home/shenyanchao/IdeaProjects/ast/src/main/java/cn/shenyanchao/from/ShenYanChaoAST.java"));

        ASTParser parser = ASTParser.newParser(AST.JLS3);
        parser.setSource(javaSource.toCharArray());

        // 使用解析器进行解析并返回AST上下文结果(CompilationUnit为根节点)
        CompilationUnit result = (CompilationUnit) parser.createAST(null);

        result.imports();
        result.getPackage();
        result.getCommentList();
        System.out.println(result.getCommentList().toString());

        TypeDeclaration type = (TypeDeclaration) result.types().get(0);
        System.out.println("---------Type---------");
        System.out.println(type.toString());

        MethodDeclaration method = type.getMethods()[0];
        method.parameters();
        method.isConstructor();

        System.out.println("---------Method---------");
        System.out.println(method.toString());
        method.getName();
        method.getModifiers();
        Type returnType = method.getReturnType2();
        System.out.println("returnType = " + returnType.toString());


        Block methodBody = method.getBody();
        List&lt;Statement&gt; statementList = methodBody.statements();

        System.out.println(statementList.toString());

        statementList.get(0);

        ExpressionStatement ifs = (ExpressionStatement) method.getBody().statements().get(1);
        Assignment expression = (Assignment) ifs.getExpression();
        Expression exp = expression.getRightHandSide();

        System.out.println(result.toString());
    }
}
</code></pre>

<h4>如何创建Java</h4>

<pre><code>package cn.shenyanchao.ast;

import org.eclipse.jdt.core.dom.*;

/**
 * Created with IntelliJ IDEA.
 *
 * @author shenyanchao
 *         Date:  6/13/13
 *         Time:  11:27 AM
 */
public class AstHelloWorld {


    public static void main(String[] args) {
        AST ast = AST.newAST(AST.JLS3);
        CompilationUnit compilationUnit = ast.newCompilationUnit();

        // 创建类
        TypeDeclaration programClass = ast.newTypeDeclaration();
        programClass.setName(ast.newSimpleName("HelloWorld"));
        programClass.modifiers().add(
                ast.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD));
        compilationUnit.types().add(programClass);

        // 创建包
        PackageDeclaration packageDeclaration = ast.newPackageDeclaration();
        packageDeclaration.setName(ast.newName("cn.shenyanchao.hello"));
        compilationUnit.setPackage(packageDeclaration);

        MethodDeclaration main = ast.newMethodDeclaration();
        main.setName(ast.newSimpleName("main"));
        main.modifiers().add(
                ast.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD));
        main.modifiers().add(ast.newModifier(Modifier.ModifierKeyword.STATIC_KEYWORD));
        main.setReturnType2(ast.newPrimitiveType(PrimitiveType.VOID));
        programClass.bodyDeclarations().add(main);
        Block mainBlock = ast.newBlock();
        main.setBody(mainBlock);

        // 给main方法定义String[]参数
        SingleVariableDeclaration mainParameter = ast
                .newSingleVariableDeclaration();
        mainParameter.setName(ast.newSimpleName("arg"));
        mainParameter.setType(ast.newArrayType(ast.newSimpleType(ast
                .newName("String"))));
        main.parameters().add(mainParameter);

        MethodInvocation println = ast.newMethodInvocation();
        println.setName(ast.newSimpleName("println"));

        //生成String类型的常量
        StringLiteral s = ast.newStringLiteral();
        s.setLiteralValue("Hello World");
        println.arguments().add(s);

        println.setExpression(ast.newName("System.out"));

        mainBlock.statements().add(ast.newExpressionStatement(println));

        System.out.println(compilationUnit.toString());
    }
}
</code></pre>

<p>具体的使用手册，参见<a href="http://www.shenyanchao.cn/blog/2013/06/07/eclipse-ast/">http://www.shenyanchao.cn/blog/2013/06/07/eclipse-ast/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse AST抽象语法树API]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/06/07/eclipse-ast/"/>
    <updated>2013-06-07T20:29:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/06/07/eclipse-ast</id>
    <content type="html"><![CDATA[<h3>Eclipse AST</h3>

<p>Eclipse AST 是 Eclipse JDT 的一个重要组成部分,定义在包 org.eclipse.jdt.core.dom 中,用来表示 Java 语言中的所有语法结构。 <br/>
Eclipse AST 采用工厂方法模式和访问者模式   (见 2.7节)来设计和实现,这样可以减轻用户深入了解其内部结构的压力,并且方便用户利用它们构建并处理 AST。你可以打开 Eclipse 帮助页面,通过鼠标依次点击窗口左边的目录“JDT Plug-in Developer Guide”Æ“Reference”Æ“API Reference” Æ“org.eclipse.jdt.core.dom”,即可打开这个包的详细说明。本节将对这个包中重要的类作简要说明,为简便起见,这里省去这些类的包名,即org.eclipse.jdt.core.dom。  <br/>
在 Eclipse AST 中,与本书的课程设计相关的类主要有以下三部分:</p>

<ul>
<li>ASTNode 类及其派生类:用于描述各种 AST 节点的类,每个 AST 节点表示一个Java 源程序中的一个语法结构,例如,一个名字、类型、表达式、语句或声明等。</li>
<li>AST 类:创建 AST 节点的工厂类,类中包含许多创建各类 AST 节点的工厂方法,用户可以利用这些方法来构建 AST。</li>
<li>ASTVisitor 类:
AST 的访问者抽象类,类中声明了一组访问各类 AST 节点的 visit( )方法、endVisit( )方法和 preVisit( )方法。</li>
</ul>


<!--more-->


<h4>AST 节点类</h4>

<p>在 Eclipse AST 中,Java 源程序中的每个语法结构对应为一个 AST 节点,所有的 AST节点按其在语法上的关系连接形成一棵 AST 树。类 ASTNode 是 AST 树中各类节点的抽象基类,其余的 AST 节点类都由它派生。在 ASTNode 类中声明有各个具体的 AST 节点类所对应的类型标识,如 ASTNode.COMPILATION_UNIT 代表 Compilation_Unit 节点类,这类节点用来表示一个 Java 源程序文件。  <br/>
为便于自顶向下(从父节点到子节点)或者自底向上(从子节点到父节点)访问 AST树,AST 节点含有指向其父节点的 parent 域以及若干关联的子节点域。在 AST 节点类中,以属性(property)来统一处理子节点以及用户自定义的节点属性,属性的访问方法有:</p>

<pre><code>void setProperty(String propertyName, Object data) // 设置指定属性的值
Object getProperty(String propertyName) // 取得指定属性的值
Map properties( )// 返回节点的所有属性表,这个表是不可修改的
</code></pre>

<p>在每个具体的 AST 节点类中,以类常量形式声明该类节点所拥有的基本属性(即基本的子节点)类别,并定义了存放属性值的域以及设置和访问属性的方法。例如,在一个 Java源程序文件中,有可选的 package 声明、0 个或多个 import 声明以及至少 1 个类型声明(可以是类声明或接口声明),从而在表示 Java 源程序文件(称为编译单元)的 AST 节点类CompilationUnit 中就声明有 final 类变量 PACKAGE_PROPERTY、IMPORTS_PROPERTY 和TYPES_PROPERTY,分别表示 package 属性、imports 属性和 types 属性,同时还定义有如下的访问方法:</p>

<pre><code>List imports( )
// 该节点的所有 import 声明,按在程序中的出现次序排列List types( )
// 该节点的所有顶层类型声明,按在程序中的出现次序排列
void setPackage(PackageDeclaration pkgDecl) // 设置该节点的 package 声明
PackageDeclaration getPackage( )
// 取得该节点的 package 声明
</code></pre>

<p>其中,类型相同的子节点组成的序列以 java.util.List 接口类来表示,这个接口类包含 add、get、set、remove 等方法用于访问和修改序列。在实际构造和访问 AST 树时,需要注意统一所使用的 List 接口类的实现类,例如,可以统一使用类 java.util.LinkedList 或者统一使用类java.util.ArrayList 来表示序列。 <br/>
在 AST 节点类中,只提供获取父节点的方法,即</p>

<pre><code>ASTNode getParent( )
</code></pre>

<p>而没有提供设置父节点的方法,这是因为对节点的 parent 域的设置是伴随着将该节点设置为其他节点的子节点而自动进行的。一个新创建的 AST 节点是没有设置其父节点的。当节点A 通过形如 setCHILD 方法,如 A.setPackage(B)方法,或者通过序列的 add 或 set 方法,如A.types( ).add(B)方法,将节点 B 设为自己的孩子时,B 节点的 parent 域将自动设置为对 A节点的引用;对于那些因上述操作导致不再是 A 节点的子节点来说,其 parent 域将被自动设置为 null。</p>

<p>每个 AST 节点及其子节点只能归属于一棵 AST 树。如果将一棵 AST 树中的某个 AST节点添加到另一棵 AST 树中,则必须复制这个节点及其所有的子孙节点,以保证这些节点只属于一棵 AST 树。此外,AST 树中不能含有环,如果某些操作会导致 AST 有环,则这些操作将失败。 <br/>
为支持对源程序的分析和类型检查等,每个 AST 节点还含有一组位标志(用一个 int用来传播与该节点有关的附加信息,这些位标志可以通过节点的以下方法来存取:</p>

<pre><code>void setFlags(int flags)
int getFlags( )
</code></pre>

<p>此外,Eclipse AST 还支持访问者模式,每个 AST 节点都含有方法:</p>

<pre><code>void accept(ASTVisitor visitor)
</code></pre>

<p>用于统一表示对当前节点访问时所要执行的任务,这个任务由参数 visitor 来给定。你可以进一步了解 ASTVisitor 类以及访问者模式(见 2.7.2 节)来了解对 AST 树的访问。</p>

<h4>AST 类</h4>

<p>org.eclipse.jdt.core.dom.AST 是 AST 节点的工厂类,即它提供一系列形如</p>

<pre><code>TYPE newTYPE( )
</code></pre>

<p>的工厂方法,用来创建名为 TYPE 的 Eclipse AST 节点类的实例,新创建的节点并没有设置父节点。例如,方法</p>

<pre><code>CompilationUnit newCompilationUnit( )
</code></pre>

<p>用来创建由这个 AST 所拥有的一个编译单元节点。  <br/>
要使用这些方法,首先需要创建 AST 类的实例:</p>

<pre><code>AST ast = AST.newAST(AST.JLS3);
</code></pre>

<p>其中,参数 AST.JLS3 指示所生成的 ast 包含处理 JLS3(Java 语言规范第 3 版)的 AST API。
JLS3 是 Java 语言所有早期版本的超集,JLS3 API 可以用来处理直到 Java SE 6(即 JDK1.6)
的 Java 程序。</p>

<h4>ASTVisitor 类</h4>

<p>org.eclipse.jdt.core.dom.ASTVisitor 是 AST 树的访问者类,它提供一套方法来实现对给定节点的访问。
这套方法中有两组是与具体的 AST 节点类 T 相关的,即 visit 方法和 endVisit方法,有两个是与具体的 AST 节点类无关的,即 preVisit 方法和 postVisit 方法。这些方法都通过参数接收一个 AST 节点 node,然后对这个节点进行访问以执行一些操作。</p>

<ul>
<li>public boolean visit(T node) 如果返回 true,则接着访问 node 的子节点;如果返回false,则不再访问 node 的子节点。ASTVisitor 类提供的各个 visit 方法的缺省实现是:什么也不做,直接返回 true。子类可以根据需要重新实现这些方法中的部分或全部。
-public void endVisit(T node) 这类方法在节点 node 的子节点已经被访问或者是在visit(node)返回为 false 之后被调用ASTVisitor 类提供的各个 endVisit 方法的缺省实现是什么也不做。子类可以根据需要重新实现这些方法中的部分或全部。</li>
<li>public void preVisit(ASTNode node)</li>
<li>public void postVisit(ASTNode node) 这个方法在 endVisit(node)之后被调用。
这个方法在 visit(node)之前被调用。 <br/>
ASTVisitor 类提供的 preVisit 方法和 postVisit 方法的缺省实现是什么也不做。子类可以根据需要来重新实现它们。</li>
</ul>


<p>在 Eclipse AST 中,结合 AST 节点的 accept( )方法和 ASTVisitor 实例,假设待访问的AST 树的根节点为 root,
则调用 root.accept( )就可以启动对这棵 AST 树的遍历。遍历是以深度优先搜索为基础的,你可以进一步查看 Eclipse JDT 的源代码来确认这一点,你也可以从<a href="http://www.docjar.com/docs/api/org/eclipse/jdt/core/dom/index.html">http://www.docjar.com/docs/api/org/eclipse/jdt/core/dom/index.html</a> 上查看相关的源代码。为帮
助大家理解对 AST 树的遍历过程,这里简要给出 accept 方法的实现。  <br/>
所有的 AST 节点都执行在 ASTNode 类中定义的 accept 方法:</p>

<pre><code>public final void accept(ASTVisitor visitor) {
if (visitor == null) { throw new IllegalArgumentException(); }
visitor.preVisit(this);
// 执行与节点类型无关的 preVisit 方法
accept0(visitor); // 调用 accept0,执行与节点类型相关的 visit/endVisit 方法
visitor.postVisit(this); // 执行与节点类型无关的 postVisit 方法
}
</code></pre>

<p>ASTNode 类中的 accept0 方法是一个抽象的方法:</p>

<pre><code>abstract void accept0(ASTVisitor visitor);
</code></pre>

<p>每个具体的 AST 节点类中都必须实现 accept0 方法,实现该方法的通用模板如下:</p>

<pre><code>boolean visitChildren = visitor.visit(this);
if (visitChildren) {
// 调用 visit( )访问本节点
// 如果 visit( )返回 true,则访问子节点acceptChild(visitor, getProperty1()); // 访问非序列型属性
acceptChildren(visitor, rawListProperty); // 访问序列型属性
acceptChild(visitor, getProperty2());
}
visitor.endVisit(this);// 调用 endVisit( )执行一些节点访问后的操作
</code></pre>

<p>从上面的模板可以看出,如果节点包含多个属性,如 CompilationUnit 节点中有 imports属性和 types 属性等,则按这些属性在源程序中的先后次序来依次访问;如果一个属性为序列型,如 CompilationUnit 节点中的 types 属性,则调用 acceptChildren 方法来依次访问序列中的各个子节点;如果一个属性是非序列的,则调用 acceptChild 方法来访问。acceptChild和 acceptChildren 这两个方法的实现都与 AST 节点的具体类型无关,故放在 ASTNode 类中:</p>

<pre><code>final void acceptChild(ASTVisitor visitor, ASTNode child) {
if (child == null) { return; }
child.accept(visitor);
}
final void acceptChildren(ASTVisitor visitor, ASTNode.NodeList children) {
NodeList.Cursor cursor = children.newCursor();
try {
while (cursor.hasNext()) {
ASTNode child = (ASTNode) cursor.next();
child.accept(visitor);
}
} finally {
children.releaseCursor(cursor);
}
}
</code></pre>

<p>基于上述的实现机制,当你需要对 AST 树实现特定的访问功能时,你只需要结合实际需求设计和实现 ASTVisitor 类的子类就可以了。例如,在本章的课程设计中,你需要实现ASTVisitor 类的派生类 InterpVisitor,在其中重写(override)与需要解释执行的语法结构相对应的 visit( )方法。</p>

<h4>SimpleMiniJOOL 语言涉及的 AST 节点类</h4>

<p>虽然 Eclipse AST 有为数众多的 AST 节点类,但是为表示 SimpleMiniJOOL 语言只会用到其中的一小部分,下面简要描述 SimpleMiniJOOL 语言所涉及到的 AST 节点类,重点介绍在使用这些类时所关注的成员。</p>

<h5>整体结构</h5>

<p>1、CompilationUnit 类(编译单元)  <br/>
它用来表示一个 Java 源程序文件,本书中用来表示一个 MiniJOOL 语言或其子语言程序的全部,是所对应的 AST 树的根节点。虽然这类节点有 package 声明、import 声明列表和类型声明列表等基本属性,但是在表示 SimpleMiniJOOL 程序时就只有一个类声明子节点。 <br/>
<strong>主要成员</strong></p>

<pre><code>List types( )// 返回该编译单元的顶层类型声明所对应的节点序列
</code></pre>

<p>2、TypeDeclaration 类(类型声明) <br/>
它用于表示 Java 语言中的类声明或接口声明,本书中用来表示 MiniJOOL 语言或其子语言中的类声明。在 SimpleMiniJOOL 程序中,仅有一个名为 Program 的类声明。  <br/>
<strong>主要成员</strong></p>

<pre><code>MethodDeclaration[] getMethods( )
// 返回类声明的方法声明序列
以下成员在表示 SkipOOMiniJOOL 或 MiniJOOL 程序时才会用到:
FieldDeclaration[] getFields( ) // 返回类声明的域声明序列
Type getSuperclassType( ) // 返回该类声明的超类类型或 null
void setSuperclassType(Type superclassType)
// 设置或清除超类
</code></pre>

<p>3、MethodDeclaration 类(方法声明)   <br/>
它用于表示 Java 语言中的方法声明或者是构造器声明(注意:在 Java 语言规范中,并不是将构造器看成是一个方法。因为后者视为是类中的成员,可以被子类继承;而前者不能被子类继承)。这类节点的基本属性包括:方法或构造器名、方法或构造器的体、返回类型、形参列表等。在一个 SimpleMiniJOOL 程序里的唯一的类中,只有一个名为 main 的无参方法,这个方法声明表示为一个 MethodDeclaration 实例。  <br/>
<strong>主要成员</strong></p>

<pre><code>Block getBody( ) // 返回该方法声明的方法体,如果没有体则为 null
void setBody(Block body) // 设置或清除该方法声明的方法体
SimpleName getName( ) // 返回所声明的方法名
void setName(SimpleName methodName)
Type getReturnType2( )
// 设置方法名
// 返回所声明的方法的返回类型
void setReturnType2(Type type)
// 设置返回类型
</code></pre>

<p>以下成员在表示 SkipOOMiniJOOL 或 MiniJOOL 程序时才会用到:</p>

<pre><code>List parameters( ) // 返回所声明的方法的参数声明序列
boolean isConstructor( ) // 返回该声明是否是在声明构造器
void setConstructor(boolean isConstructor)
// 设置是否是在声明构造器
</code></pre>

<h5>语句</h5>

<p>Statement 类是所有 Eclipse AST 中语句节点类的基类,由它派生出许多具体的语句节点类。在表示 SimpleMiniJOOL 程序时,只涉及到 Block、ExpressionStatement、IfStatement、WhileStatement、EmptyStatement、BreakStatement、ContinueStatement、ReturnStatement 等语句节点类。   <br/>
1、Block 类(语句块)  <br/>
它表示用花括号括起来的语句序列,可以用来表示一个方法体。其基本属性是语句序列。   <br/>
<strong>主要成员</strong></p>

<pre><code>List statements( )
// 返回该语句块中的语句序列
</code></pre>

<p>2、ExpressionStatement 类(表达式语句)  <br/>
它表示由表达式形成的合法语句,包括表达式这一基本属性。在 SimpleMiniJOOL 语言中,可以用这个类来表示 print/read 语句或赋值表达式语句。 <br/>
<strong>主要成员</strong></p>

<pre><code>Expression getExpression( ) // 返回该语句中的表达式
void setExpression(Expression expression) // 设置该语句中的表达式
</code></pre>

<p>3、IfStatement(if 语句)  <br/>
它表示 if 或 if-else 语句,节点中包括 if 语句的表达式、then 分支以及可选的 else 分支
这些基本属性。  <br/>
<strong>主要成员</strong></p>

<pre><code>Expression getExpression( ) // 返回 if 语句的表达式
void setExpression(Expression expression) // 设置 if 语句的表达式
Statement getThenStatement( ) // 返回 if 语句的 then 分支
void setThenStatement(Statement statement) // 设置 then 分支
Statement getElseStatement( ) // 返回 if 语句的 else 分支
void setElseStatement(Statement statement) // 设置 else 分支
</code></pre>

<p>4、WhileStatement 类(while 语句)  <br/>
它表示 while 语句,节点中包括 while 语句的表达式和体这些基本属性。  <br/>
<strong>主要成员</strong></p>

<pre><code>Expression getExpression( ) // 返回 while 语句的表达式
void setExpression(Expression expression) // 设置 while 语句的表达式
Statement getBody( ) // 返回 while 语句的体
void setBody(Statement statement) // 设置 while 语句的体
</code></pre>

<p>5、EmptyStatement 类(空语句) <br/>
它表示由分号组成的语句。 <br/>
6、BreakStatement 类和 ContinueStatement 类 <br/>
这两个类分别表示 break 语句和 continue 语句。在 Java 语言中,这两个语句是允许带有标号的,即形如“break label; ”或“continue label;”,因此提供 getLabel( )和 setLabel( )成员来访问标号。但是,在 MiniJOOL 语言或其子语言中,不支持标号。   <br/>
7、ReturnStatement 类  <br/>
它表示 return 语句。SimpleMiniJOOL 语言中的 return 语句是不允许含有表达式的,但是 MiniJOOL 语言和 SkipOOMiniJOOL 语言中的 return 语句允许含有表达式以支持返回值。故以下成员在表示 MiniJOOL 语言和 SkipOOMiniJOOL 语言时才会用到:  <br/>
<strong>主要成员</strong></p>

<pre><code>Expression getExpression( ) // 返回 return 语句的表达式
void setExpression(Expression expression) // 设置 return 语句的表达式
</code></pre>

<h5>表达式</h5>

<p>Expression 类是所有 Eclipse AST 中表达式节点类的基类,由它派生出许多类。在表示SimpleMiniJOOL 程 序 时 , 只 涉 及 到 MethodInvocation 、 Assignment 、 InfixExpression 、PrefixExpression、ParenthesizedExpression、NumberLiteral、Name 这些表达式节点类。  <br/>
1、MethodInvocation 类(方法调用) <br/>
它用来表示 Java 程序中的方法调用。MiniJOOL 语言中的方法调用形如:</p>

<pre><code>[ Expression . ] Identifier ( [ Expression { , Expression } ] )
</code></pre>

<p>开头的“Expression .”是限制被调用方法的受限表达式,可以是类名、实例表达式或者没有。在 SkipOOMiniJOOL 语言中,方法调用不存在受限表达式。虽然 SimpleMiniJOOL 语言中没有方法调用,但是程序中的“print/read( &lt;参数>)”用方法调用节点来表示。  <br/>
<strong>主要成员</strong></p>

<pre><code>// 返回所调用的方法名
SimpleName getName( )
void setName(SimpleName methodName) // 设置方法名
List arguments( )
// 返回方法调用表达式中的实参表达式序列
</code></pre>

<p>以下成员在表示 MiniJOOL 程序时才会用到:</p>

<pre><code>Expression getExpression( ) // 返回方法调用的受限表达式
void setExpression(Expression expression) // 设置方法调用的受限表达式
</code></pre>

<p>2、Assignment 类(赋值表达式)  <br/>
它用于表示赋值表达式,包含运算符、左部和右部等基本属性。赋值运算符是在内部类Assignment.Operator 中义。MiniJOOL 语言或其子语言中支持的赋值运算符包括 =、+=、-=、*=、/=、%=。 <br/>
<strong>主要成员</strong></p>

<pre><code>Expression getLeftHandSide( )
// 返回赋值表达式的左部
void setLeftHandSide(Expression expr)
getRightHandSide( )
// 设 置 赋 值 表 达 式 的 左 部 Expression
// 返回赋值表达式的右部
void setRightHandSide(Expression expr)
// 设置赋值表达式的右部
Assignment.Operator getOperator( ) // 返回赋值表达式的运算符
void setOperator(Assignment.Operator op) // 设置赋值表达式的运算符
</code></pre>

<p><strong>赋值运算符</strong>
在内部类 Assignment.Operator 中,定义有许多类型为 static Assignment.Operator 的赋值运算符,其中与 MiniJOOL 语言及其子语言有关的有:</p>

<pre><code>ASSIGN:表示 =,可以用 Assignment.Operator.ASSIGN 来访问,以下类似
PLUS_ASSIGN:表示+=
MINUS_ASSIGN:表示 -=
TIMES_ASSIGN:表示 *=
DIVIDE_ASSIGN:表示 /=
REMAINDER_ASSIGN:表示 %=
</code></pre>

<p>3、InfixExpression 类(中缀表达式)  <br/>
它用于表示中缀表达式,包含运算符、左操作数和右操作数等基本属性。运算符是在内部类 InfixExpression.Operator 中定义。MiniJOOL 语言或其子语言中支持的中缀运算符包括包括+、-、*、/、%、==、!=、&lt;、&lt;=、>、>=、&amp;&amp;、||等。 <br/>
<strong>主要成员</strong></p>

<pre><code>// 返回中缀表达式的左操作数
Expression getLeftOperand( )
void setLeftOperand(Expression expr) // 设置左操作数
Expression getRightOperand( ) // 返回中缀表达式的右操作数
void setRightOperand(Expression expr) // 设置右操作数
InfixExpression.Operator getOperator( ) // 返回中缀表达式的运算符
void setOperator(InfixExpression.Operator op) // 设置运算符
</code></pre>

<p><strong>中缀运算符</strong>
本书涉及内部类 InfixExpression.Operator 中定义的以下 static InfixExpression.Operator 类型的实例:</p>

<pre><code>+ PLUS
% REMAINDER
&lt; LESS
&amp;&amp;
-
MINUS
==
&gt; GREATER
CONDITIONAL_AND
*
TIMES
/ DIVIDE
EQUALS != NOT_EQUALS
&lt;= &gt;=
||
LESS_EQUALS
GREATER_EQUALS
CONDITIONAL_OR
</code></pre>

<p>4、PrefixExpression 类(前缀表达式)  <br/>
它用于表示前缀表达式,包含运算符、操作数等基本属性。运算符是在内部类PrefixExpression.Operator 中定义。在 SimpleMiniJOOL 中,包括-、+、!等前缀运算符。 <br/>
<strong>主要成员</strong></p>

<pre><code>Expression getOperand( )
// 返回前缀表达式的操作数
void setOperand(Expression expr)
// 设置操作数
PrefixExpression.Operator getOperator( ) // 返回前缀表达式的运算符
void setOperator(PrefixExpression.Operator op) // 设置运算符
</code></pre>

<p><strong>前缀运算符</strong>
本书涉及内部类 PrefixExpression.Operator 中定义的以下 static PrefixExpression.Operator类型的实例:</p>

<pre><code>+PLUS
- MINUS
! NOT
</code></pre>

<p>5、ParenthesizedExpression 类(带括号的表达式)
<strong>主要成员</strong></p>

<pre><code>Expression getExpression( )
// 返回括号内的表达式
void setExpression(Expression expression) // 设置括号内的表达式
</code></pre>

<p>6、NumberLiteral 类(整数)  <br/>
<strong>主要成员</strong></p>

<pre><code>String getToken( )
// 返回对应的整数串
void setToken(String token) // 设置整数串
</code></pre>

<p>7、Name 类  <br/>
它用于表示一个名字,由它派生出 QualifiedName 和 SimpleName 两个类,前者表示一个形如 a.b 的受限名,后者表示一个简单名。在 SimpleMiniJOOL 程序中只会出现简单名。 <br/>
<strong>SimpleName 的主要成员</strong></p>

<pre><code>String getIdentifier( ) // 返回标识符
void setIdentifier(String expression) // 设置标识符
boolean isDeclaration( ) // 该标识符是否定义过
</code></pre>

<p><strong>QualifiedName 的主要成员</strong></p>

<pre><code>SimpleName getName( ) // 返回受限名中的名字部分
void setName(SimpleName name ) // 设置受限名中的名字部分
Name getQualifier( ) // 返回受限名中的受限部分
void setQualifier(Name qualifier) // 设置受限名中的受限部分
</code></pre>

<h4>Eclipse AST 使用示例</h4>

<p>在这一节中,我们将演示如何利用 Eclipse AST 手工构建如下的 SimpleMiniJOOL 程序的 AST 中间表示。</p>

<pre><code>class Program {
static void main() {
i = 10;
}
}
</code></pre>

<p>首先,你需要通过 Eclipse AST 工厂类中的方法 newAST()建立一个 AST 实例:</p>

<pre><code>AST ast = AST.newAST(JLS3);
</code></pre>

<p>利用这个 AST 实例,就可以按如下的方法创建各种 AST 节点,并构建完整的抽象语法树。然后,利用 Eclipse AST 工厂类中的各种创建方法按如下步骤创建所需要的 AST 节点:  <br/>
1) 整个 SimpleMiniJOOL 程序构成一个 CompilationUnit:</p>

<pre><code>CompilationUnit cu = ast.newCompilationUnit();
</code></pre>

<p>2) 在 CompilationUnit 实例中包含一个 TypeDeclaration,表示程序中的类 Program:</p>

<pre><code>TypeDeclaration type = ast.newTypeDeclaration( );
type.setName(ast.newSimpleName(“Program”));
// 定义类的名字
</code></pre>

<p>3) 在这个 TypeDeclaration 实例中添加类 Program 中的方法 main():</p>

<pre><code>MethodDeclaration method = ast.newMethodDeclaration( );
method.setName(ast.newSimpleName(“main”));
type.bodyDeclarations().add(method);
// 设置方法 main()的 modifier 为 static
method.modifiers().add(
ast.newModifier(Modifier.ModifierKeyword.STATIC_KEYWORD));
// 设置方法 main()的返回类型为 void
method.setReturnType2(ast.newPrimitiveType(PrimitiveType.VOID));
</code></pre>

<p>4) 构造 main 函数的函数体 mainBody</p>

<pre><code>Block mainBody = ast.newBlock();
method.setBody(mainBody);
</code></pre>

<p>5) 向方法 main 函数体 mainBody 中添加语句</p>

<pre><code>// 构建赋值表达式
Assignment assign = ast.newAssignment();
// 设置赋值表达式的左值为 i
assign.setLeftHandSide(ast.newSimpleName("i"));
// 设置赋值表达式的赋值算符为=
assign.setOperator(Assignment.Operator.ASSIGN);
// 设置赋值表达式的右值为数字 10
assign.setRightHandSide(ast.newNumberLiteral("10"));
// 由赋值表达式构建语句,并把这个语句加入方法 Main()的函数体
ExpressionStatement statement = ast.newExpressionStatement(assign);
mainBody.statements().add(statement);
</code></pre>

<p>至此,用 Eclipse AST 表示的 SimpleMiniJOOL 程序的抽象语法树就构建完毕了。 <br/>
在 lab1/src/edu/ustc/cs/compile/interpreter/TestCase.java 中的 createSampleAST( )方法给出了构建一个简单 SimpleMiniJOOL 程序对应的 AST 的完整示例。 <br/>
需要再次强调的是,使用 Eclipse AST 构建的抽象语法树在拓扑结构上必须是无环的。无论是手工构建 AST 还是自动构建 AST,你都需要小心的检查自己的代码,避免违反这个原则。</p>
]]></content>
  </entry>
  
</feed>
