<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：设计模式 | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/blog/categories/设计模式/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2012-11-10T01:13:34+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式：观察者（Observer） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/observer-in-java/"/>
    <updated>2012-11-08T18:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/observer-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>又叫发布订阅模式（Publish/subscribe），它定义了对象间的一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。</p>

<blockquote><p>这个定义还是比较通俗易懂的。我看了一遍，发现这不就是微博吗？我发布一条微博，那么所有关注我的人，都会收到通知，然后在新鲜事里显示出来。没错，就是这样！</p></blockquote>

<p>观察者模式有4个角色：</p>

<ul>
<li>被观察者(Observable):<br/>
定义被观察者必须实现的职责，动态的增加、删除观察者以及通知观察者</li>
<li>观察者（Observer）: <br/>
接收到消息后，进行更新操作</li>
<li>被观察者(Observable)具体类:<br/>
定义自己的业务逻辑，并定义哪儿些事件需要通知观察者</li>
<li>观察者（Observer）具体类：   <br/>
每个观察者在接收到消息后的更新操作是不同的。</li>
</ul>


<!--more-->


<p>在Java中如何实现观察者模式呢？废话，写代码啊！这个我自然知道，更令人惊喜的是JDK自身就提供了对观察者模式的原生支持，我不得不赞叹Java的强大。</p>

<p>Java提供了这样的两个东西：</p>

<ul>
<li>类<code>java.util.Observable</code>：<br/>
它内部维护了一个Vector容器，用来放所有的观察者，并且提供了添加、删除观察者的方法。此外，定义了notifyObservers方法，用来通知观察者。</li>
<li>接口<code>java.util.Observer</code>：
它定义了一个update方法，让Observer具体类来实现各自的操作。</li>
</ul>


<p>下面，就以微博作为例子吧。<br/>
先来一个被观察者，也就是我自己了。</p>

<pre><code>public class ShenYanChao extends Observable {

    //业务逻辑,不通知
    public String getName(){
        return "shenyanchao";
    }
    //发微博，通知
    public void publishWeibo(String content){
        System.out.println("我发布1条微博，內容是：["+content+"]");
        setChanged();
        notifyObservers(content);
    }
}
</code></pre>

<p>其中，setChanged()用来表明自身的状态变了，否则观察者是不会理的。这个是JDK的限制，其实观察者模式可以不用这个的。</p>

<p>下面就需要定义观察者了，也就是我的粉丝了。</p>

<pre><code>public class Fans implements Observer {

    @Override
    public void update(Observable o, Object content) {
        String who = ((ShenYanChao) o).getName();
        System.out.println("新鲜事:{" + who + "发布了一条微博，内容是：[" + content + "]}");
    }

}
</code></pre>

<p>观察者Fans一旦发现我发了1条微博，那么他就会出现一条新鲜事的了。update()的参数，第1个是被观察者，也就是我；第2个就是notifyObservers传过来的参数了，此处是微博内容。</p>

<p>具体场景是这样的：</p>

<pre><code>ShenYanChao shenyanchao = new ShenYanChao();
final int FANS_NUM = 10;//我的粉丝可不止这些呢
for (int i = 0; i &lt; FANS_NUM; i++) {
    shenyanchao.addObserver(new Fans());
}
shenyanchao.publishWeibo("欢迎登录：www.shenyanchao.cn");
</code></pre>

<p>此处模拟，我有10个粉丝，然后我发了1条微博。结果如下：</p>

<pre><code>我发布1条微博，內容是：[欢迎登录：www.shenyanchao.cn]
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
</code></pre>

<p>可见，一旦我发了微博，所有的观察者（Fans）都收到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：迭代器（Iterator） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/iterator-in-java/"/>
    <updated>2012-11-08T16:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/iterator-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>迭代器模式提供了一种方法来访问一个容器对象种的各个元素，而又不暴露这个对象的内部细节。</p>

<blockquote><p>在Java中已经默认提供了Iterator支持，各种容器类都进行了实现，而事实上，迭代器模式就是为了解决如何遍历这些容器里的元素而诞生的。</p></blockquote>

<p><strong>迭代器模式</strong>主要有以下的角色：</p>

<ul>
<li>Iterator抽象迭代器： <br/>
负责定义访问与遍历元素的接口。基本有3个固定的方法<code>hasNext()</code>,<code>next()</code>,<code>remove()</code>;</li>
<li>Concrete Iterator具体迭代器：  <br/>
迭代器的实现类，实现接口，完成元素遍历。</li>
<li>Aggregate抽象容器： <br/>
定义创建具体迭代器的接口。在Java种一般是<code>iterator()</code>方法。</li>
<li>Concrete Aggregate具体容器：<br/>
实现创建迭代器接口，返回迭代器实例对象。</li>
</ul>


<!--more-->


<p>为了方便，下面就直接以ArrayList为例，来看看迭代器是如何实现的吧。<br/>
在使用时，通常这样对ArrayList进行遍历：</p>

<pre><code>    List&lt;String&gt; list = new ArrayList&lt;String&gt;();
    list.add("first");
    list.add("second");
    Iterator&lt;String&gt; itr = list.iterator();
    while (itr.hasNext()) {
        String element = itr.next();
        System.out.println(element);
    }
</code></pre>

<p>从这里，我们可以看出来，这就是完全的迭代器模式。<br/>
首先来看，Iterator接口（java.util.Iterator）：</p>

<pre><code>public interface Iterator&lt;E&gt; {

    boolean hasNext();

    E next();

    void remove();
}
</code></pre>

<p>然后是Iterator的具体实现类(java.util.AbstractList<E>$Itr)：</p>

<pre><code>private class Itr implements Iterator&lt;E&gt; {

    int cursor = 0;

    int lastRet = -1;

    int expectedModCount = modCount;

    public boolean hasNext() {
        return cursor != size();
    }

    public E next() {
        checkForComodification();
        try {
        E next = get(cursor);
        lastRet = cursor++;
        return next;
        } catch (IndexOutOfBoundsException e) {
            checkForComodification();
            throw new NoSuchElementException();
        }
    }

    public void remove() {
        if (lastRet == -1)
        throw new IllegalStateException();
            checkForComodification();

        try {
            AbstractList.this.remove(lastRet);
        if (lastRet &lt; cursor)
            cursor--;
        lastRet = -1;
        expectedModCount = modCount;
        } catch (IndexOutOfBoundsException e) {
            throw new ConcurrentModificationException();
        }
    }

    final void checkForComodification() {
        if (modCount != expectedModCount)
            throw new ConcurrentModificationException();
    }
}
</code></pre>

<p>这个就是具体的Iterator了，当然还有另外一个ListItr extends Itr，这个是专门针对List进行操作的。 <br/>
那么Aggregate接口对应的是哪个呢？就是<code>java.util.AbstractCollection&lt;E&gt;</code> ，它里面定义了这样的一个接口：</p>

<pre><code>...
/**
 * Returns an iterator over the elements contained in this collection.
 *
 * @return an iterator over the elements contained in this collection
 */
public abstract Iterator&lt;E&gt; iterator();
...
</code></pre>

<p>那么具体实现是在哪儿？<code>java.util.AbstractList&lt;E&gt;</code>做了实现。</p>

<pre><code>    public Iterator&lt;E&gt; iterator() {
        return new Itr();
    }
</code></pre>

<p>返回了一个具体的迭代器实例。而ArrayList,LinkedList都是继承AbstractList的，因此自动具有了返回迭代器实例的功能。</p>

<p>因此，Java种的容器类只负责元素的的维护就好了。访问就教给迭代器吧，Java做的如此完善，以至于我们都不必再自己写Iterator了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：命令（Command） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/command-in-java/"/>
    <updated>2012-11-08T15:09:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/command-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>命令模式是一种高内聚的模式。它将一个请求封装成一个对象，从而让使用不同请求来把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销与恢复功能。 <br/>
听起来，好复杂！</p>

<p>在程序员之间，流传着这样一句话：程序写到最后，就是if-else,for,while。<br/>
真是枯燥啊！其实能体会到这种感觉，说明作为一个程序员，你已经有了一定的造诣了。那如何提高呢？</p>

<p>试想，在代码中，你有很多if-else或者case语句。为什么有这样的语句呢？因为判断条件多啊，需要根据不同的条件来做不同的事情。2、3个条件还可以写，如果有20个条件呢，或者N多呢。那么我们的if-else那就判断N重条件，这简直是无法忍受的，写出的代码可维护性更不用说了。</p>

<!--more-->


<p> <br/>
<strong>命令模式</strong>就是可以解决这种问题的方法之一。下面就来提高一下程序员的自我修养了。</p>

<p>命令模式中，主要有3个角色：</p>

<ul>
<li>Receiver命令接收者</li>
<li>Command命令</li>
<li>Invoker命令调用者</li>
</ul>


<p>下面开始分别定义： <br/>
<strong>Receiver:</strong>定义命令的N种接收者</p>

<pre><code>public abstract class AbstractReceiver {
    public abstract void doSomething();
}

public class Receiver1 extends AbstractReceiver {
    @Override
    public void doSomething() {
        System.out.println("receiver1 do something");
    }
}
public class Receiver2 extends AbstractReceiver {
    @Override
    public void doSomething() {
        System.out.println("receiver2 do something");
    }
}
...
public class ReceiverN
...
</code></pre>

<p><strong>Command:</strong>定义N种命令</p>

<pre><code>public abstract class AbstractCommand {
    public abstract void execute();
}

public class Command1 extends AbstractCommand {
    private AbstractReceiver receiver;
    public Command1(AbstractReceiver receiver) {
        this.receiver = receiver;
    }
    @Override
    public void execute() {
        System.out.println("command1 命令发出");
        receiver.doSomething();
    }
}
public class Command2 extends AbstractCommand {
    private AbstractReceiver receiver;
    public Command2(AbstractReceiver receiver) {
        this.receiver = receiver;
    }
    @Override
    public void execute() {
        System.out.println("command2 命令发出");
        receiver.doSomething();
    }
}
...
public class CommandN
....
</code></pre>

<p><strong>Invoker:</strong>定义调用者</p>

<pre><code>public class Invoker {

    private List&lt;AbstractCommand&gt; commandList = new LinkedList&lt;AbstractCommand&gt;();

    public void addCommand(AbstractCommand command) {
        commandList.add(command);
    }

    public void addCommands(LinkedList&lt;AbstractCommand&gt; commands) {
        commandList.addAll(commands);
    }

    public void action() {
        for (AbstractCommand command : commandList) {
            command.execute();
        }
    }

}
</code></pre>

<p>使用场景：</p>

<pre><code>Invoker invoker = new Invoker();
AbstractReceiver receiver1 = new Receiver1();
AbstractReceiver receiver2 = new Receiver2();
AbstractCommand command1 = new Command1(receiver2);
AbstractCommand command2 = new Command2(receiver1);
invoker.addCommand(command1);
invoker.addCommand(command2);
invoker.action();
</code></pre>

<p>运行结果：</p>

<pre><code>command1 命令发出
receiver2 do something
command2 命令发出
receiver1 do something
</code></pre>

<p>现在再回过来看命令模式的定义，就比较明白了吧。也就是说有N种请求条件，那么就定义N个类来封装请求，我们称之为命令（Command）。每个命令做什么操作呢，谁来执行这个命令呢，有命令自己来进行定义。这样就避免了if-else，而由N种命令来决定跳转关系。</p>

<p>调用者（Invoker）呢，它维护了一个命令列表，并按照一定的顺序来发起命令调用。当然这个列表也有可能就只有一个命令了，就简化了一下。与if-else对比更直观的了。</p>

<p>定义中还提到了命令撤销或恢复的功能，这种撤销与恢复也是命令的一种了，一般可以通过扩展一个命令出来，通过诸如日志等来恢复之前的操作。其实这个也是可以通过备忘录模式来实现的。</p>

<h2>命令模式 in JDK</h2>

<pre><code>java.lang.Runnable#run()
javax.swing.Action#actionPeformed(ActionEvent e)
</code></pre>

<p>从Runnable来说，不同的实现者，通过调用run()来实现在不同线程执行不同的操作。
从Action来说，由于桌面UI有很多的操作事件，这些事件就是命令。通过actionPerformed函数，接受不同的命令参数来做出不同的表现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：原型（prototype） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/07/prototype-in-java/"/>
    <updated>2012-11-07T20:41:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/07/prototype-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。<br/>
基本上，可以就是一个clone方法，通过这个方法进行对象的拷贝。</p>

<p>Java中的原型模式：</p>

<pre><code>public class ProtoTypeClass implements Cloneable {

    @Override
    public ProtoTypeClass clone(){
        ProtoTypeClass cloneObject = null;
        try{
            cloneObject = (ProtoTypeClass) super.clone();
        }catch (Exception e) {
            // TODO: handle exception
        }
        return cloneObject;
    }
}
</code></pre>

<p>上面就是实现了原型模式。不过Java在提供了Cloneable这一接口方便实现原型模式的同时，也带来了一些不容易注意到的问题。</p>

<ul>
<li>clone时，构造函数不会执行</li>
<li>浅拷贝与深拷贝</li>
</ul>


<p>这两个问题是需要时刻注意的。由于本文主要不是讲Cloneable,所以另辟专题吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：门面（Facade） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/07/facade-in-java/"/>
    <updated>2012-11-07T20:00:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/07/facade-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。 <br/>
就是说，Facade提供了一个统一的接口，掩盖下层系统的复杂性，用户用起来更加的方便。</p>

<p>以医院的例子，做个比喻：</p>

<!--more-->


<blockquote></blockquote>

<p>在无接待员的时候，病人要做业务，好复杂啊，好累！</p>

<p><img src="/images/blog/facade-hospital1.png" alt="无接待员" /></p>

<p>有了接待员，各种就医流程好流畅的说。因为有接待员与各个部门打交道。</p>

<p><img src="/images/blog/facade-hospital2.png" alt="有接待员" /></p>

<p>这个例子很好的说出了facade的作用。甚至都不需要代码来表达了。</p>

<p>门面模式的优点：</p>

<p>　　●松散耦合</p>

<p>　　门面模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。</p>

<p>　　●简单易用</p>

<p>　　门面模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟门面类交互就可以了。</p>

<p>　　●更好的划分访问层次</p>

<p>　　通过合理使用Facade，可以帮助我们更好地划分访问的层次。有些方法是对系统外的，有些方法是系统内部使用的。把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节</p>

<h2>门面模式 in JDK</h2>

<p>这个具体的例子，我首先想到的就是<a href="http://www.slf4j.org/">slf4j</a>这个日志框架。通过名字Simple Logging Facade for Java (SLF4J)就知道是采用的Facade模式了。下面是其官方的介绍： <br/>
The Simple Logging Facade for Java or (SLF4J) serves as a simple facade or abstraction for various logging frameworks, e.g. java.util.logging, log4j and logback, allowing the end user to plug in the desired logging framework at deployment time. <br/>
也就是说，他屏蔽了各种日志框架的差异，提供了一个统一的日志接口给用户使用。不得不说，<a href="http://www.slf4j.org/">slf4j</a>很好用，推荐！</p>
]]></content>
  </entry>
  
</feed>
