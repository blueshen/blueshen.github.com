<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 设计模式 | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/blog/categories/设计模式/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2012-11-02T20:12:30+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式：单例（singleton） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/singleton-in-java/"/>
    <updated>2012-11-02T18:47:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/singleton-in-java</id>
    <content type="html"><![CDATA[<h3>概要</h3>

<p>单例模式是最简单的设计模式之一，但是对于Java的开发者来说，它却有很多缺陷。在本月的专栏中，David Geary探讨了单例模式以及在面对多线程（multithreading)、类装载器（classloaders）和序列化(serialization)时如何处理这些缺陷。</p>

<p>单例模式适合于一个类只有一个实例的情况，比如窗口管理器，打印缓冲池和文件系统，它们都是原型的例子。典型的情况是，那些对象的类型被遍及一个软件系统的不同对象访问，因此需要一个全局的访问指针，这便是众所周知的单例模式的应用。当然这只有在你确信你不再需要任何多于一个的实例的情况下。</p>

<!--more-->


<p> <br/>
单例模式的用意在于前一段中所关心的。通过单例模式你可以：</p>

<ul>
<li>确保一个类只有一个实例被建立</li>
<li>提供了一个对对象的全局访问指针</li>
<li>在不影响单例类的客户端的情况下允许将来有多个实例</li>
</ul>


<p>尽管单例设计模式如在下面的图中的所显示的一样是最简单的设计模式，但对于粗心的Java开发者来说却呈现出许多缺陷。这篇文章讨论了单例模式并揭示了那些缺陷。</p>

<h3>单例模式</h3>

<p>在《设计模式》一书中，作者这样来叙述单例模式的：确保一个类只有一个实例并提供一个对它的全局访问指针。
下图说明了单例模式的类图。  <br/>
<img src="/images/blog/singleton.jpg" alt="" /></p>

<p>正如你在上图中所看到的，这不是单例模式的完整部分。此图中单例类保持了一个对唯一的单例实例的静态引用，并且会从静态getInstance()方法中返回对那个实例的引用。 <br/>
例1显示了一个经典的单例模式的实现。 <br/>
例1.经典的单例模式</p>

<pre><code>public class ClassicSingleton {   
    private static ClassicSingleton instance = null;   

    protected ClassicSingleton() {   
        // Exists only to defeat instantiation.   
    }   
    public static ClassicSingleton getInstance() {   
        if(instance == null) {   
            instance = new ClassicSingleton();   
        }   
        return instance;   
    }   
}   
</code></pre>

<p>在例1中的单例模式的实现很容易理解。ClassicSingleton类保持了一个对单独的单例实例的静态引用，并且从静态方法getInstance()中返回那个引用。 <br/>
关于ClassicSingleton类，有几个让我们感兴趣的地方。 <br/>
首先，ClassicSingleton使用了一个众所周知的懒汉式实例化去创建那个单例类的引用;结果，这个单例类的实例直到getInstance()方法被第一次调用时才被创建。这种技巧可以确保单例类的实例只有在需要时才被建立出来。其次，注意ClassicSingleton实现了一个protected的构造方法，这样客户端不能直接实例化一个ClassicSingleton类的实例。然而，你会惊奇的发现下面的代码完全合法：</p>

<pre><code>public class SingletonInstantiator {    
    public SingletonInstantiator() {    
        ClassicSingleton instance = ClassicSingleton.getInstance();   
        ClassicSingleton anotherInstance =  new ClassicSingleton();   
        ...    
        }    
}   
</code></pre>

<p>前面这个代码片段为何能在没有继承ClassicSingleton并且ClassicSingleton类的构造方法是protected的情况下创建其实例？ <br/>
答案是protected的构造方法可以被其子类以及在同一个包中的其它类调用。因为ClassicSingleton和SingletonInstantiator位于相同的包（缺省的包），所以SingletonInstantiator方法能创建ClasicSingleton的实例。<br/>
这种情况下有两种解决方案：一是你可以使ClassicSingleton的构造方法变化私有的（private）这样只有ClassicSingleton的方法能调用它;然而这也意味着ClassicSingleton不能有子类。有时这是一种很合意的解决方法，如果确实如此，那声明你的单例类为final是一个好主意，这样意图明确，并且让编译器去使用一些性能优化选项。另一种解决方法是把你的单例类放到一个外在的包中，以便在其它包中的类（包括缺省的包）无法实例化一个单例类。</p>

<p>关于ClassicSingleton的第三点感兴趣的地方是，如果单例由不同的类装载器装入，那便有可能存在多个单例类的实例。假定不是远端存取，例如一些servlet容器对每个servlet使用完全不同的类装载器，这样的话如果有两个servlet访问一个单例类，它们就都会有各自的实例。 <br/>
第四点，如果ClasicSingleton实现了java.io.Serializable接口，那么这个类的实例就可能被序列化和复原。不管怎样，如果你序列化一个单例类的对象，接下来复原多个那个对象，那你就会有多个单例类的实例。 <br/>
最后也许是最重要的一点，就是例1中的ClassicSingleton类不是线程安全的。如果两个线程，我们称它们为线程1和线程2，在同一时间调用ClassicSingleton.getInstance()方法，如果线程1先进入if块，然后线程2进行控制，那么就会有ClassicSingleton的两个的实例被创建。</p>

<p>正如你从前面的讨论中所看到的，尽管单例模式是最简单的设计模式之一，在Java中实现它也是决非想象的那么简单。这篇文章接下来会揭示Java规范对单例模式进行的考虑，但是首先让我们近水楼台的看看你如何才能测试你的单例类。</p>

<p><strong>测试单例模式</strong></p>

<p>接下来，我使用与log4j相对应的JUnit来测试单例类，它会贯穿在这篇文章余下的部分。如果你对JUnit或log4j不很熟悉，请参考相关资源。</p>

<p>例2是一个用JUnit测试例1的单例模式的案例：<br/>
例2.一个单例模式的案例</p>

<pre><code>import org.apache.log4j.Logger;   
import junit.framework.Assert;   
import junit.framework.TestCase;   

public class SingletonTest extends TestCase {   
    private ClassicSingleton sone = null, stwo = null;   
    private static Logger logger = Logger.getRootLogger();   

     public SingletonTest(String name) {   
        super(name);   
    }   
    public void setUp() {   
        logger.info("getting singleton...");   
        sone = ClassicSingleton.getInstance();   
        logger.info("...got singleton: " + sone);   

        logger.info("getting singleton...");   
        stwo = ClassicSingleton.getInstance();   
        logger.info("...got singleton: " + stwo);   
     }   
    public void testUnique() {   
        logger.info("checking singletons for equality");   
         Assert.assertEquals(true, sone == stwo);   
    }   
}   
</code></pre>

<p>例2两次调用ClassicSingleton.getInstance()，并且把返回的引用存储在成员变量中。方法testUnique()会检查这些引用看它们是否相同。例3是这个测试案例的输出：  <br/>
例3.是这个测试案例的输出<br/>
Buildfile: build.xml</p>

<p>init:</p>

<pre><code> [echo] Build 20030414 (14-04-2003 03:08)   
</code></pre>

<p>compile:</p>

<p>run-test-text:</p>

<pre><code> [java] .INFO main: [b]getting singleton...[/b]   
 [java] INFO main: [b]created singleton:[/b] Singleton@e86f41   
 [java] INFO main: ...got singleton: Singleton@e86f41   
 [java] INFO main: [b]getting singleton...[/b]   
 [java] INFO main: ...got singleton: Singleton@e86f41   
 [java] INFO main: checking singletons for equality   

 [java] Time: 0.032   

 [java] OK (1 test)  
</code></pre>

<p>正如前面的清单所示，例2的简单测试顺利通过----通过ClassicSingleton.getInstance()获得的两个单例类的引用确实相同;然而，你要知道这些引用是在单线程中得到的。下面的部分着重于用多线程测试单例类。</p>

<p>多线程因素的考虑</p>

<p>在例1中的ClassicSingleton.getInstance()方法由于下面的代码而不是线程安全的：</p>

<pre><code>if(instance == null) {   
    instance = new Singleton();   
 }   
</code></pre>

<p>如果一个线程在第二行的赋值语句发生之前切换，那么成员变量instance仍然是null，然后另一个线程可能接下来进入到if块中。在这种情况下，两个不同的单例类实例就被创建。不幸的是这种假定很少发生，这样这种假定也很难在测试期间出现（译注：在这可能是作者对很少出现这种情况而导致无法测试从而使人们放松警惕而感到叹惜）。为了演示这个线程轮换，我得重新实现例1中的那个类。例4就是修订后的单例类： <br/>
例4.人为安排的方式</p>

<pre><code>import org.apache.log4j.Logger;       
public class Singleton {   
    private static Singleton singleton = null;   
    private static Logger logger = Logger.getRootLogger();   
    private static boolean firstThread = true;   

    protected Singleton() {   
     // Exists only to defeat instantiation.   
    }   
    public static Singleton getInstance() {   
        if(singleton == null) {   
            simulateRandomActivity();   
            singleton = new Singleton();   
    }   
    logger.info("created singleton: " + singleton);   
    return singleton;   
}   
private static void simulateRandomActivity() {   
    try {   
        if(firstThread) {   
            firstThread = false;   
            logger.info("sleeping...");   

            // This nap should give the second thread enough time   
            // to get by the first thread.   
            Thread.currentThread().sleep(50);   
        }   
        }   
        catch(InterruptedException ex) {   
            logger.warn("Sleep interrupted");   
        }   
    }   
}   
</code></pre>

<p>除了在这个清单中的单例类强制使用了一个多线程错误处理，例4类似于例1中的单例类。在getInstance()方法第一次被调用时，调用这个方法的线程会休眠50毫秒以便另外的线程也有时间调用getInstance()并创建一个新的单例类实例。当休眠的线程觉醒时，它也会创建一个新的单例类实例，这样我们就有两个单例类实例。尽管例4是人为如此的，但它却模拟了第一个线程调用了getInstance()并在没有完成时被切换的真实情形。 <br/>
例5测试了例4的单例类： <br/>
例5.失败的测试</p>

<pre><code>import org.apache.log4j.Logger;   
import junit.framework.Assert;   
import junit.framework.TestCase;   

public class SingletonTest extends TestCase {   
    private static Logger logger = Logger.getRootLogger();   
    private static Singleton singleton = null;   

public SingletonTest(String name) {   
    super(name);   
}   
public void setUp() {   
    singleton = null;   
}   
public void testUnique() throws InterruptedException {   
  // Both threads call Singleton.getInstance().   
  Thread threadOne = new Thread(new SingletonTestRunnable()),   
         threadTwo = new Thread(new SingletonTestRunnable());   

  threadOne.start();   
  threadTwo.start();   

  threadOne.join();   
  threadTwo.join();   
}   
private static class SingletonTestRunnable implements Runnable {   
  public void run() {   
     // Get a reference to the singleton.   
     Singleton s = Singleton.getInstance();   

     // Protect singleton member variable from   
     // multithreaded access.   
     synchronized(SingletonTest.class) {   
        if(singleton == null) // If local reference is null...   
           singleton = s;     // ...set it to the singleton   
        }   
     // Local reference must be equal to the one and   
     // only instance of Singleton; otherwise, we have two   
              // Singleton instances.   
     Assert.assertEquals(true, s == singleton);   
    }   
    }   
}   
</code></pre>

<p>例5的测试案例创建两个线程，然后各自启动，等待完成。这个案例保持了一个对单例类的静态引用，每个线程都会调用Singleton.getInstance()。如果这个静态成员变量没有被设置，那么第一个线程就会将它设为通过调用getInstance()而得到的引用，然后这个静态变量会与一个局部变量比较是否相等。      <br/>
在这个测试案例运行时会发生一系列的事情：第一个线程调用getInstance()，进入if块，然后休眠;接着，第二个线程也调用getInstance()并且创建了一个单例类的实例。第二个线程会设置这个静态成员变量为它所创建的引用。第二个线程检查这个静态成员变量与一个局部备份的相等性。然后测试通过。当第一个线程觉醒时，它也会创建一个单例类的实例，并且它不会设置那个静态成员变量（因为第二个线程已经设置过了），所以那个静态变量与那个局部变量脱离同步，相等性测试即告失败。例6列出了例5的输出：      <br/>
例6.例5的输出</p>

<pre><code>Buildfile: build.xml   
init:   
    [echo] Build 20030414 (14-04-2003 03:06)   
compile:   
run-test-text:   
INFO Thread-1: sleeping...   
INFO Thread-2: created singleton: Singleton@7e5cbd   
INFO Thread-1: created singleton: Singleton@704ebb   
junit.framework.AssertionFailedError: expected: but was:   
    at junit.framework.Assert.fail(Assert.java:47)   
    at junit.framework.Assert.failNotEquals(Assert.java:282)   
    at junit.framework.Assert.assertEquals(Assert.java:64)   
    at junit.framework.Assert.assertEquals(Assert.java:149)   
    at junit.framework.Assert.assertEquals(Assert.java:155)   
    at SingletonTest$SingletonTestRunnable.run(Unknown Source)   
    at java.lang.Thread.run(Thread.java:554)   
    [java] .   
    [java] Time: 0.577   

    [java] OK (1 test)   
</code></pre>

<p>到现在为止我们已经知道例4不是线程安全的，那就让我们看看如何修正它。</p>

<p><strong>同步</strong></p>

<p>要使例4的单例类为线程安全的很容易----只要像下面一个同步化getInstance()方法：</p>

<pre><code>public synchronized static Singleton getInstance() {   
    if(singleton == null) {   
        simulateRandomActivity();   
        singleton = new Singleton();   
    }   
    logger.info("created singleton: " + singleton);   
    return singleton;   
}   
</code></pre>

<p>在同步化getInstance()方法后，我们就可以得到例5的测试案例返回的下面的结果：</p>

<pre><code>Buildfile: build.xml   

init:   
    [echo] Build 20030414 (14-04-2003 03:15)   

compile:   
    [javac] Compiling 2 source files   

run-test-text:   
INFO Thread-1: sleeping...   
INFO Thread-1: created singleton: Singleton@ef577d   
INFO Thread-2: created singleton: Singleton@ef577d   
    [java] .   
    [java] Time: 0.513   

    [java] OK (1 test)   
</code></pre>

<p>这此，这个测试案例工作正常，并且多线程的烦恼也被解决;然而，机敏的读者可能会认识到getInstance()方法只需要在第一次被调用时同步。因为同步的性能开销很昂贵（同步方法比非同步方法能降低到100次左右），或许我们可以引入一种性能改进方法，它只同步单例类的getInstance()方法中的赋值语句。</p>

<p><strong>一种性能改进的方法</strong></p>

<p>寻找一种性能改进方法时，你可能会选择像下面这样重写getInstance()方法：</p>

<pre><code>public static Singleton getInstance() {   
    if(singleton == null) {   
        synchronized(Singleton.class) {    
            singleton = new Singleton();   
        }   
    }   
return singleton;   
}   
</code></pre>

<p>这个代码片段只同步了关键的代码，而不是同步整个方法。然而这段代码却不是线程安全的。考虑一下下面的假定：线程1进入同步块，并且在它给singleton成员变量赋值之前线程1被切换。接着另一个线程进入if块。第二个线程将等待直到第一个线程完成，并且仍然会得到两个不同的单例类实例。有修复这个问题的方法吗？请读下去。</p>

<p><strong>双重加锁检查</strong></p>

<p>初看上去，双重加锁检查似乎是一种使懒汉式实例化为线程安全的技术。下面的代码片段展示了这种技术：</p>

<pre><code>public static Singleton getInstance() {   
    if(singleton == null) {   
         synchronized(Singleton.class) {   
            if(singleton == null) {   
                singleton = new Singleton();   
            }   
        }   
    }   
     return singleton;   
}   
</code></pre>

<p>如果两个线程同时访问getInstance()方法会发生什么？想像一下线程1进行同步块马上又被切换。接着，第二个线程进入if 块。当线程1退出同步块时，线程2会重新检查看是否singleton实例仍然为null。因为线程1设置了singleton成员变量，所以线程2的第二次检查会失败，第二个单例类实例也就不会被创建。似乎就是如此。<br/>
不幸的是，双重加锁检查不会保证正常工作，因为编译器会在Singleton的构造方法被调用之前随意给singleton赋一个值。如果在singleton引用被赋值之后而被初始化之前线程1被切换，线程2就会被返回一个对未初始化的单例类实例的引用。</p>

<p><strong>一个改进的线程安全的单例模式实现</strong></p>

<p>例7列出了一个简单、快速而又是线程安全的单例模式实现： <br/>
例7.一个简单的单例类</p>

<pre><code>public class Singleton {   
    public final static Singleton INSTANCE = new Singleton();   
    private Singleton() {   
        // Exists only to defeat instantiation.   
    }   
}   
</code></pre>

<p>这段代码是线程安全的是因为静态成员变量一定会在类被第一次访问时被创建。你得到了一个自动使用了懒汉式实例化的线程安全的实现;你应该这样使用它：</p>

<pre><code>Singleton singleton = Singleton.INSTANCE;   
singleton.dothis();   
singleton.dothat();   
...   
</code></pre>

<p>当然万事并不完美，前面的Singleton只是一个折衷的方案;如果你使用那个实现，你就无法改变它以便后来你可能想要允许多个单例类的实例。用一种更折哀的单例模式实现(通过一个getInstance()方法获得实例)你可以改变这个方法以便返回一个唯一的实例或者是数百个实例中的一个．你不能用一个公开且是静态的（public static)成员变量这样做．</p>

<p>你可以安全的使用例７的单例模式实现或者是例１的带一个同步的getInstance()方法的实现．然而，我们必须要研究另一个问题：你必须在编译期指定这个单例类，这样就不是很灵活．一个单例类的注册表会让我们在运行期指定一个单例类．</p>

<p>使用注册表 <br/>
使用一个单例类注册表可以：</p>

<p><strong>在运行期指定单例类</strong></p>

<p>防止产生多个单例类子类的实例 <br/>
在例8的单例类中，保持了一个通过类名进行注册的单例类注册表：  <br/>
例8 带注册表的单例类</p>

<pre><code>import java.util.HashMap;   
import org.apache.log4j.Logger;   

public class Singleton {   
    private static HashMap map = new HashMap();   
    private static Logger logger = Logger.getRootLogger();   

    protected Singleton() {   
        // Exists only to thwart instantiation   
    }   
public static synchronized Singleton getInstance(String classname) {   
    if(classname == null) throw new IllegalArgumentException("Illegal classname");   
        Singleton singleton = (Singleton)map.get(classname);   

    if(singleton != null) {   
        logger.info("got singleton from map: " + singleton);   
        return singleton;   
    }   
    if(classname.equals("SingeltonSubclass_One"))   
        singleton = new SingletonSubclass_One();            
    else if(classname.equals("SingeltonSubclass_Two"))   
        singleton = new SingletonSubclass_Two();   

    map.put(classname, singleton);   
    logger.info("created singleton: " + singleton);   
    return singleton;   
    }   
     // Assume functionality follows that's attractive to inherit   
}   
</code></pre>

<p>这段代码的基类首先创建出子类的实例，然后把它们存储在一个Map中。但是基类却得付出很高的代价因为你必须为每一个子类替换它的getInstance()方法。幸运的是我们可以使用反射处理这个问题。</p>

<p><strong>使用反射</strong></p>

<p>在例9的带注册表的单例类中，使用反射来实例化一个特殊的类的对象。与例8相对的是通过这种实现，Singleton.getInstance()方法不需要在每个被实现的子类中重写了。<br/>
例9 使用反射实例化单例类</p>

<pre><code>import java.util.HashMap;   
import org.apache.log4j.Logger;   

public class Singleton {   
    private static HashMap map = new HashMap();   
    private static Logger logger = Logger.getRootLogger();   

protected Singleton() {   
  // Exists only to thwart instantiation   
}   
public static synchronized Singleton getInstance(String classname) {   
    Singleton singleton = (Singleton)map.get(classname);   

    if(singleton != null) {   
        logger.info("got singleton from map: " + singleton);   
        return singleton;   
    }   
    try {   
     singleton = (Singleton)Class.forName(classname).newInstance();   
    }   
    catch(ClassNotFoundException cnf) {   
     logger.fatal("Couldn't find class " + classname);       
    }   
    catch(InstantiationException ie) {   
        logger.fatal("Couldn't instantiate an object of type " + classname);       
    }   
    catch(IllegalAccessException ia) {   
        logger.fatal("Couldn't access class " + classname);       
    }   
    map.put(classname, singleton);   
    logger.info("created singleton: " + singleton);   

    return singleton;   
    }   
}   
</code></pre>

<p>关于单例类的注册表应该说明的是：它们应该被封装在它们自己的类中以便最大限度的进行复用。</p>

<p><strong>封装注册表</strong></p>

<p>例10列出了一个单例注册表类。<br/>
例10 一个SingletonRegistry类</p>

<pre><code>import java.util.HashMap;   
import org.apache.log4j.Logger;   

public class SingletonRegistry {   
    public static SingletonRegistry REGISTRY = new SingletonRegistry();   

    private static HashMap map = new HashMap();   
    private static Logger logger = Logger.getRootLogger();   

    protected SingletonRegistry() {   
        // Exists to defeat instantiation   
    }   
    public static synchronized Object getInstance(String classname) {   
        Object singleton = map.get(classname);   

        if(singleton != null) {   
            return singleton;   
        }   
    try {   
        singleton = Class.forName(classname).newInstance();   
        logger.info("created singleton: " + singleton);   
    }   
    catch(ClassNotFoundException cnf) {   
        logger.fatal("Couldn't find class " + classname);       
    }   
    catch(InstantiationException ie) {   
        logger.fatal("Couldn't instantiate an object of type " +    
                   classname);       
    }   
    catch(IllegalAccessException ia) {   
        logger.fatal("Couldn't access class " + classname);       
    }   
    map.put(classname, singleton);   
    return singleton;   
    }   
}   
</code></pre>

<p>注意我是把SingletonRegistry类作为一个单例模式实现的。我也通用化了这个注册表以便它能存储和取回任何类型的对象。例11显示了的Singleton类使用了这个注册表。<br/>
例11 使用了一个封装的注册表的Singleton类</p>

<pre><code>import java.util.HashMap;   
import org.apache.log4j.Logger;   

public class Singleton {   

    protected Singleton() {   
        // Exists only to thwart instantiation.   
    }   
    public static Singleton getInstance() {   
        return (Singleton)SingletonRegistry.REGISTRY.getInstance(classname);   
    }   
}   
</code></pre>

<p>上面的Singleton类使用那个注册表的唯一实例通过类名取得单例对象。<br/>
现在我们已经知道如何实现线程安全的单例类和如何使用一个注册表去在运行期指定单例类名，接着让我们考查一下如何安排类载入器和处理序列化。</p>

<p><strong>Classloaders</strong></p>

<p>在许多情况下，使用多个类载入器是很普通的--包括servlet容器--所以不管你在实现你的单例类时是多么小心你都最终可以得到多个单例类的实例。如果你想要确保你的单例类只被同一个的类载入器装入，那你就必须自己指定这个类载入器;例如：</p>

<pre><code>private static Class getClass(String classname)    
                                     throws ClassNotFoundException {   
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();   

    if(classLoader == null)   
     classLoader = Singleton.class.getClassLoader();   

    return (classLoader.loadClass(classname));   
    }   
}   
</code></pre>

<p>这个方法会尝试把当前的线程与那个类载入器相关联;如果classloader为null，这个方法会使用与装入单例类基类的那个类载入器。这个方法可以用Class.forName()代替。</p>

<p><strong>序列化</strong></p>

<p>如果你序列化一个单例类，然后两次重构它，那么你就会得到那个单例类的两个实例，除非你实现readResolve()方法，像下面这样：<br/>
例12 一个可序列化的单例类</p>

<pre><code>import org.apache.log4j.Logger;   

public class Singleton implements java.io.Serializable {   
    public static Singleton INSTANCE = new Singleton();   

    protected Singleton() {   
        // Exists only to thwart instantiation.   
    }   
    private Object readResolve() {   
        return INSTANCE;   
    }  
}   
</code></pre>

<p>上面的单例类实现从readResolve()方法中返回一个唯一的实例;这样无论Singleton类何时被重构，它都只会返回那个相同的单例类实例。 <br/>
例13测试了例12的单例类：<br/>
例13 测试一个可序列化的单例类</p>

<pre><code>import java.io.*;   
import org.apache.log4j.Logger;   
import junit.framework.Assert;   
import junit.framework.TestCase;   

public class SingletonTest extends TestCase {   
    private Singleton sone = null, stwo = null;   
    private static Logger logger = Logger.getRootLogger();   

    public SingletonTest(String name) {   
        super(name);   
    }   
    public void setUp() {   
        sone = Singleton.INSTANCE;   
        stwo = Singleton.INSTANCE;   
    }   
    public void testSerialize() {   
        logger.info("testing singleton serialization...");   
        [b]      writeSingleton();   
        Singleton s1 = readSingleton();   
        Singleton s2 = readSingleton();   
        Assert.assertEquals(true, s1 == s2);[/b]   }   
        private void writeSingleton() {   
        try {   
            FileOutputStream fos = new FileOutputStream("serializedSingleton");   
            ObjectOutputStream oos = new ObjectOutputStream(fos);   
            Singleton s = Singleton.INSTANCE;   

            oos.writeObject(Singleton.INSTANCE);   
            oos.flush();   
        }   
        catch(NotSerializableException se) {   
            logger.fatal("Not Serializable Exception: " + se.getMessage());   
        }   
        catch(IOException iox) {   
            logger.fatal("IO Exception: " + iox.getMessage());   
        }   
    }   
    private Singleton readSingleton() {   
        Singleton s = null;   

        try {   
            FileInputStream fis = new FileInputStream("serializedSingleton");   
            ObjectInputStream ois = new ObjectInputStream(fis);   
            s = (Singleton)ois.readObject();   
        }   
        catch(ClassNotFoundException cnf) {   
            logger.fatal("Class Not Found Exception: " + cnf.getMessage());   
        }   
        catch(NotSerializableException se) {   
            logger.fatal("Not Serializable Exception: " + se.getMessage());   
        }   
        catch(IOException iox) {   
            logger.fatal("IO Exception: " + iox.getMessage());   
        }   
        return s;   
    }   
    public void testUnique() {   
        logger.info("testing singleton uniqueness...");   
        Singleton another = new Singleton();   

        logger.info("checking singletons for equality");   
        Assert.assertEquals(true, sone == stwo);   
    }   
}   
</code></pre>

<p>前面这个测试案例序列化例12中的单例类，并且两次重构它。然后这个测试案例检查看是否被重构的单例类实例是同一个对象。下面是测试案例的输出：</p>

<pre><code>Buildfile: build.xml   

init:   
    [echo] Build 20030422 (22-04-2003 11:32)   

compile:   

run-test-text:   
    [java] .INFO main: testing singleton serialization...   
    [java] .INFO main: testing singleton uniqueness...   
    [java] INFO main: checking singletons for equality   

    [java] Time: 0.1   

    [java] OK (2 tests)   
</code></pre>

<p><strong>单例模式结束语</strong></p>

<p>单例模式简单却容易让人迷惑，特别是对于Java的开发者来说。在这篇文章中，作者演示了Java开发者在顾及多线程、类载入器和序列化情况如何实现单例模式。作者也展示了你怎样才能实现一个单例类的注册表，以便能够在运行期指定单例类。</p>

<p>原文：<a href="http://calmness.iteye.com/blog/60179">http://calmness.iteye.com/blog/60179</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：代理（Proxy） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/proxy-in-java/"/>
    <updated>2012-11-02T16:21:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/proxy-in-java</id>
    <content type="html"><![CDATA[<h2>什么是代理？</h2>

<p>代理是指，本该有A做的工作，现在找一个代理人B，然后由B来进行实际的工作。<br/>
代理，简单来分，可以分为以下两类：</p>

<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>


<!--more-->


<h2>静态代理</h2>

<p>以实现两个数的加法场景为例：</p>

<pre><code>public interface IAdd {
    public int add(int a, int b);
}
</code></pre>

<p>实现类：</p>

<pre><code>public class Add implements IAdd {
    @Override
    public int add(int a, int b) {
        return a + b;
    }
}
</code></pre>

<p>直接使用的话：</p>

<pre><code>Add add = new Add();
add.add(3, 14);
</code></pre>

<p>那么我想在执行加运算时，做一些其他操作怎么办，已有的类ADD无法改，没有源码。这时很容易想到的就是扩展：</p>

<pre><code>public class AddProxy implements IAdd {
    private IAdd add;

    public AddProxy(IAdd add) {
        this.add = add;
    }
    @Override
    public int add(int a, int b) {
        System.out.println("...begin...");
        int result = add.add(3, 14);
        System.out.println("...end...");
        return result;
    }
}
</code></pre>

<p>这样做，没有修改已有的类，并且增加了一些操作，此处为一些提示信息。采用了组合的方式，实现了代理模式。具体使用时，直接使用AddProxy即可。</p>

<pre><code>IAdd add = new AddProxy(new Add());
int result = add.add(3, 14);
</code></pre>

<p>此为<strong>静态代理</strong>也。</p>

<h2>动态代理</h2>

<p>动态代理，是指运行时动态的生成代理类，完成功能。静态代理中，显然AddProxy是编译期已知的了。实现方式，主要有两种：</p>

<ul>
<li>JDK Proxy</li>
<li>Cglib Proxy</li>
</ul>


<h3>JDK Proxy</h3>

<p>Java自身提供了相关的类，来实现动态代理。  <br/>
首先要定义一个<code>java.lang.reflect.InvocationHandler</code>接口实现</p>

<pre><code>import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
/**
* @author shenyanchao
*/
public class AddInvocationHandler implements InvocationHandler {

    private Object target;
    //绑定要代理的目标类
    public void bind(Object target) {
        this.target = target;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args)
        throws Throwable {
        System.out.println("......begin....");
        Object result = method.invoke(target, args);
        System.out.println("......end....");
        return result;
    }
}
</code></pre>

<p>那么在具体使用时，代码如下：</p>

<pre><code>AddInvocationHandler addHandler = new AddInvocationHandler();
IAdd add = new Add();
addHandler.bind(add);
IAdd addProxy = (IAdd) Proxy.newProxyInstance(
            Add.class.getClassLoader(), Add.class.getInterfaces(),
            addHandler);
int jdkResult = addProxy.add(3, 14);
</code></pre>

<p>从代码可见，主要是通过<code>Proxy.newProxyInstance</code>来在运行时生成代理类。需要注意的是，第二个参数必须使用具体实现类Add来获得interfaces，也就是说其代理的类必须实现了接口。<code>addHandler</code>负责绑定要代理的target类，并调用invoke来增强Add功能。</p>

<h3>Cglib Proxy</h3>

<p>JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。 <br/>
要使用CgLib，首先要实现一个CallBack接口的类，由于本例是为了实现method的拦截，因此直接实现MethodInterceptor即可：</p>

<pre><code>import java.lang.reflect.Method;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;
/**
* @author shenyanchao
*/
public class AddInterceptor implements MethodInterceptor {

@Override
public Object intercept(Object obj, Method method, Object[] args,
        MethodProxy proxy) throws Throwable {
        System.out.println("....begin....");
        Object result = proxy.invokeSuper(obj, args);
        System.out.println("....end....");
        return result;
    }
}
</code></pre>

<p>具体使用时：</p>

<pre><code>Enhancer enhancer = new Enhancer();
enhancer.setSuperclass(Add.class);
enhancer.setCallback(new AddInterceptor());
Add add  =  (Add) enhancer.create();
int result = add.add(3, 14);
</code></pre>

<p>通过Enhancer制定需要增强的类，并设置CallBack函数来实现代理与功能增强。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：装饰器（Decorator）in Java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/30/decorator-in-java/"/>
    <updated>2012-10-30T21:25:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/30/decorator-in-java</id>
    <content type="html"><![CDATA[<p>1.认识装饰器模式</p>

<p>装饰模式能够实现动态的为对象添加功能，是从一个对象外部来给对象添加功能。通常给对象添加功能，要么直接修改对象添加相应的功能，要么派生对应的子类来扩展，抑或是使用对象组合的方式。显然，直接修改对应的类这种方式并不可取。在面向对象的设计中，而我们也应该尽量使用对象组合，而不是对象继承来扩展和复用功能。装饰器模式就是基于对象组合的方式，可以很灵活的给对象添加所需要的功能。装饰器模式的本质就是动态组合。动态是手段，组合才是目的。总之，装饰模式是通过把复杂的功能简单化，分散化，然后再运行期间，根据需要来动态组合的这样一个模式。</p>

<!--more-->


<p>2.模式结构和说明</p>

<p>装饰模式的结构如下图所示。</p>

<p>Component：组件对象的接口，可以给这些对象动态的添加职责；</p>

<p>ConcreteComponent：具体的组件对象，实现了组件接口。该对象通常就是被装饰器装饰的原始对象，可以给这个对象添加职责；</p>

<p>Decorator：所有装饰器的父类，需要定义一个与组件接口一致的接口(主要是为了实现装饰器功能的复用，即具体的装饰器A可以装饰另外一个具体的装饰器B，因为装饰器类也是一个Component)，并持有一个Component对象，该对象其实就是被装饰的对象。如果不继承组件接口类，则只能为某个组件添加单一的功能，即装饰器对象不能在装饰其他的装饰器对象。</p>

<p>ConcreteDecorator：具体的装饰器类，实现具体要向被装饰对象添加的功能。用来装饰具体的组件对象或者另外一个具体的装饰器对象。</p>

<p>装饰器模式的示例代码如下(Java语言描述)：</p>

<p>   (1)组件对象的接口，可以给这些对象动态的添加职责</p>

<pre><code>public abstract class Component {  
    public abstract void operation();  
}  
</code></pre>

<p>(2)具体实现组件对象接口的对象</p>

<pre><code>public class ConcreteComponent extends Component {  

    public void operation() {  
        //相应的功能处理  
    }  
}  
</code></pre>

<p>(3)装饰器接口，维持一个指向组件对象的接口对象， 并定义一个与组件接口一致的接口</p>

<pre><code>public abstract class Decorator extends Component {  
    /** 
    * 持有组件对象 
    */  
    protected Component component;  

    /** 
    * 构造方法，传入组件对象 
    * @param component 组件对象 
    */  
    public Decorator(Component component) {  
        this.component = component;  
    }  

    public void operation() {  
        //转发请求给组件对象，可以在转发前后执行一些附加动作  
        component.operation();  
    }   
}  
</code></pre>

<p>(4)装饰器的具体实现对象，向组件对象添加职责，operationFirst()，operationLast()为前后需要添加的功能。具体的装饰器类ConcreteDecoratorB代码相似，不在给出。</p>

<pre><code>public class ConcreteDecoratorA extends Decorator {  
    public ConcreteDecoratorA(Component component) {  
        super(component);  
    }  
   private void operationFirst(){ } //在调用父类的operation方法之前需要执行的操作  
   private void operationLast(){ } //在调用父类的operation方法之后需要执行的操作  
   public void operation() {  
       //调用父类的方法，可以在调用前后执行一些附加动作  
       operationFirst(); //添加的功能  
       super.operation();  //这里可以选择性的调用父类的方法，如果不调用则相当于完全改写了方法，实现了新的功能  
       operationLast(); //添加的功能  
    }  
}  
</code></pre>

<p>(5) 客户端使用装饰器的代码</p>

<pre><code>public class Client{  
    public static void main(String[] args){  
    Component c1 = new ConcreteComponent (); //首先创建需要被装饰的原始对象(即要被装饰的对象)  
    Decorator decoratorA = new ConcreteDecoratorA(c1); //给对象透明的增加功能A并调用  
    decoratorA .operation();  
    Decorator decoratorB = new ConcreteDecoratorB(c1); //给对象透明的增加功能B并调用  
    decoratorB .operation();  
    Decorator decoratorBandA = new ConcreteDecoratorB(decoratorA);//装饰器也可以装饰具体的装饰对象，此时相当于给对象在增加A的功能基础上在添加功能B  
    decoratorBandA.operation();  
    }  
}  
</code></pre>

<p>3.小结</p>

<p>Java中的IO是明显的装饰器模式的运用。FilterInputStream，FilterOutputStream，FilterRead，FilterWriter分别为具体装饰器的父类，相当于Decorator类，它们分别实现了InputStream，OutputStream，Reader，Writer类(这些类相当于Component，是其他组件类的父类，也是Decorator类的父类)。继承自InputStream，OutputStream，Reader，Writer这四个类的其他类是具体的组件类，每个都有相应的功能，相当于ConcreteComponent类。而继承自FilterInputStream，FilterOutputStream，FilterRead，FilterWriter这四个类的其他类就是具体的装饰器对象类，即ConcreteDecorator类。通过这些装饰器类，可以给我们提供更加具体的有用的功能。如FileInputStream是InputStream的一个子类，从文件中读取数据流，BufferedInputStream是继承自FilterInputStream的具体的装饰器类，该类提供一个内存的缓冲区类保存输入流中的数据。我们使用如下的代码来使用BufferedInputStream装饰FileInputStream，就可以提供一个内存缓冲区来保存从文件中读取的输入流。</p>

<p>BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file)); //其中file为某个具体文件的File或者FileDescription对象</p>

<pre><code>在以下两种情况下可以考虑使用装饰器模式：

(1)需要在不影响其他对象的情况下，以动态、透明的方式给对象添加职责。

(2)如果不适合使用子类来进行扩展的时候，可以考虑使用装饰器模式。
</code></pre>

<p>参考文档：<a href="http://www.cnblogs.com/chenying99/archive/2012/10/05/2712524.html">http://www.cnblogs.com/chenying99/archive/2012/10/05/2712524.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：适配器（Adapter）in Java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/30/adapter-in-java/"/>
    <updated>2012-10-30T21:24:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/30/adapter-in-java</id>
    <content type="html"><![CDATA[<p><strong>类适配器</strong>:客户的开发人员定义了一个接口，期望用这个接口来完成整数的求和操作，接口定义如下：   <br/>
Java代码</p>

<pre><code>public interface Operation{  
    public int add(int a,int b);  
}  
</code></pre>

<p>开发人员在了解这个接口的定义后，发现一个第三方类，里面有一个方法能实现他们期望的功能，其代码如下：  <br/>
Java代码</p>

<pre><code>public class OtherOperation{  
    public int otherAdd(int a,int b){  
        return a + b;  
    }  
}  
</code></pre>

<!--more-->


<p>以上第三方类OtherOperation的方法public int otherAdd(int a,int b)所提供的功能，完全能符合客户的期望，所以只需要想办法把OtherOperation的otherAdd(int a,int b)和客户的Operation接口联系起来，让这个第三方类来为客户提供他们期望的服务就行了，这样就避免了开发人员再度去研究类似OtherOperation的otherAdd(int a,int b)方法的实现（利用已有的轮子，避免重复发明），这方法之一，就是用适配器模式： <br/>
Java代码</p>

<pre><code>public class AdapterOperation extends OtherOperation implements Operation{  
    public int add(int a,int b){  
       return otherAdd(a,b);  
     }  
}  
</code></pre>

<p>以上就是适配器的实现方法之一，<strong>类适配器</strong>，在以上实现中存在着三中角色分别是：  <br/>
1：适配目标角色：Operation。<br/>
2：适配类（原）角色：OtherOperation。<br/>
3：适配器角色：AdapterOperation。<br/>
其中适配器角色是适配器模式的核心。
适配器的主要工作就是通过封装现有的功能，使他满足需要的接口。</p>

<p><strong>对象适配器</strong><br/>
我们再来看看另一种情况：
假如客户接口期望的功能不止一个，而是多个： <br/>
Java代码</p>

<pre><code>public interface Operation{  
    public int add(int a,int b);  
    public int minus(int a,int b);  
    public int multiplied(int a,int b);  
}  
</code></pre>

<p>而能提供这些实现的原可能不止一个： <br/>
Java代码</p>

<pre><code>public class OtherAdd{  
    public int otherAdd(int a,int b){  
         return a + b;  
    }  
}  

public class OtherMinus{  
    public int minus(int a,int b){  
       return a - b;  
    }  
}  

public class OtherMultiplied{  
    public int multiplied(int a,int b){  
       return a * b;  
    }  
}  
</code></pre>

<p>由于java是不能实现多继承的，所以我们不能通过构建一个适配器，让他来继承所有原以完成我们的期望，这时候怎么办呢?只能用适配器的另一种实现--对象适配器：<br/>
Java代码</p>

<pre><code>public class AdapterOperation implements Operation{  
    private OtherAdd add;  
    private OtherMinus minus;  
    private OtherMultiplied multiplied;  

    public void setAdd(OtherAdd add){  
        this.add = add;  
    }  

    public void setMinus(OtherMinus minus){  
        this.minus = minus;  
    }  

    public void setMultiplied(OtherMultiplied multiplied){  
        this.multiplied = multiplied;  
    }  

    //适配加法运算  
    public int add(int a,int b){  
       return add.otherAdd(a,b);  
    }  

    //适配减法运算  
    public int minus(int a,int b){  
      return minus.minus(a,b);  
    }  

    //适配乘法运算  
    public int multiplied(int a,int b){  
     return multiplied.multiplied(a,b);  
    }  
}  
</code></pre>

<p>上面代码很明显，适配器并不是通过继承来获取适配类（原）的功能的，而是通过适配类的对象来获取的，这就解决了java不能多继承所带来的不便了。这也是java提倡的编程思想之一，即尽量使用聚合不要使用继承。<br/>
还有一种情况是需要使用对象适配器的。我们来看看，
单我们的客户提供的需求并不是一个明确的接口，而是一个类，并没有定义期望的方法，如下 <br/>
Java代码</p>

<pre><code>public class A{  
    public int add(int a,int b){  
        return a + b;  
    }  
}  
</code></pre>

<p>现在客户要一个新类B，要求能在保留类A功能的情况下增加一个运算减法的功能，并要求B能随时替换掉A但不能对已有系统造成影响。这样我们只能新建一个类B，并让B继承A。 <br/>
Java代码</p>

<pre><code>public class B extends A{  
    B(){  
        super();  
        }  

    public int minus(int a,int b){  
       //待实现的减法运算函数..  
    }  
}  
</code></pre>

<p>这时候，我们发现类C已经提供了实现减法的函数，    <br/>
Java代码</p>

<pre><code>public class C{  
    public int minus(int a,int b){  
       return a - b;  
    }  
}  
</code></pre>

<p>为了避免重复去设计该函数，我们决定引入C类，通过适配C类来达到我们的期望，但问题是A和C都是一个具体类，我们无法让B同时继承这个两个类，而B继承A又是必须的，所以我们只能考虑把C给内聚到B内部，对象适配器又得派上用场了。<br/>
Java代码</p>

<pre><code>public class B extends A{  
    private C c;  

    B(){  
        super();  
        }  

    public void setMinus(C c){  
        this.c= c;  
    }  

    public int minus(int a,int b){  
       return c.minus(a,b);  
    }  
}  
</code></pre>

<p>这样，在需要A类的地方都能用B类来代替，同时又保证了新的功能的引入。</p>

<p>更灵活的实现--<strong>隐藏目标接口的抽象适配器</strong></p>

<p>做java 桌面应用的都知道WindowListener接口， <br/>
Java代码</p>

<pre><code>public interface WindowListener extends EventListener{  
     public void windowActivated(WindowEvent e)；  
     public void windowClosed(WindowEvent e)；  
     public void windowClosing(WindowEvent e)；  
     public void windowDeactivated(WindowEvent e)；  
     public void windowDeiconified(WindowEvent e)；  
     public void windowIconified(WindowEvent e)；  
     public void windowOpened(WindowEvent e)；  
}  
</code></pre>

<p>要实现这个接口，我们就必须实现它所定义的所有方法，但是实际上，我们很少需要同时用到所有的方法，我们要的只是其中的两三个。为了不使我们实现多余的方法，     <br/>
jdk WindowListener提供了一个WindowListener的默认实现类WindowAdapter类，这是一个抽象类， <br/>
Java代码</p>

<pre><code>public abstract class WindowAdapter implements WindowListener{  
    public void windowActivated(WindowEvent e){}  
    public void windowClosed(WindowEvent e){}  
    public void windowClosing(WindowEvent e){}  
    public void windowDeactivated(WindowEvent e){}  
    public void windowDeiconified(WindowEvent e){}  
    public void windowIconified(WindowEvent e){}  
    public void windowOpened(WindowEvent e){}  
}  
</code></pre>

<p>WindowAdapter类对WindowListener接口的所有有方法都提供了空实现，
有了WindowAdapter类，我们只需要去继承WindowAdapter，然后选择我们所关心的方法来实现就行了，这样就避免了直接去实现WindowListener接口。</p>

<p>参考文献：<a href="http://chjl2020.iteye.com/blog/262370">http://chjl2020.iteye.com/blog/262370</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[23个经典JDK设计模式]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/22/design-pattern-in-jdk-index/"/>
    <updated>2012-10-22T20:49:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/22/design-pattern-in-jdk-index</id>
    <content type="html"><![CDATA[<p>下面是JDK中有关23个经典设计模式的示例：</p>

<!--more-->


<h2>Structural（结构模式）</h2>

<p><strong>Adapter:</strong></p>

<p>把一个接口或是类变成另外一种。</p>

<p>● java.util.Arrays#asList()<br/>
● javax.swing.JTable(TableModel)<br/>
● java.io.InputStreamReader(InputStream) <br/>
● java.io.OutputStreamWriter(OutputStream) <br/>
● javax.xml.bind.annotation.adapters.XmlAdapter#marshal()<br/>
● javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal()</p>

<p><strong>Bridge:</strong></p>

<p>把抽象和实现解藕，于是接口和实现可在完全独立开来。</p>

<p>● AWT (提供了抽象层映射于实际的操作系统)<br/>
● JDBC</p>

<p><strong>Composite:</strong></p>

<p>让使用者把单独的对象和组合对象混用。</p>

<p>● javax.swing.JComponent#add(Component) <br/>
● java.awt.Container#add(Component) <br/>
● java.util.Map#putAll(Map) <br/>
● java.util.List#addAll(Collection) <br/>
● java.util.Set#addAll(Collection)</p>

<p><strong>Decorator:</strong></p>

<p>为一个对象动态的加上一系列的动作，而不需要因为这些动作的不同而产生大量的继承类。这个模式在JDK中几乎无处不在，所以，下面的列表只是一些典型的。</p>

<p>● java.io.BufferedInputStream(InputStream) <br/>
● java.io.DataInputStream(InputStream) <br/>
● java.io.BufferedOutputStream(OutputStream) <br/>
● java.util.zip.ZipOutputStream(OutputStream) <br/>
● java.util.Collections#checked[List|Map|Set|SortedSet|SortedMap]()</p>

<p><strong>Facade:</strong></p>

<p>用一个简单的接口包状一组组件，接口，抽象或是子系统。</p>

<p>● java.lang.Class <br/>
● javax.faces.webapp.FacesServlet</p>

<p><strong>Flyweight:</strong></p>

<p>有效率地存储大量的小的对象。</p>

<p>● java.lang.Integer#valueOf(int) <br/>
● java.lang.Boolean#valueOf(boolean) <br/>
● java.lang.Byte#valueOf(byte) <br/>
● java.lang.Character#valueOf(char)</p>

<p><strong>Proxy:</strong></p>

<p>用一个简单的对象来代替一个复杂的对象。</p>

<p>● java.lang.reflect.Proxy <br/>
● RMI</p>

<h2>Creational（创建模式）</h2>

<p><strong>Abstract factory:</strong></p>

<p>创建一组有关联的对象实例。这个模式在JDK中也是相当的常见，还有很多的framework例如Spring。我们很容易找到这样的实例。</p>

<p>● java.util.Calendar#getInstance()  <br/>
● java.util.Arrays#asList() <br/>
● java.util.ResourceBundle#getBundle() <br/>
● java.sql.DriverManager#getConnection() <br/>
● java.sql.Connection#createStatement() <br/>
● java.sql.Statement#executeQuery() <br/>
● java.text.NumberFormat#getInstance() <br/>
● javax.xml.transform.TransformerFactory#newInstance()</p>

<p><strong>Builder:</strong></p>

<p>主要用来简化一个复杂的对象的创建。这个模式也可以用来实现一个 Fluent Interface。</p>

<p>● java.lang.StringBuilder#append() <br/>
● java.lang.StringBuffer#append() <br/>
● java.sql.PreparedStatement <br/>
● javax.swing.GroupLayout.Group#addComponent()</p>

<p><strong>Factory:</strong></p>

<p>简单来说，按照需求返回一个类型的实例。</p>

<p>● java.lang.Proxy#newProxyInstance() <br/>
● java.lang.Object#toString() <br/>
● java.lang.Class#newInstance() <br/>
● java.lang.reflect.Array#newInstance() <br/>
● java.lang.reflect.Constructor#newInstance() <br/>
● java.lang.Boolean#valueOf(String) <br/>
● java.lang.Class#forName()</p>

<p><strong>Prototype:</strong></p>

<p>使用自己的实例创建另一个实例。有时候，创建一个实例然后再把已有实例的值拷贝过去，是一个很复杂的动作。所以，使用这个模式可以避免这样的复杂性。</p>

<p>● java.lang.Object#clone() <br/>
● java.lang.Cloneable</p>

<p><strong>Singleton:</strong></p>

<p>只允许一个实例。在 Effective Java中建议使用Emun.</p>

<p>● java.lang.Runtime#getRuntime() <br/>
● java.awt.Toolkit#getDefaultToolkit() <br/>
● java.awt.GraphicsEnvironment#getLocalGraphicsEnvironment() <br/>
● java.awt.Desktop#getDesktop()</p>

<h2>Behavioral(行为模式)</h2>

<p><strong>Chain of responsibility:</strong></p>

<p>把一个对象在一个链接传递直到被处理。在这个链上的所有的对象有相同的接口（抽象类）但却有不同的实现。</p>

<p>● java.util.logging.Logger#log() <br/>
● javax.servlet.Filter#doFilter()</p>

<p><strong>Command:</strong></p>

<p>把一个或一些命令封装到一个对象中。</p>

<p>● java.lang.Runnable <br/>
● javax.swing.Action</p>

<p><strong>Interpreter:</strong></p>

<p>一个语法解释器的模式。</p>

<p>● java.util.Pattern  <br/>
● java.text.Normalizer <br/>
● java.text.Format</p>

<p><strong>Iterator:</strong></p>

<p>提供一种一致的方法来顺序遍历一个容器中的所有元素。</p>

<p>● java.util.Iterator <br/>
● java.util.Enumeration</p>

<p><strong>Mediator:</strong></p>

<p>用来减少对象单的直接通讯的依赖关系。使用一个中间类来管理消息的方向。</p>

<p>● java.util.Timer <br/>
● java.util.concurrent.Executor#execute() <br/>
● java.util.concurrent.ExecutorService#submit() <br/>
● java.lang.reflect.Method#invoke()</p>

<p><strong>Memento:</strong></p>

<p>给一个对象的状态做一个快照。Date类在内部使用了一个long型来做这个快照。</p>

<p>● java.util.Date <br/>
● java.io.Serializable</p>

<p><strong>Null Object:</strong></p>

<p>这个模式用来解决如果一个Collection中没有元素的情况。</p>

<p>● java.util.Collections#emptyList() <br/>
● java.util.Collections#emptyMap() <br/>
● java.util.Collections#emptySet()</p>

<p><strong>Observer:</strong></p>

<p>允许一个对象向所有的侦听的对象广播自己的消息或事件。</p>

<p>● java.util.EventListener <br/>
● javax.servlet.http.HttpSessionBindingListener <br/>
● javax.servlet.http.HttpSessionAttributeListener <br/>
● javax.faces.event.PhaseListener</p>

<p><strong>State:</strong></p>

<p>这个模式允许你可以在运行时很容易地根据自身内部的状态改变对象的行为。</p>

<p>● java.util.Iterator <br/>
● javax.faces.lifecycle.LifeCycle#execute()</p>

<p><strong>Strategy:</strong></p>

<p>定义一组算法，并把其封装到一个对象中。然后在运行时，可以灵活的使用其中的一个算法。</p>

<p>● java.util.Comparator#compare() <br/>
● javax.servlet.http.HttpServlet <br/>
● javax.servlet.Filter#doFilter()</p>

<p><strong>Template method:</strong></p>

<p>允许子类重载部分父类而不需要完全重写。</p>

<p>● java.util.Collections#sort() <br/>
● java.io.InputStream#skip() <br/>
● java.io.InputStream#read() <br/>
● java.util.AbstractList#indexOf()</p>

<p><strong>Visitor:</strong></p>

<p>作用于某个对象群中各个对象的操作. 它可以使你在不改变这些对象本身的情况下,定义作用于这些对象的新操作.</p>

<p>● javax.lang.model.element.Element 和javax.lang.model.element.ElementVisitor <br/>
● javax.lang.model.type.TypeMirror 和javax.lang.model.type.TypeVisitor</p>

<p>在stakeoverflow也有相应的讨论：</p>

<p><a href="http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns">http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns</a></p>

<p>摘自：<a href="http://www.csdn.net/article/2010-11-29/282644">http://www.csdn.net/article/2010-11-29/282644</a></p>
]]></content>
  </entry>
  
</feed>
