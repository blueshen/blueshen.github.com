<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：设计模式 | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/blog/categories/设计模式/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2014-11-11T19:41:29+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《重构与模式》读书笔记]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/06/28/refactoring-to-patterns-reading-notes/"/>
    <updated>2013-06-28T13:53:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/06/28/refactoring-to-patterns-reading-notes</id>
    <content type="html"><![CDATA[<p>GoF的《设计模式》以及Martin Fowler的《重构》都是经典。而《重构与模式》则是将二者结合起来。通过设计模式来指导重构，而重构的目的就是让代码更加的简单，易于维护和扩展。</p>

<h3>写作缘由</h3>

<ul>
<li>过度设计：代码存在设计过度的情况</li>
<li>模式万灵丹：认为设计模式的万能的</li>
<li>设计不足：类比与过度设计，长期设计不足，导致开发节奏“快、慢、更慢”</li>
<li>测试驱动开发和持续重构：敏捷开发中，Kent Beck说开发过程是“红-绿-重构”</li>
<li>重构与模式：模式有助于改进设计，通过重构实现模式或者趋向模式进行重构</li>
<li>演进式设计：将模式放到重构的背景中进行领会</li>
</ul>


<h3>什么是重构</h3>

<p>定义：重构是一种对软件内部结构的改善，目的是在不改变软件的可见行为的情况下，使其更易理解，修改成本更低。 <br/>
重构过程包括去除重复、简化复杂逻辑和澄清模糊的代码。要保证重构的安全性，必须确保所做的修改不会产生任何破坏，这需要进行手工测试或者自动化测试。循序渐进的进行重构有处于防止增加缺陷。</p>

<p>重构的动机：</p>

<ul>
<li>使新代码的增加更容易</li>
<li>改善既有代码的设计</li>
<li>对代码理解更透彻</li>
<li>提高编程的趣味性</li>
</ul>


<!--more-->


<h3>什么是模式</h3>

<p>GoF的《设计模式》是在软件开发中总结出来的用于解决不同场景下的软件开发模式。但是不应该陷入模式痴迷，应保证代码的可读性。 <br/>
应该知道实现模式的方法不止一种，通过重构是为了实现、趋向和去除模式。通常情况下模式不会使代码更加复杂，实现模式有助于去除重复代码、简化逻辑、说明意图和提高灵活性，但是这也取决于人们对模式的熟悉程度。</p>

<h3>代码坏味</h3>

<ul>
<li><p>1.重复代码（Duplicated Code）</p>

<blockquote><p>形成Template Method;用Factory Method引入多态创建；链构造函数；用Composite替换一/多之分；提取Composite；通过Adapter统一接口；引入Null Object；</p></blockquote></li>
<li><p>2.过长函数（Long Method）：</p>

<blockquote><p>组合方法；将聚集操作搬移到Collecting Parameter；用Command替换条件调度程序；将聚集操作搬移到Visitor；用Strategy替换条件逻辑；</p></blockquote></li>
<li><p>3.条件逻辑太复杂（Conditional Complexity）：</p>

<blockquote><p>用Strategy替换条件逻辑；将装饰功能搬移到Decorator;用State替换状态改变条件语句；引入Null Object;</p></blockquote></li>
<li><p>4.基本类型偏执（Primitive Obsession）:</p>

<blockquote><p>用类替换类型代码；用State替换状态改变条件语句；用Strategy替换条件逻辑；用Composite替换隐含树；用Interpreter替换隐式语言；将装饰功能搬移到Decorator；用Builder封装Composite。</p></blockquote></li>
<li><p>5.不恰当的暴露（Indecent Exposure）：</p>

<blockquote><p>用Factory封装类；</p></blockquote></li>
<li><p>6.解决方案蔓延（Solution Sprawl）：</p>

<blockquote><p>将创建知识搬移到Factory；</p></blockquote></li>
<li><p>7.异曲同工的类（Alternative Classes With Different Interfaces）：</p>

<blockquote><p>通过Adapter统一接口；</p></blockquote></li>
<li><p>8.冗赘类（Lazy Class）：</p>

<blockquote><p>内联Singeton；</p></blockquote></li>
<li>9.过大的类（Large Class）：

<blockquote><p>用Command替换条件调度程序；用State替换状态改变条件语句；用Interpreter替换隐式语言；</p></blockquote></li>
<li>10.分支语句（Switch Statement）：

<blockquote><p>用Command替换条件调度程序；将聚集操作搬移到Visitor；</p></blockquote></li>
<li>11.组合爆炸（Combinatorial Explosion）：

<blockquote><p>用Interpreter替换隐式语言；</p></blockquote></li>
<li>12.怪异解决方案（Oddball Solution）：

<blockquote><p>通过Adapter统一接口；</p></blockquote></li>
</ul>


<h3>创建</h3>

<h4>用Creation Method替换构造函数</h4>

<p>如果类中有多个构造函数，那么客户代码就可能不知道该调用哪一个。这个时候，可以使用能够说明意图的返回对象实例的Creation Method来替换构造函数。 <br/>
优缺点：<br/>
+比构造函数能够更好的表达所创建的实例的种类。 <br/>
+避免了构造函数的局限，比如2个构造函数的参数数目和类型不能相同。 <br/>
+更容易发现无用的创建代码。 <br/>
-创建方式是非标准的：有些是用new初始化，有的是用Creation Method实例化。</p>

<h4>将创建知识搬移到Factory</h4>

<p>当创建一个对象的知识散布在多个类中，说明出现了创建蔓延的问题。应该将有关的创建知识搬移到一个Factory类中。  <br/>
优缺点： <br/>
+合并创建逻辑和实例化/配置选项。 <br/>
+将客户代码与创建逻辑解耦。  <br/>
-如果可以直接实例化，会使设计复杂化。</p>

<h4>用Factory封装类</h4>

<p>如果在同一个包结构中，有实现了同一接口的多个类。可以把类的构造函数声明为非公共的，并通过Factory来创建它们的实例。 <br/>
优缺点： <br/>
+通过意图导向的CreationMethod简化了不同种类实例的创建。  <br/>
+通过隐藏不需要公开的类减少了包结构的“概念重量”  <br/>
+帮助严格执行“面向接口编程，而不是面向实现”这一格言。  <br/>
-当需要创建新种类的实例时，必须新建/更新Creation Method。<br/>
-当客户只获得Factory的二进制代码而无法获得源代码时，对Factory的制定将受到限制。</p>

<h4>用Factory Method引入多态创建</h4>

<p>一个层次中的类都相似的实现一个方法，只是对象创建的步骤不同。可以调用Factory Method来处理实例化的方法的唯一超类版本。 <br/>
优缺点： <br/>
+减少因创建自定义对象而产生的重复代码  <br/>
+有效的表达了对象创建发生的位置，以及如何重写对象的创建。 <br/>
+强制Factory Method使用的类必须实现统一的类型。 <br/>
-可能会向Factory Method的一些实现者传递不必要的参数。</p>

<h4>用Builder封装Composite</h4>

<p>构造Composite是重复的、复杂的且容易出错的工作。通过使用Builder处理构造细节来简化构造过程。 <br/>
优缺点： <br/>
+简化了构造Composite的客户代码。 <br/>
+减少了创建Composite的重复和易出错的本性。<br/>
+在客户代码和Composite之间实现了松耦合。 <br/>
-接口可能不会很清楚的表达其意图。</p>

<h4>内联Singleton</h4>

<p>绝大多数时候，Singleton都是不需要的。当可以设计或重新设计而避免使用它们的时候，Singleton就是不必要的。可以考虑把Singleton的功能搬移到一个保存并提供对象访问入口的类中，并删除Singleton。 <br/>
优缺点： <br/>
+使对象的协作变得更明显和明确。 <br/>
+保护了单一的实例，且不要要特殊的代码。 <br/>
-当在许多层次间传递对象实例比较困难的时候，会使设计变得复杂。</p>

<h3>简化</h3>

<h4>组合方法</h4>

<p>一个方法逻辑很难理解的时候，就要考虑进行重构。提高每一步骤的可读性。 <br/>
优缺点：  <br/>
+清晰的描述了一个方法所实现的功能以及如何实现。 <br/>
+把方法分解成命名良好的，处在细节的同一层面的行为模块，以此来简化方法。 <br/>
-可能会产生过多的小方法。 <br/>
-可能会使调试变得困难，因为程序的逻辑分散在许多小方法中。</p>

<h4>用Strategy替换条件逻辑</h4>

<p>当一个方法的条件逻辑太多太复杂的时候，考虑使用Strategy模式来为每个分支创建一个Strategy。  <br/>
优缺点： <br/>
+通过减少或去除条件逻辑使算法变得清晰易懂。 <br/>
+通过把算法的变体搬移到类层次中简化了类。 <br/>
+允许在运行时用一种算法替换另一种算法。 <br/>
-当应用基于继承的解决方案或“简化条件表达式”中的重构更简单时，会增加设计的复杂度。 <br/>
-增加了算法如何获取或接受上下文类的数据的复杂度。</p>

<h4>将装饰功能搬移到Decorator</h4>

<p>如果需要对一个功能进行增强，那增强的部分就称为装饰功能了。如果直接改代码那是不好的，考虑使用Decorator模式吧。把这个装饰功能放到装饰器内部。 <br/>
优缺点： <br/>
+把装饰功能从类中搬移去除，从而简化了类。 <br/>
+有效地把类的核心职责和装饰功能区分开来。 <br/>
+可以去除几个相关类中重复的装饰逻辑。 <br/>
-改变了被装饰对象的对象类型。 <br/>
-会使代码变得更难理解和调适。 <br/>
-当Decorator组合产生负面影响的时候，会增加设计的复杂度。</p>

<h4>用State替换状态改变条件语句</h4>

<p>如果控制一个对象状态转换的条件表达式过于复杂，那么就使用State模式吧。 <br/>
优缺点： <br/>
+减少或去除状态改变条件逻辑。<br/>
+简化了复杂的状态改变逻辑。 <br/>
+提供了观察状态改变逻辑的很好的鸟瞰图。<br/>
-当状态转换逻辑已经易于理解的时候，会增加设计的复杂度。</p>

<h4>用Composite替换隐含树</h4>

<p>有一些逻辑用原生表示法隐含的形成了树结构。可以使用Composite来进行重构。 <br/>
优缺点： <br/>
+封装重复的指令，如格式化、添加或删除结点。 <br/>
+提供了处理相似逻辑增长的一般性方法。 <br/>
+简化了客户代码的构造职责。  <br/>
-当构造隐式树更简单的时候，会增加设计的复杂度。</p>

<h4>用Command替换条件调度程序</h4>

<p>许多系统会收到，发送并处理请求。条件调度程序是一条条条件语句，它用来执行请求的发送和处理。可以使用Command模式来实现。  <br/>
优缺点： <br/>
+提供了用统一方法执行不同行为的简单机制。 <br/>
+允许在运行时改变所处理的请求，以及如何处理请求。 <br/>
+仅仅需要很少的代码实现。 <br/>
-当条件调度程序已经足够的时候，会增加设计的复杂度。</p>

<h3>泛化</h3>

<h4>形成Template Method</h4>

<p>借助Template设计模式，将算法的不变部分全部由父类实现，而可变的行为留给子类来实现。去掉所有子类的不变部分，如果仍有共同的部分，则继续重构。  <br/>
优点与缺点： <br/>
+通过把不变行为搬移到超类，去除子类中的重复代码  <br/>
+简化并有效地表达了一个通用算法的步骤。 <br/>
+允许子类很容易的定制一个算法  <br/>
-当为了生成算法、子类必须实现很多方法的时候，会增加设计的复杂度。</p>

<h4>提取Composite</h4>

<p>在处于同一层次的子类中，如果存在完全重复的方法或者部分重复的方法，就可以考虑将这个方法上移到超类。完全重复的方法，直接提取上移。对于部分重复的方法，可以先提取出重复的部分，然后上移。  <br/>
优缺点： <br/>
+去除重复的类存储逻辑和类处理逻辑。  <br/>
+能够有效的表达类处理逻辑的可继承性。</p>

<h4>用Composite替换一/多之分</h4>

<p>这个名字，翻译的貌似有点问题。不知道原文是如何写的。简单说，它处理了以下问题： <br/>
如果一个类含有2个几乎一样的方法，唯一的区别就是一个用来处理单一对象，一个用来处理对象的集合。那么这个就称为一/多之分。这个时候，我们可以使用Composite进行替换。  <br/>
使用Composite扩展出And，Or等条件，简化客户端的处理。  <br/>
优缺点： <br/>
+去除与处理一个或多个对象相关联的重复代码。 <br/>
+提供了处理一个或多个对象的同一方法。 <br/>
+支持处理多个对象的更丰富的方法。（如OR表达式） <br/>
-可能会在Composite的构造过程中要求类型安全的运行时检查。</p>

<h4>用Observer替换硬编码的通知</h4>

<p>拒绝使用硬编码的通知，考虑使用Observer模式。 <br/>
优缺点： <br/>
+使主题及其观察者访问松散耦合 <br/>
+支持一个或多个观察者  <br/>
-当硬编码的通知已经足够的时候，会增加设计复杂度  <br/>
-当出现串联通知的时候，会增加代码的复杂度      <br/>
-当观察者没有从他们的主题中被删除的时候，可能会造成内存泄漏。</p>

<h4>通过Adapter统一接口</h4>

<p>全部满足以下条件，考虑使用Adapter:</p>

<ul>
<li>2个类所做的事情相同或者相似，但是具有不同的接口。</li>
<li>如果类共享同一个接口，客户代码会更简单、更直接、更紧凑。</li>
<li>无法轻易改变其中一个类的接口，因为它是第三方类库的一部分，或者它是一个已经被其他客户代码广泛使用的框架的一部分，或者无法获得源代码。</li>
</ul>


<p>比如slf4j，就是通过各种Adapter实现了各种日志系统的大一统，并提供统一的接口。 <br/>
优缺点： <br/>
+使得客户代码可以通过相同的接口与不同的类交互，从而去除或减少了重复代码。 <br/>
+使客户代码可以通过公共的接口与多个对象交互，从而简化了客户代码。  <br/>
+统一了客户代码与不同的类的交互方式。  <br/>
-当类的接口可以改变的时候，会增加设计的复杂度。</p>

<h4>提取Adapter</h4>

<p>当一个类适配了多个版本的组件，类库，API或其他实体。这个时候，应该为组件，类库，API或其他实体的每个版本提取一个Adapter。  <br/>
优缺点：<br/>
+隔离了不同版本的组件，类库或API之间的不同之处。 <br/>
+使类只负责适配代码的一个版本。  <br/>
+避免频繁地修改代码   <br/>
-如果某个重要行为在Adapter中不可用的话，那么客户代码将无法执行这一重要行为。</p>

<h4>用Interpreter替换隐式语言</h4>

<p>在前面“用Composite替换一/多之分”部分，提到了使用Composite的问题。但是使用了Composite后，是需要对Composite进行翻译的。否则是不知道如何查询的。  <br/>
优缺点： <br/>
+比隐式语言更好的支持语言元素的组合。 <br/>
+不需要新的代码来支持语言元素的新组合。<br/>
+允许行为的运行时配置。
-会产生定义语法和修改客户代码的开销。 <br/>
-如果语言很复杂，则需要很多的编程工作。 <br/>
-如果语言本身就很简单，则会增加设计的复杂度。</p>

<h3>保护</h3>

<h4>用类替换类型代码</h4>

<p>字段的类型（如，String或int）无法保护它免受不正确的赋值和非法的等同性比较。使用类进行替代，从而可以限制赋值和等同性比较。  <br/>
优缺点：  <br/>
+更好的避免非法赋值和比较。  <br/>
-比使用不安全类型要求更多的代码。</p>

<h4>用Singleton限制实例化</h4>

<p>有时间，遇到创建了一个对象的多个实例，导致内存使用过多和系统性能下降。可以使用单例模式。慎用。 <br/>
优缺点：  <br/>
+改进性能。  <br/>
-从任何地方都可以很容易的访问。在很多情况下，这可能是设计的缺点。 <br/>
-当对象含有不能共享的状态的时候，本重构就无效了。</p>

<h4>引入Null Object</h4>

<p>代码中到处都是处理null字段或变量的重复逻辑。而使用Null Object可以进行改善。  <br/>
优缺点：   <br/>
+不需要重复的null逻辑就可以避免null错误。 <br/>
+通过最小化null测试简化了代码。  <br/>
-当系统不太需要null测试的时候，会增加设计的复杂度。 <br/>
-如果程序员不知道Null Object的存在，就会产生多余的null测试。 <br/>
-使维护变得复杂。拥有超类的Null Object必须重写所有新继承到的公共方法。</p>

<h3>聚集操作</h3>

<h4>将聚集操作搬移到Collecting Parameter</h4>

<p>有一个很大的方法将信息聚集到一个局部变量中，那么可以把结果聚集到一个Collecting Parameter中，将它传入被提炼出的方法。  <br/>
优缺点：   <br/>
+帮助我们把很大的方法转换成更小的，更简单的多个方法。  <br/>
-使结果代码运行得更快。</p>

<h4>将聚集操作搬移到Visitor</h4>

<p>如果一个方法需要从不同的类中聚集信息，可以考虑把聚集工作搬移到一个能够访问每个类以便聚集信息的Visitor中。   <br/>
优缺点：  <br/>
+调节多个算法，使其适用于不同的对象结构。 <br/>
+访问相同或不同继承结构中的类。 <br/>
+调用不同类上的类型特定方法，无需类型转换。  <br/>
-当可以使用通用接口把互不相同的类变成相似类的时候，会增加代码的复杂度。  <br/>
-新的可访问类需要新的接受方法，每个Visitor中需要新的访问方法。  <br/>
-可能会破坏被访问类的封装性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：观察者（Observer） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/observer-in-java/"/>
    <updated>2012-11-08T18:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/observer-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>又叫发布订阅模式（Publish/subscribe），它定义了对象间的一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。</p>

<blockquote><p>这个定义还是比较通俗易懂的。我看了一遍，发现这不就是微博吗？我发布一条微博，那么所有关注我的人，都会收到通知，然后在新鲜事里显示出来。没错，就是这样！</p></blockquote>

<p>观察者模式有4个角色：</p>

<ul>
<li>被观察者(Observable):<br/>
定义被观察者必须实现的职责，动态的增加、删除观察者以及通知观察者</li>
<li>观察者（Observer）: <br/>
接收到消息后，进行更新操作</li>
<li>被观察者(Observable)具体类:<br/>
定义自己的业务逻辑，并定义哪儿些事件需要通知观察者</li>
<li>观察者（Observer）具体类：   <br/>
每个观察者在接收到消息后的更新操作是不同的。</li>
</ul>


<!--more-->


<p>在Java中如何实现观察者模式呢？废话，写代码啊！这个我自然知道，更令人惊喜的是JDK自身就提供了对观察者模式的原生支持，我不得不赞叹Java的强大。</p>

<p>Java提供了这样的两个东西：</p>

<ul>
<li>类<code>java.util.Observable</code>：<br/>
它内部维护了一个Vector容器，用来放所有的观察者，并且提供了添加、删除观察者的方法。此外，定义了notifyObservers方法，用来通知观察者。</li>
<li>接口<code>java.util.Observer</code>：
它定义了一个update方法，让Observer具体类来实现各自的操作。</li>
</ul>


<p>下面，就以微博作为例子吧。<br/>
先来一个被观察者，也就是我自己了。</p>

<pre><code>public class ShenYanChao extends Observable {

    //业务逻辑,不通知
    public String getName(){
        return "shenyanchao";
    }
    //发微博，通知
    public void publishWeibo(String content){
        System.out.println("我发布1条微博，內容是：["+content+"]");
        setChanged();
        notifyObservers(content);
    }
}
</code></pre>

<p>其中，setChanged()用来表明自身的状态变了，否则观察者是不会理的。这个是JDK的限制，其实观察者模式可以不用这个的。</p>

<p>下面就需要定义观察者了，也就是我的粉丝了。</p>

<pre><code>public class Fans implements Observer {

    @Override
    public void update(Observable o, Object content) {
        String who = ((ShenYanChao) o).getName();
        System.out.println("新鲜事:{" + who + "发布了一条微博，内容是：[" + content + "]}");
    }

}
</code></pre>

<p>观察者Fans一旦发现我发了1条微博，那么他就会出现一条新鲜事的了。update()的参数，第1个是被观察者，也就是我；第2个就是notifyObservers传过来的参数了，此处是微博内容。</p>

<p>具体场景是这样的：</p>

<pre><code>ShenYanChao shenyanchao = new ShenYanChao();
final int FANS_NUM = 10;//我的粉丝可不止这些呢
for (int i = 0; i &lt; FANS_NUM; i++) {
    shenyanchao.addObserver(new Fans());
}
shenyanchao.publishWeibo("欢迎登录：www.shenyanchao.cn");
</code></pre>

<p>此处模拟，我有10个粉丝，然后我发了1条微博。结果如下：</p>

<pre><code>我发布1条微博，內容是：[欢迎登录：www.shenyanchao.cn]
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
</code></pre>

<p>可见，一旦我发了微博，所有的观察者（Fans）都收到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：迭代器（Iterator） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/iterator-in-java/"/>
    <updated>2012-11-08T16:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/iterator-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>迭代器模式提供了一种方法来访问一个容器对象种的各个元素，而又不暴露这个对象的内部细节。</p>

<blockquote><p>在Java中已经默认提供了Iterator支持，各种容器类都进行了实现，而事实上，迭代器模式就是为了解决如何遍历这些容器里的元素而诞生的。</p></blockquote>

<p><strong>迭代器模式</strong>主要有以下的角色：</p>

<ul>
<li>Iterator抽象迭代器： <br/>
负责定义访问与遍历元素的接口。基本有3个固定的方法<code>hasNext()</code>,<code>next()</code>,<code>remove()</code>;</li>
<li>Concrete Iterator具体迭代器：  <br/>
迭代器的实现类，实现接口，完成元素遍历。</li>
<li>Aggregate抽象容器： <br/>
定义创建具体迭代器的接口。在Java种一般是<code>iterator()</code>方法。</li>
<li>Concrete Aggregate具体容器：<br/>
实现创建迭代器接口，返回迭代器实例对象。</li>
</ul>


<!--more-->


<p>为了方便，下面就直接以ArrayList为例，来看看迭代器是如何实现的吧。<br/>
在使用时，通常这样对ArrayList进行遍历：</p>

<pre><code>    List&lt;String&gt; list = new ArrayList&lt;String&gt;();
    list.add("first");
    list.add("second");
    Iterator&lt;String&gt; itr = list.iterator();
    while (itr.hasNext()) {
        String element = itr.next();
        System.out.println(element);
    }
</code></pre>

<p>从这里，我们可以看出来，这就是完全的迭代器模式。<br/>
首先来看，Iterator接口（java.util.Iterator）：</p>

<pre><code>public interface Iterator&lt;E&gt; {

    boolean hasNext();

    E next();

    void remove();
}
</code></pre>

<p>然后是Iterator的具体实现类(java.util.AbstractList<E>$Itr)：</p>

<pre><code>private class Itr implements Iterator&lt;E&gt; {

    int cursor = 0;

    int lastRet = -1;

    int expectedModCount = modCount;

    public boolean hasNext() {
        return cursor != size();
    }

    public E next() {
        checkForComodification();
        try {
        E next = get(cursor);
        lastRet = cursor++;
        return next;
        } catch (IndexOutOfBoundsException e) {
            checkForComodification();
            throw new NoSuchElementException();
        }
    }

    public void remove() {
        if (lastRet == -1)
        throw new IllegalStateException();
            checkForComodification();

        try {
            AbstractList.this.remove(lastRet);
        if (lastRet &lt; cursor)
            cursor--;
        lastRet = -1;
        expectedModCount = modCount;
        } catch (IndexOutOfBoundsException e) {
            throw new ConcurrentModificationException();
        }
    }

    final void checkForComodification() {
        if (modCount != expectedModCount)
            throw new ConcurrentModificationException();
    }
}
</code></pre>

<p>这个就是具体的Iterator了，当然还有另外一个ListItr extends Itr，这个是专门针对List进行操作的。 <br/>
那么Aggregate接口对应的是哪个呢？就是<code>java.util.AbstractCollection&lt;E&gt;</code> ，它里面定义了这样的一个接口：</p>

<pre><code>...
/**
 * Returns an iterator over the elements contained in this collection.
 *
 * @return an iterator over the elements contained in this collection
 */
public abstract Iterator&lt;E&gt; iterator();
...
</code></pre>

<p>那么具体实现是在哪儿？<code>java.util.AbstractList&lt;E&gt;</code>做了实现。</p>

<pre><code>    public Iterator&lt;E&gt; iterator() {
        return new Itr();
    }
</code></pre>

<p>返回了一个具体的迭代器实例。而ArrayList,LinkedList都是继承AbstractList的，因此自动具有了返回迭代器实例的功能。</p>

<p>因此，Java种的容器类只负责元素的的维护就好了。访问就教给迭代器吧，Java做的如此完善，以至于我们都不必再自己写Iterator了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：命令（Command） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/command-in-java/"/>
    <updated>2012-11-08T15:09:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/command-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>命令模式是一种高内聚的模式。它将一个请求封装成一个对象，从而让使用不同请求来把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销与恢复功能。 <br/>
听起来，好复杂！</p>

<p>在程序员之间，流传着这样一句话：程序写到最后，就是if-else,for,while。<br/>
真是枯燥啊！其实能体会到这种感觉，说明作为一个程序员，你已经有了一定的造诣了。那如何提高呢？</p>

<p>试想，在代码中，你有很多if-else或者case语句。为什么有这样的语句呢？因为判断条件多啊，需要根据不同的条件来做不同的事情。2、3个条件还可以写，如果有20个条件呢，或者N多呢。那么我们的if-else那就判断N重条件，这简直是无法忍受的，写出的代码可维护性更不用说了。</p>

<!--more-->


<p> <br/>
<strong>命令模式</strong>就是可以解决这种问题的方法之一。下面就来提高一下程序员的自我修养了。</p>

<p>命令模式中，主要有3个角色：</p>

<ul>
<li>Receiver命令接收者</li>
<li>Command命令</li>
<li>Invoker命令调用者</li>
</ul>


<p>下面开始分别定义： <br/>
<strong>Receiver:</strong>定义命令的N种接收者</p>

<pre><code>public abstract class AbstractReceiver {
    public abstract void doSomething();
}

public class Receiver1 extends AbstractReceiver {
    @Override
    public void doSomething() {
        System.out.println("receiver1 do something");
    }
}
public class Receiver2 extends AbstractReceiver {
    @Override
    public void doSomething() {
        System.out.println("receiver2 do something");
    }
}
...
public class ReceiverN
...
</code></pre>

<p><strong>Command:</strong>定义N种命令</p>

<pre><code>public abstract class AbstractCommand {
    public abstract void execute();
}

public class Command1 extends AbstractCommand {
    private AbstractReceiver receiver;
    public Command1(AbstractReceiver receiver) {
        this.receiver = receiver;
    }
    @Override
    public void execute() {
        System.out.println("command1 命令发出");
        receiver.doSomething();
    }
}
public class Command2 extends AbstractCommand {
    private AbstractReceiver receiver;
    public Command2(AbstractReceiver receiver) {
        this.receiver = receiver;
    }
    @Override
    public void execute() {
        System.out.println("command2 命令发出");
        receiver.doSomething();
    }
}
...
public class CommandN
....
</code></pre>

<p><strong>Invoker:</strong>定义调用者</p>

<pre><code>public class Invoker {

    private List&lt;AbstractCommand&gt; commandList = new LinkedList&lt;AbstractCommand&gt;();

    public void addCommand(AbstractCommand command) {
        commandList.add(command);
    }

    public void addCommands(LinkedList&lt;AbstractCommand&gt; commands) {
        commandList.addAll(commands);
    }

    public void action() {
        for (AbstractCommand command : commandList) {
            command.execute();
        }
    }

}
</code></pre>

<p>使用场景：</p>

<pre><code>Invoker invoker = new Invoker();
AbstractReceiver receiver1 = new Receiver1();
AbstractReceiver receiver2 = new Receiver2();
AbstractCommand command1 = new Command1(receiver2);
AbstractCommand command2 = new Command2(receiver1);
invoker.addCommand(command1);
invoker.addCommand(command2);
invoker.action();
</code></pre>

<p>运行结果：</p>

<pre><code>command1 命令发出
receiver2 do something
command2 命令发出
receiver1 do something
</code></pre>

<p>现在再回过来看命令模式的定义，就比较明白了吧。也就是说有N种请求条件，那么就定义N个类来封装请求，我们称之为命令（Command）。每个命令做什么操作呢，谁来执行这个命令呢，有命令自己来进行定义。这样就避免了if-else，而由N种命令来决定跳转关系。</p>

<p>调用者（Invoker）呢，它维护了一个命令列表，并按照一定的顺序来发起命令调用。当然这个列表也有可能就只有一个命令了，就简化了一下。与if-else对比更直观的了。</p>

<p>定义中还提到了命令撤销或恢复的功能，这种撤销与恢复也是命令的一种了，一般可以通过扩展一个命令出来，通过诸如日志等来恢复之前的操作。其实这个也是可以通过备忘录模式来实现的。</p>

<h2>命令模式 in JDK</h2>

<pre><code>java.lang.Runnable#run()
javax.swing.Action#actionPeformed(ActionEvent e)
</code></pre>

<p>从Runnable来说，不同的实现者，通过调用run()来实现在不同线程执行不同的操作。
从Action来说，由于桌面UI有很多的操作事件，这些事件就是命令。通过actionPerformed函数，接受不同的命令参数来做出不同的表现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：原型（prototype） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/07/prototype-in-java/"/>
    <updated>2012-11-07T20:41:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/07/prototype-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。<br/>
基本上，可以就是一个clone方法，通过这个方法进行对象的拷贝。</p>

<p>Java中的原型模式：</p>

<pre><code>public class ProtoTypeClass implements Cloneable {

    @Override
    public ProtoTypeClass clone(){
        ProtoTypeClass cloneObject = null;
        try{
            cloneObject = (ProtoTypeClass) super.clone();
        }catch (Exception e) {
            // TODO: handle exception
        }
        return cloneObject;
    }
}
</code></pre>

<p>上面就是实现了原型模式。不过Java在提供了Cloneable这一接口方便实现原型模式的同时，也带来了一些不容易注意到的问题。</p>

<ul>
<li>clone时，构造函数不会执行</li>
<li>浅拷贝与深拷贝</li>
</ul>


<p>这两个问题是需要时刻注意的。由于本文主要不是讲Cloneable,所以另辟专题吧。</p>
]]></content>
  </entry>
  
</feed>
