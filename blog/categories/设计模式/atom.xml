<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 设计模式 | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/blog/categories/设计模式/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2012-10-31T13:56:44+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式：装饰器（Decorator）in Java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/30/decorator-in-java/"/>
    <updated>2012-10-30T21:25:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/30/decorator-in-java</id>
    <content type="html"><![CDATA[<p>1.认识装饰器模式</p>

<p>装饰模式能够实现动态的为对象添加功能，是从一个对象外部来给对象添加功能。通常给对象添加功能，要么直接修改对象添加相应的功能，要么派生对应的子类来扩展，抑或是使用对象组合的方式。显然，直接修改对应的类这种方式并不可取。在面向对象的设计中，而我们也应该尽量使用对象组合，而不是对象继承来扩展和复用功能。装饰器模式就是基于对象组合的方式，可以很灵活的给对象添加所需要的功能。装饰器模式的本质就是动态组合。动态是手段，组合才是目的。总之，装饰模式是通过把复杂的功能简单化，分散化，然后再运行期间，根据需要来动态组合的这样一个模式。</p>

<!--more-->


<p>2.模式结构和说明</p>

<p>装饰模式的结构如下图所示。</p>

<p>Component：组件对象的接口，可以给这些对象动态的添加职责；</p>

<p>ConcreteComponent：具体的组件对象，实现了组件接口。该对象通常就是被装饰器装饰的原始对象，可以给这个对象添加职责；</p>

<p>Decorator：所有装饰器的父类，需要定义一个与组件接口一致的接口(主要是为了实现装饰器功能的复用，即具体的装饰器A可以装饰另外一个具体的装饰器B，因为装饰器类也是一个Component)，并持有一个Component对象，该对象其实就是被装饰的对象。如果不继承组件接口类，则只能为某个组件添加单一的功能，即装饰器对象不能在装饰其他的装饰器对象。</p>

<p>ConcreteDecorator：具体的装饰器类，实现具体要向被装饰对象添加的功能。用来装饰具体的组件对象或者另外一个具体的装饰器对象。</p>

<p>装饰器模式的示例代码如下(Java语言描述)：</p>

<p>   (1)组件对象的接口，可以给这些对象动态的添加职责</p>

<pre><code>public abstract class Component {  
    public abstract void operation();  
}  
</code></pre>

<p>(2)具体实现组件对象接口的对象</p>

<pre><code>public class ConcreteComponent extends Component {  

    public void operation() {  
        //相应的功能处理  
    }  
}  
</code></pre>

<p>(3)装饰器接口，维持一个指向组件对象的接口对象， 并定义一个与组件接口一致的接口</p>

<pre><code>public abstract class Decorator extends Component {  
    /** 
    * 持有组件对象 
    */  
    protected Component component;  

    /** 
    * 构造方法，传入组件对象 
    * @param component 组件对象 
    */  
    public Decorator(Component component) {  
        this.component = component;  
    }  

    public void operation() {  
        //转发请求给组件对象，可以在转发前后执行一些附加动作  
        component.operation();  
    }   
}  
</code></pre>

<p>(4)装饰器的具体实现对象，向组件对象添加职责，operationFirst()，operationLast()为前后需要添加的功能。具体的装饰器类ConcreteDecoratorB代码相似，不在给出。</p>

<pre><code>public class ConcreteDecoratorA extends Decorator {  
    public ConcreteDecoratorA(Component component) {  
        super(component);  
    }  
   private void operationFirst(){ } //在调用父类的operation方法之前需要执行的操作  
   private void operationLast(){ } //在调用父类的operation方法之后需要执行的操作  
   public void operation() {  
       //调用父类的方法，可以在调用前后执行一些附加动作  
       operationFirst(); //添加的功能  
       super.operation();  //这里可以选择性的调用父类的方法，如果不调用则相当于完全改写了方法，实现了新的功能  
       operationLast(); //添加的功能  
    }  
}  
</code></pre>

<p>(5) 客户端使用装饰器的代码</p>

<pre><code>public class Client{  
    public static void main(String[] args){  
    Component c1 = new ConcreteComponent (); //首先创建需要被装饰的原始对象(即要被装饰的对象)  
    Decorator decoratorA = new ConcreteDecoratorA(c1); //给对象透明的增加功能A并调用  
    decoratorA .operation();  
    Decorator decoratorB = new ConcreteDecoratorB(c1); //给对象透明的增加功能B并调用  
    decoratorB .operation();  
    Decorator decoratorBandA = new ConcreteDecoratorB(decoratorA);//装饰器也可以装饰具体的装饰对象，此时相当于给对象在增加A的功能基础上在添加功能B  
    decoratorBandA.operation();  
    }  
}  
</code></pre>

<p>3.小结</p>

<p>Java中的IO是明显的装饰器模式的运用。FilterInputStream，FilterOutputStream，FilterRead，FilterWriter分别为具体装饰器的父类，相当于Decorator类，它们分别实现了InputStream，OutputStream，Reader，Writer类(这些类相当于Component，是其他组件类的父类，也是Decorator类的父类)。继承自InputStream，OutputStream，Reader，Writer这四个类的其他类是具体的组件类，每个都有相应的功能，相当于ConcreteComponent类。而继承自FilterInputStream，FilterOutputStream，FilterRead，FilterWriter这四个类的其他类就是具体的装饰器对象类，即ConcreteDecorator类。通过这些装饰器类，可以给我们提供更加具体的有用的功能。如FileInputStream是InputStream的一个子类，从文件中读取数据流，BufferedInputStream是继承自FilterInputStream的具体的装饰器类，该类提供一个内存的缓冲区类保存输入流中的数据。我们使用如下的代码来使用BufferedInputStream装饰FileInputStream，就可以提供一个内存缓冲区来保存从文件中读取的输入流。</p>

<p>BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file)); //其中file为某个具体文件的File或者FileDescription对象</p>

<pre><code>在以下两种情况下可以考虑使用装饰器模式：

(1)需要在不影响其他对象的情况下，以动态、透明的方式给对象添加职责。

(2)如果不适合使用子类来进行扩展的时候，可以考虑使用装饰器模式。
</code></pre>

<p>参考文档：<a href="http://www.cnblogs.com/chenying99/archive/2012/10/05/2712524.html">http://www.cnblogs.com/chenying99/archive/2012/10/05/2712524.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：适配器（Adapter）in Java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/30/adapter-in-java/"/>
    <updated>2012-10-30T21:24:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/30/adapter-in-java</id>
    <content type="html"><![CDATA[<p><strong>类适配器</strong>:客户的开发人员定义了一个接口，期望用这个接口来完成整数的求和操作，接口定义如下：   <br/>
Java代码</p>

<pre><code>public interface Operation{  
    public int add(int a,int b);  
}  
</code></pre>

<p>开发人员在了解这个接口的定义后，发现一个第三方类，里面有一个方法能实现他们期望的功能，其代码如下：  <br/>
Java代码</p>

<pre><code>public class OtherOperation{  
    public int otherAdd(int a,int b){  
        return a + b;  
    }  
}  
</code></pre>

<!--more-->


<p>以上第三方类OtherOperation的方法public int otherAdd(int a,int b)所提供的功能，完全能符合客户的期望，所以只需要想办法把OtherOperation的otherAdd(int a,int b)和客户的Operation接口联系起来，让这个第三方类来为客户提供他们期望的服务就行了，这样就避免了开发人员再度去研究类似OtherOperation的otherAdd(int a,int b)方法的实现（利用已有的轮子，避免重复发明），这方法之一，就是用适配器模式： <br/>
Java代码</p>

<pre><code>public class AdapterOperation extends OtherOperation implements Operation{  
    public int add(int a,int b){  
       return otherAdd(a,b);  
     }  
}  
</code></pre>

<p>以上就是适配器的实现方法之一，<strong>类适配器</strong>，在以上实现中存在着三中角色分别是：  <br/>
1：适配目标角色：Operation。<br/>
2：适配类（原）角色：OtherOperation。<br/>
3：适配器角色：AdapterOperation。<br/>
其中适配器角色是适配器模式的核心。
适配器的主要工作就是通过封装现有的功能，使他满足需要的接口。</p>

<p><strong>对象适配器</strong><br/>
我们再来看看另一种情况：
假如客户接口期望的功能不止一个，而是多个： <br/>
Java代码</p>

<pre><code>public interface Operation{  
    public int add(int a,int b);  
    public int minus(int a,int b);  
    public int multiplied(int a,int b);  
}  
</code></pre>

<p>而能提供这些实现的原可能不止一个： <br/>
Java代码</p>

<pre><code>public class OtherAdd{  
    public int otherAdd(int a,int b){  
         return a + b;  
    }  
}  

public class OtherMinus{  
    public int minus(int a,int b){  
       return a - b;  
    }  
}  

public class OtherMultiplied{  
    public int multiplied(int a,int b){  
       return a * b;  
    }  
}  
</code></pre>

<p>由于java是不能实现多继承的，所以我们不能通过构建一个适配器，让他来继承所有原以完成我们的期望，这时候怎么办呢?只能用适配器的另一种实现--对象适配器：<br/>
Java代码</p>

<pre><code>public class AdapterOperation implements Operation{  
    private OtherAdd add;  
    private OtherMinus minus;  
    private OtherMultiplied multiplied;  

    public void setAdd(OtherAdd add){  
        this.add = add;  
    }  

    public void setMinus(OtherMinus minus){  
        this.minus = minus;  
    }  

    public void setMultiplied(OtherMultiplied multiplied){  
        this.multiplied = multiplied;  
    }  

    //适配加法运算  
    public int add(int a,int b){  
       return add.otherAdd(a,b);  
    }  

    //适配减法运算  
    public int minus(int a,int b){  
      return minus.minus(a,b);  
    }  

    //适配乘法运算  
    public int multiplied(int a,int b){  
     return multiplied.multiplied(a,b);  
    }  
}  
</code></pre>

<p>上面代码很明显，适配器并不是通过继承来获取适配类（原）的功能的，而是通过适配类的对象来获取的，这就解决了java不能多继承所带来的不便了。这也是java提倡的编程思想之一，即尽量使用聚合不要使用继承。<br/>
还有一种情况是需要使用对象适配器的。我们来看看，
单我们的客户提供的需求并不是一个明确的接口，而是一个类，并没有定义期望的方法，如下 <br/>
Java代码</p>

<pre><code>public class A{  
    public int add(int a,int b){  
        return a + b;  
    }  
}  
</code></pre>

<p>现在客户要一个新类B，要求能在保留类A功能的情况下增加一个运算减法的功能，并要求B能随时替换掉A但不能对已有系统造成影响。这样我们只能新建一个类B，并让B继承A。 <br/>
Java代码</p>

<pre><code>public class B extends A{  
    B(){  
        super();  
        }  

    public int minus(int a,int b){  
       //待实现的减法运算函数..  
    }  
}  
</code></pre>

<p>这时候，我们发现类C已经提供了实现减法的函数，    <br/>
Java代码</p>

<pre><code>public class C{  
    public int minus(int a,int b){  
       return a - b;  
    }  
}  
</code></pre>

<p>为了避免重复去设计该函数，我们决定引入C类，通过适配C类来达到我们的期望，但问题是A和C都是一个具体类，我们无法让B同时继承这个两个类，而B继承A又是必须的，所以我们只能考虑把C给内聚到B内部，对象适配器又得派上用场了。<br/>
Java代码</p>

<pre><code>public class B extends A{  
    private C c;  

    B(){  
        super();  
        }  

    public void setMinus(C c){  
        this.c= c;  
    }  

    public int minus(int a,int b){  
       return c.minus(a,b);  
    }  
}  
</code></pre>

<p>这样，在需要A类的地方都能用B类来代替，同时又保证了新的功能的引入。</p>

<p>更灵活的实现--<strong>隐藏目标接口的抽象适配器</strong></p>

<p>做java 桌面应用的都知道WindowListener接口， <br/>
Java代码</p>

<pre><code>public interface WindowListener extends EventListener{  
     public void windowActivated(WindowEvent e)；  
     public void windowClosed(WindowEvent e)；  
     public void windowClosing(WindowEvent e)；  
     public void windowDeactivated(WindowEvent e)；  
     public void windowDeiconified(WindowEvent e)；  
     public void windowIconified(WindowEvent e)；  
     public void windowOpened(WindowEvent e)；  
}  
</code></pre>

<p>要实现这个接口，我们就必须实现它所定义的所有方法，但是实际上，我们很少需要同时用到所有的方法，我们要的只是其中的两三个。为了不使我们实现多余的方法，     <br/>
jdk WindowListener提供了一个WindowListener的默认实现类WindowAdapter类，这是一个抽象类， <br/>
Java代码</p>

<pre><code>public abstract class WindowAdapter implements WindowListener{  
    public void windowActivated(WindowEvent e){}  
    public void windowClosed(WindowEvent e){}  
    public void windowClosing(WindowEvent e){}  
    public void windowDeactivated(WindowEvent e){}  
    public void windowDeiconified(WindowEvent e){}  
    public void windowIconified(WindowEvent e){}  
    public void windowOpened(WindowEvent e){}  
}  
</code></pre>

<p>WindowAdapter类对WindowListener接口的所有有方法都提供了空实现，
有了WindowAdapter类，我们只需要去继承WindowAdapter，然后选择我们所关心的方法来实现就行了，这样就避免了直接去实现WindowListener接口。</p>

<p>参考文献：<a href="http://chjl2020.iteye.com/blog/262370">http://chjl2020.iteye.com/blog/262370</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[23个经典JDK设计模式]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/22/design-pattern-in-jdk-index/"/>
    <updated>2012-10-22T20:49:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/22/design-pattern-in-jdk-index</id>
    <content type="html"><![CDATA[<p>下面是JDK中有关23个经典设计模式的示例：</p>

<!--more-->


<h2>Structural（结构模式）</h2>

<p><strong>Adapter:</strong></p>

<p>把一个接口或是类变成另外一种。</p>

<p>● java.util.Arrays#asList()<br/>
● javax.swing.JTable(TableModel)<br/>
● java.io.InputStreamReader(InputStream) <br/>
● java.io.OutputStreamWriter(OutputStream) <br/>
● javax.xml.bind.annotation.adapters.XmlAdapter#marshal()<br/>
● javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal()</p>

<p><strong>Bridge:</strong></p>

<p>把抽象和实现解藕，于是接口和实现可在完全独立开来。</p>

<p>● AWT (提供了抽象层映射于实际的操作系统)<br/>
● JDBC</p>

<p><strong>Composite:</strong></p>

<p>让使用者把单独的对象和组合对象混用。</p>

<p>● javax.swing.JComponent#add(Component) <br/>
● java.awt.Container#add(Component) <br/>
● java.util.Map#putAll(Map) <br/>
● java.util.List#addAll(Collection) <br/>
● java.util.Set#addAll(Collection)</p>

<p><strong>Decorator:</strong></p>

<p>为一个对象动态的加上一系列的动作，而不需要因为这些动作的不同而产生大量的继承类。这个模式在JDK中几乎无处不在，所以，下面的列表只是一些典型的。</p>

<p>● java.io.BufferedInputStream(InputStream) <br/>
● java.io.DataInputStream(InputStream) <br/>
● java.io.BufferedOutputStream(OutputStream) <br/>
● java.util.zip.ZipOutputStream(OutputStream) <br/>
● java.util.Collections#checked[List|Map|Set|SortedSet|SortedMap]()</p>

<p><strong>Facade:</strong></p>

<p>用一个简单的接口包状一组组件，接口，抽象或是子系统。</p>

<p>● java.lang.Class <br/>
● javax.faces.webapp.FacesServlet</p>

<p><strong>Flyweight:</strong></p>

<p>有效率地存储大量的小的对象。</p>

<p>● java.lang.Integer#valueOf(int) <br/>
● java.lang.Boolean#valueOf(boolean) <br/>
● java.lang.Byte#valueOf(byte) <br/>
● java.lang.Character#valueOf(char)</p>

<p><strong>Proxy:</strong></p>

<p>用一个简单的对象来代替一个复杂的对象。</p>

<p>● java.lang.reflect.Proxy <br/>
● RMI</p>

<h2>Creational（创建模式）</h2>

<p><strong>Abstract factory:</strong></p>

<p>创建一组有关联的对象实例。这个模式在JDK中也是相当的常见，还有很多的framework例如Spring。我们很容易找到这样的实例。</p>

<p>● java.util.Calendar#getInstance()  <br/>
● java.util.Arrays#asList() <br/>
● java.util.ResourceBundle#getBundle() <br/>
● java.sql.DriverManager#getConnection() <br/>
● java.sql.Connection#createStatement() <br/>
● java.sql.Statement#executeQuery() <br/>
● java.text.NumberFormat#getInstance() <br/>
● javax.xml.transform.TransformerFactory#newInstance()</p>

<p><strong>Builder:</strong></p>

<p>主要用来简化一个复杂的对象的创建。这个模式也可以用来实现一个 Fluent Interface。</p>

<p>● java.lang.StringBuilder#append() <br/>
● java.lang.StringBuffer#append() <br/>
● java.sql.PreparedStatement <br/>
● javax.swing.GroupLayout.Group#addComponent()</p>

<p><strong>Factory:</strong></p>

<p>简单来说，按照需求返回一个类型的实例。</p>

<p>● java.lang.Proxy#newProxyInstance() <br/>
● java.lang.Object#toString() <br/>
● java.lang.Class#newInstance() <br/>
● java.lang.reflect.Array#newInstance() <br/>
● java.lang.reflect.Constructor#newInstance() <br/>
● java.lang.Boolean#valueOf(String) <br/>
● java.lang.Class#forName()</p>

<p><strong>Prototype:</strong></p>

<p>使用自己的实例创建另一个实例。有时候，创建一个实例然后再把已有实例的值拷贝过去，是一个很复杂的动作。所以，使用这个模式可以避免这样的复杂性。</p>

<p>● java.lang.Object#clone() <br/>
● java.lang.Cloneable</p>

<p><strong>Singleton:</strong></p>

<p>只允许一个实例。在 Effective Java中建议使用Emun.</p>

<p>● java.lang.Runtime#getRuntime() <br/>
● java.awt.Toolkit#getDefaultToolkit() <br/>
● java.awt.GraphicsEnvironment#getLocalGraphicsEnvironment() <br/>
● java.awt.Desktop#getDesktop()</p>

<h2>Behavioral(行为模式)</h2>

<p><strong>Chain of responsibility:</strong></p>

<p>把一个对象在一个链接传递直到被处理。在这个链上的所有的对象有相同的接口（抽象类）但却有不同的实现。</p>

<p>● java.util.logging.Logger#log() <br/>
● javax.servlet.Filter#doFilter()</p>

<p><strong>Command:</strong></p>

<p>把一个或一些命令封装到一个对象中。</p>

<p>● java.lang.Runnable <br/>
● javax.swing.Action</p>

<p><strong>Interpreter:</strong></p>

<p>一个语法解释器的模式。</p>

<p>● java.util.Pattern  <br/>
● java.text.Normalizer <br/>
● java.text.Format</p>

<p><strong>Iterator:</strong></p>

<p>提供一种一致的方法来顺序遍历一个容器中的所有元素。</p>

<p>● java.util.Iterator <br/>
● java.util.Enumeration</p>

<p><strong>Mediator:</strong></p>

<p>用来减少对象单的直接通讯的依赖关系。使用一个中间类来管理消息的方向。</p>

<p>● java.util.Timer <br/>
● java.util.concurrent.Executor#execute() <br/>
● java.util.concurrent.ExecutorService#submit() <br/>
● java.lang.reflect.Method#invoke()</p>

<p><strong>Memento:</strong></p>

<p>给一个对象的状态做一个快照。Date类在内部使用了一个long型来做这个快照。</p>

<p>● java.util.Date <br/>
● java.io.Serializable</p>

<p><strong>Null Object:</strong></p>

<p>这个模式用来解决如果一个Collection中没有元素的情况。</p>

<p>● java.util.Collections#emptyList() <br/>
● java.util.Collections#emptyMap() <br/>
● java.util.Collections#emptySet()</p>

<p><strong>Observer:</strong></p>

<p>允许一个对象向所有的侦听的对象广播自己的消息或事件。</p>

<p>● java.util.EventListener <br/>
● javax.servlet.http.HttpSessionBindingListener <br/>
● javax.servlet.http.HttpSessionAttributeListener <br/>
● javax.faces.event.PhaseListener</p>

<p><strong>State:</strong></p>

<p>这个模式允许你可以在运行时很容易地根据自身内部的状态改变对象的行为。</p>

<p>● java.util.Iterator <br/>
● javax.faces.lifecycle.LifeCycle#execute()</p>

<p><strong>Strategy:</strong></p>

<p>定义一组算法，并把其封装到一个对象中。然后在运行时，可以灵活的使用其中的一个算法。</p>

<p>● java.util.Comparator#compare() <br/>
● javax.servlet.http.HttpServlet <br/>
● javax.servlet.Filter#doFilter()</p>

<p><strong>Template method:</strong></p>

<p>允许子类重载部分父类而不需要完全重写。</p>

<p>● java.util.Collections#sort() <br/>
● java.io.InputStream#skip() <br/>
● java.io.InputStream#read() <br/>
● java.util.AbstractList#indexOf()</p>

<p><strong>Visitor:</strong></p>

<p>作用于某个对象群中各个对象的操作. 它可以使你在不改变这些对象本身的情况下,定义作用于这些对象的新操作.</p>

<p>● javax.lang.model.element.Element 和javax.lang.model.element.ElementVisitor <br/>
● javax.lang.model.type.TypeMirror 和javax.lang.model.type.TypeVisitor</p>

<p>在stakeoverflow也有相应的讨论：</p>

<p><a href="http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns">http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns</a></p>

<p>摘自：<a href="http://www.csdn.net/article/2010-11-29/282644">http://www.csdn.net/article/2010-11-29/282644</a></p>
]]></content>
  </entry>
  
</feed>
