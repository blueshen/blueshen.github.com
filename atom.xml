<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2013-05-08T18:15:15+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从windows到linux]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/05/02/my-linux-dream/"/>
    <updated>2013-05-02T16:37:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/05/02/my-linux-dream</id>
    <content type="html"><![CDATA[<p>从高中时代最早接触计算机,当初什么都不懂,能会用下email就绝对是达人了啊.最早见到OS应该是windows 95,那时候虽然已经出了windows 98,不过学校仍预装的是windows 95.</p>

<p>高中时期,就感觉计算机挺新奇,很感兴趣,至于具体会发展到什么样也不清楚.大学报考时间果断选择了计算机科学与技术这一专业.从此就走上了这一不归路.</p>

<p>大学时期对计算机有了更深刻的认识,也知道除了windows之外还有一个linux的东西所在.这期间先后给自己的机器安装过红帽,安装过国产的红旗.不过这些东西也都没有什么深入,安装后发现也很不好用,不得已而放弃掉.</p>

<p>研究生期间有更多的linux伙伴,有人在用也有人给推荐.那个时候选择了ubuntu作为自己首选,因为大家推荐说资源多,新人入手容易.那个时候应该是9.04左右的版本.</p>

<p>工作后,接触到了更多的服务器,也经历了各种在windows下的程序无法很好在linux运行的情况,因此下决心学习.私人的笔记本装上了ubuntu 10.04,不过公司的工作电脑还是没敢做成ubuntu系统,只是弄了一个虚拟机.</p>

<p>大概在大半年以前,我下定了决心,把系统给完全换成了ubuntu,版本也升到了12.04.这时的系统已经足够成熟,几乎可以满足工作的需要.而最近发布的ubuntu 13.04则更加的完善,各种替代软件都可以找到.</p>

<p>个人常用软件推荐:</p>

<ul>
<li>office: wps for linux  or libreoffice</li>
<li>输入法:  sogou for linux</li>
<li>开发IDE: Intellij IDEA or Eclipse</li>
<li>编辑器: sublime,retext</li>
<li>浏览器: chrome,firefox</li>
<li>邮件客户端: thunderbird</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Karma与Jenkins-CI集成]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/04/01/run-karma-in-jenkins-ci/"/>
    <updated>2013-04-01T19:38:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/04/01/run-karma-in-jenkins-ci</id>
    <content type="html"><![CDATA[<p>Jenkins是一款目前最为流行的持续集成工具，那么，如何让Karma的能集成到Jenkins，并自动执行呢？</p>

<h3>前提条件</h3>

<p>Jenkins Server上（可以是Master，也许是Slave结点，总之在那个Server上跑，就需要安装），安装：</p>

<ul>
<li>Node</li>
<li>Karma</li>
</ul>


<h3>配置Karma.conf.js文件</h3>

<p>必须保证：</p>

<pre><code>singleRun = true;
</code></pre>

<p>只有这样，才能保证运行Test后，浏览器自动退出，不影响下次执行。  <br/>
在Jenkins中，也许你想查看测试结果，这个时候可以借助junit reporter。</p>

<pre><code>reporters = ['junit'];
junitReporter = {
    outputFile: 'test-results.xml'
};
</code></pre>

<p>那么，Junit格式的测试结果就存到了test-results.xml中。</p>

<p>另外一种情况，我可能还想查看一下代码覆盖率。Karma也是支持的，要进行以下的配置：</p>

<pre><code>reporters = ['coverage'];

preprocessors = {
    'src/*.js': 'coverage'
};

coverageReporter = {
    type : 'cobertura',
    dir : 'coverage/'
};
</code></pre>

<p>这里，reporters指出了要生成coverage报告。preprocessors指明了要统计覆盖率的源码。coverageReporter里，指明type为cobertura，dir则是报告路径。type用多种选择，其中cobertura为Jenkins专属的。</p>

<!--more-->


<h3>一个Jenkins Job</h3>

<p>1.新建一个自由风格（freestyle）的Job即可。 <br/>
2.Restrict where this project can be run 里面填好前提条件中的机器名。当然如果直接是在Master结点，这个可以忽略。 <br/>
3.源码管理部分，填写repository url。  <br/>
4.在构建里，直接填写<code>karma start</code>即可。 <br/>
5.在构建后操作里。选择Publish Cobertura Coverage Report,并指定生成的XML地址。如下图：</p>

<p><img src="http://www.shenyanchao.cn/images/blog/karma-jenkins-cobertura.png" alt="karma-jenkins-cobertura" /></p>

<p>6.在构建后操作里。选择Publish JUnit test result report,同样指定report的XML路径。如图：</p>

<p><img src="http://www.shenyanchao.cn/images/blog/karma-jenkins-junit.png" alt="karma-jenkins-junit" /></p>

<h3>Jenkins运行结果</h3>

<p>Code Coverage结果： <br/>
<img src="http://www.shenyanchao.cn/images/blog/karma-jenkins-codecoverage.png" alt="" /></p>

<p>点击进入后，可以看到具体的覆盖率情况： <br/>
<img src="http://www.shenyanchao.cn/images/blog/karma-jenkins-codecoverage-detail.png" alt="" /></p>

<p>JUnit结果： <br/>
<img src="http://www.shenyanchao.cn/images/blog/karma-jenkins-junit-report.png" alt="" /></p>

<p>点进去后可以查看详细信息：<br/>
<img src="http://www.shenyanchao.cn/images/blog/karma-jenkins-junit-report-detail.png" alt="" /></p>

<h3>关于Coverage</h3>

<p>coverageReporter的类型有以下几种：</p>

<ul>
<li>html (default)</li>
<li>lcov (lcov and html)</li>
<li>lcovonly</li>
<li>text (standard output)</li>
<li>text-summary (standard output)</li>
<li>cobertura (xml format supported by Jenkins)</li>
</ul>


<p>Karma是使用<a href="http://gotwarlost.github.com/istanbul/">istanbul</a>来生成报告的，上面在Jenkins种使用的cobertura类型。如果不在CI环境中，那么可以考虑使用lcon或者html类型，report也是相当好看呢。 <br/>
以下是lcov类型的Coverage结果：</p>

<p><img src="http://www.shenyanchao.cn/images/blog/karma-lcov-1.png" alt="" /></p>

<p>而下面的结果，则指明了哪行源码被覆盖了。 <br/>
<img src="http://www.shenyanchao.cn/images/blog/karma-lcov-2.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Karma来驱动mocha测试]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/03/27/use-karma-to-run-mocha-test/"/>
    <updated>2013-03-27T19:00:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/03/27/use-karma-to-run-mocha-test</id>
    <content type="html"><![CDATA[<h2>从Testacular到Karma的变化</h2>

<p>2013年03月18日，Testacular正式被重命名为Karma。具体原因，讲起来缺也很滑稽。这里面不含有任何的商业成分，只是因为Testacular与Testicular很相似，因此令人感觉尴尬。仅仅此而已，谁让JsTestDriver已经被别人给拿走了。<br/>
安装：</p>

<pre><code>npm install -g karma
</code></pre>

<h2>什么时候使用Karma？</h2>

<ul>
<li>在真实浏览器里测试。</li>
<li>在多种浏览器里进行测试（包括桌面、移动）。</li>
<li>在本地开发环境执行测试。</li>
<li>想在持续集成CI内运行测试。</li>
<li>想在每次保存代码时，自动执行测试。</li>
<li>热衷于terminal小黑屏。</li>
<li>不想陷入令人厌烦的测试生活。</li>
<li>想使用Istanbul自动生成coverage报告。</li>
<li>想在源码中使用RequireJS。</li>
</ul>


<h2>Karma不是Testing Framework</h2>

<p>Karma自从出现，就是一直作为一个Test Runner而存在的，只是用来驱动测试的框架。不过到目前为止，它支持以下流行的测试框架。</p>

<ul>
<li>Mocha</li>
<li>Jasmine</li>
<li>QUnit</li>
</ul>


<!--more-->


<h2>Karma与Test Framework集成</h2>

<p>Karma对各种Test Framework的支持是以插件的模式进行支持的。<br/>
只需要在karma.conf.js进行以下配置（mocha为例）：</p>

<pre><code>frameworks = ['mocha'];

plugins = [
'karma-mocha'
];
</code></pre>

<p>在此处只是配置了一下，具体支持的plugin要在当前目录下进行安装：</p>

<pre><code>npm install karma-mocha
</code></pre>

<p>其他框架依此类推。</p>

<h2>Karma报告</h2>

<p>Karma的报告（reporter）也是以插件模式进行的。</p>

<h4>JUnit Reporter</h4>

<p>首先，要定义reporter类型，在karma.conf.js添加：</p>

<pre><code>reporters = ['junit'];
</code></pre>

<p>如果想更近一步的话，可以配置一下报告的位置。</p>

<pre><code>junitReporter = {
    outputFile: 'junit-report/test-results.xml'
};
</code></pre>

<p>报告配置完了，自然要有依赖啊。执行<code>npm install karma-junit-reporter</code>来安装。然后在加上这个plugin:</p>

<pre><code>plugins = [
    'karma-junit-reporter'
];
</code></pre>

<h4>Coverage Reporter</h4>

<p>同JUnit Reporter一样，首先添加：</p>

<pre><code>reporters = ['coverage'];
</code></pre>

<p>进一步的配置coverage report:</p>

<pre><code>coverageReporter = {
    type : 'cobertura',
    dir : 'coverage/'
};
</code></pre>

<p>其中，type用于指出报告类型；dir用于指出生成报告的存放目录。<br/>
type包括：</p>

<ul>
<li>html (default)</li>
<li>lcov (lcov and html)</li>
<li>lcovonly</li>
<li>text (standard output)</li>
<li>text-summary (standard output)</li>
<li>cobertura (xml format supported by Jenkins)</li>
</ul>


<p>下面，需要安装依赖<code>npm install karma-coverage</code>。并在配置文件内添加：</p>

<pre><code>plugins = [
    'karma-coverage'
];
</code></pre>

<h2>创建一个样例</h2>

<p>1.执行‘karma init’,然后根据提示按Tab键进行相关选择。先生成一个默认的配置文件，这个是可以再修改的。</p>

<p>2.创建一个src文件夹，用于存放待测试的JS代码。然后在创建一个test文件夹，用于存放自己写的单元测试代码。</p>

<p>3.以mocha为例，将mocha集成到karma中，使用karma来驱动测试。这需要在karma.conf.js里进行如下配置：</p>

<pre><code>// Karma configuration
// Generated on Tue Mar 19 2013 20:46:08 GMT+0800 (CST)

// base path, that will be used to resolve files and exclude
basePath = './';

frameworks = ['mocha'];

// list of files / patterns to load in the browser
files = [
    {pattern: 'node_modules/chai/chai.js',include: true},
    'src/*.js',
    'test/*.js'
];


// list of files to exclude
exclude = [
    'karma.conf.js'
];


// use dots reporter, as travis terminal does not support escaping sequences
// possible values: 'dots', 'progress', 'junit', 'teamcity'
// CLI --reporters progress
reporters = ['progress','junit','coverage'];

junitReporter = {
    // will be resolved to basePath (in the same way as files/exclude patterns)
    outputFile: 'junit-report/test-results.xml'
};

preprocessors = {
    'src/*.js': 'coverage'
};

//Code Coverage options. report type available:
//- html (default)
//- lcov (lcov and html)
//- lcovonly
//- text (standard output)
//- text-summary (standard output)
//- cobertura (xml format supported by Jenkins)
coverageReporter = {
    // cf. http://gotwarlost.github.com/istanbul/public/apidocs/
    type : 'cobertura',
    dir : 'coverage/'
};


// web server port
port = 9876;


// cli runner port
runnerPort = 9100;


// enable / disable colors in the output (reporters and logs)
colors = true;


// level of logging
// possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG
logLevel = LOG_DEBUG;


// enable / disable watching file and executing tests whenever any file changes
autoWatch = true;


// Start these browsers, currently available:
// - Chrome
// - ChromeCanary
// - Firefox
// - Opera
// - Safari (only Mac)
// - PhantomJS
// - IE (only Windows)
// CLI --browsers Chrome,Firefox,Safari
browsers = ['Chrome'];


// If browser does not capture in given timeout [ms], kill it
captureTimeout = 6000;


// Continuous Integration mode
// if true, it capture browsers, run tests and exit
singleRun = true;


plugins = [
    'karma-mocha',
    'karma-chrome-launcher',
    'karma-firefox-launcher',
    'karma-junit-reporter',
    'karma-coverage'
];
</code></pre>

<p>4.放入相应的代码到src以及test目录里。执行&#8217;karma start&#8217;命令, 浏览器将会被打开，然后执行相应的Test。效果如下图： <br/>
<img src="http://www.shenyanchao.cn/images/blog/karma-chrome.png" alt="Karma in Chrome" /></p>

<p>完整样例代码： <br/>
<a href="https://github.com/blueshen/Karma-mocha-example">https://github.com/blueshen/Karma-mocha-example</a></p>

<h2>IntelliJ IDEA集成</h2>

<p>为了在项目中开发方便，那么在开发中集成到IDE中，会节省N多时间的。下面就先来说说于IDEA的集成。 <br/>
1.安装NodeJS插件： Settings &#8211;> IDE Settings &#8211;> Plugins &#8211;> Browse repositories &#8211;> NodeJS  选中，然后右键Download and Install进行安装。重启后成功安装。 <br/>
2.配置Karma Server: 从菜单Run &#8211;> Edit Configurations&#8230; &#8211;>点击 ‘+’新建一个Node.js类型的配置。出现以下的界面：  <br/>
<img src="http://www.shenyanchao.cn/images/blog/karma-node-server.png" alt="karma-node-server" /></p>

<p>其中：  <br/>
Name： 任意，本处为Karma node Server <br/>
Path to Node: node可执行全路径。$NODE_PATH/bin/node   <br/>
Working Directory: 当前项目的跟路径 <br/>
Path to Node App JS File: 此处为karma的可执行全路径。 <br/>
Application Parameters: 要执行的命令，此处为start   <br/>
Environment variables: 就是环境变量了。此处我定义了CHROME_BIN来指出CHROME浏览器路径。</p>

<p>3.配置Karma run   <br/>
同Karma Server，只是修改Application Parameters为run
<img src="http://www.shenyanchao.cn/images/blog/karma-node-run.png" alt="karma-node-run" /></p>

<p>配置成功后，运行Karma node Server可以看到浏览器就可以正常启动了。console也正确的输出。如同在terminal里执行一般。需要注意的是，本地开发时，需要将<code>singleRun=false</code>,也就是说执行完测试之后不退出。只有在CI环境下才用true。</p>

<p>在浏览器启动之后，如果修改了源代码，Test能否自动执行呢？可以将<code>autoWatch=true</code>,这样当你修改代码后，保存后能自动执行，方便开发了。如果‘autoWatch=false’了，那么这时间就要执行Karma run了，用于在Karma Server上重新执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始第一个Jenkins Plugin]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/03/22/jenkins-plugin-start/"/>
    <updated>2013-03-22T16:48:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/03/22/jenkins-plugin-start</id>
    <content type="html"><![CDATA[<h2>一，Jenkins插件的结构</h2>

<p>Jenkins插件实际上是一个按照一定规则组织的jar包，其结构如下：</p>

<pre><code>xxx.hpi
+- META-INF
|   +-MANIFEST.MF
+- WEB-INF
|   +- classes
|       +- index.jelly
|       +- XXXX.class
|   +- lib
+-  (static resources)
</code></pre>

<p>说明：</p>

<ul>
<li>1.插件的后缀为&#8221;.hpi&#8221;,文件名（xxx部分）是插件的简写名字，用来区分插件。</li>
<li>2.如上图结构所示，它与war包类似，只是缺少web.xml。</li>
<li>3.MANIFEST.MF包含一些入口的配置信息。其中有继承自Jenkins插件的类，用作实例化的入口。类的全名，用作我们去区分其他插件。</li>
<li>4.WEB-INF/classes 用来包含插件需要的.class，jelly页面等内容。它们可以封装成jar包放到WEB-INF/lib下面</li>
<li>5.WEB-INF/lib 包含插件中需要的.jar文件</li>
<li>6.插件需要的静态文件如图片，HTML，css样式文件，JS文件等可以放到文件的根目录下面。</li>
</ul>


<!--more-->


<h2>二，Jenkins-Plugins的开发</h2>

<p>Jenkins插件的开发，使用maven来进行项目的管理和构建。如下罗列了其中需要的步骤。</p>

<h3>2.1 Jenkins插件开发时的环境配置</h3>

<p>Jenkins插件开发，需要JDK和Maven环境。下面以windows下的环境配置为例说明。</p>

<h4>2.1.1 JDK配置</h4>

<p>JDK的版本要求在1.6以上，需要在配置文件中配置JDK的变量：</p>

<pre><code>JAVA_HOME = C:\Program Files (x86)\Java\jdk1.6.0_38   
CLASSPATH = ...;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;   
PATH = ...;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;   
</code></pre>

<h4>2.1.2 Maven的配置</h4>

<pre><code>M2_HOME =  D:\maven
M2 = %M2_HOME%\bin
MAVEN_OPTS  = -Xms256m -Xmx512m

CLASSPATH = ...;%M2%   
PATH = ...;%M2%   
</code></pre>

<p>可以通过<code>mvn --version</code>,查看maven是否配置成功。</p>

<h4>2.1.3 Maven开发环境的配置</h4>

<p>在~/.m2/settings.xml中，或者/maven/conf/settings.xml中，配置如下的Jenkins库依赖：</p>

<pre><code>&lt;settings&gt;
  &lt;pluginGroups&gt;
    &lt;pluginGroup&gt;org.jenkins-ci.tools&lt;/pluginGroup&gt;
  &lt;/pluginGroups&gt;

  &lt;profiles&gt;
    &lt;!-- Give access to Jenkins plugins --&gt;
    &lt;profile&gt;
      &lt;id&gt;jenkins&lt;/id&gt;
      &lt;activation&gt;
        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;!-- change this to false, if you don't like to have it on per default --&gt;
      &lt;/activation&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;repo.jenkins-ci.org&lt;/id&gt;
          &lt;url&gt;http://repo.jenkins-ci.org/public/&lt;/url&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
      &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;repo.jenkins-ci.org&lt;/id&gt;
          &lt;url&gt;http://repo.jenkins-ci.org/public/&lt;/url&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;id&gt;repo.jenkins-ci.org&lt;/id&gt;
      &lt;url&gt;http://repo.jenkins-ci.org/public/&lt;/url&gt;
      &lt;mirrorOf&gt;m.g.o-public&lt;/mirrorOf&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
&lt;/settings&gt;
</code></pre>

<h3>2.2 生成插件的框架程序</h3>

<p>配置好maven后，即可使用maven命令建立插件的框架，并且命令行会提示你输入groupId和artifactId：</p>

<pre><code>mvn hpi:create

Enter the groupId of your plugin: com.baidu.ite.hudson
Enter the artifactId of your plugin: samplePlugin
</code></pre>

<p>这样会建立一个工程，名字为<code>samplePlugin</code>,包路径<code>com.baidu.ite.hudson</code>。 <br/>
或者使用如下的命令：</p>

<pre><code>mvn -U org.jenkins-ci.tools:maven-hpi-plugin:create -DgroupId={your.gound.id} -DartifactId={your.plugin.id}
</code></pre>

<p>说明： <br/>
1，-u代表jenkins需要更新自己所有的插件内容。 <br/>
2，jenkins中提供的archetype-resources，文件的名字为<code>HelloWorldBuilder.java</code>。我们需要手工修改成自己需要的内容。</p>

<h4>2.2.1 代码结构</h4>

<p>使用 hpi:create生成的文件结构如下：</p>

<pre><code>+- src 
|   +- main 
|   |   +- java
|   |   |   +- groupId.HelloWorldBuilder.java 
|   |   +- resources 
|   |   |   +-  groupId.HelloWorldBuilder
|   |   |   |   +- config.jelly
|   |   |   |   +- help-name.html 
|   |   |   +- index.jelly 
</code></pre>

<p>Jenkins定义了一些扩展点（Extension Points）,这些扩展点是接口或者抽象类。你可以根据自己的需要来修改文件的名字和扩展点。我们使用命令生成的框架程序中，HelloWorldBuilder继承了Builder。</p>

<h4>2.2.2 代码的解释</h4>

<pre><code>数据的绑定：   

&lt;!--config.jelly--&gt;
&lt;f:entry title="Name" field="name"&gt;
    &lt;f:textbox /&gt;
&lt;/f:entry&gt;

//--HelloWorldBuilder.java--
@DataBoundConstructor
public HelloWorldBuilder(String name) {
    this.name = name;
}
</code></pre>

<p>首先，在config.jelly中包含需要传入的参数配置信息的文本框，field为name，这样可以在Jenkins中进行配置，然后通过DataBoundConstructor的方式，传到类中。</p>

<pre><code>Jenkins插件任务的执行

@Override
public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {
    // This is where you 'build' the project.

    // This also shows how you can consult the global configuration of the builder
        listener.getLogger().println("Hello, "+name+"!");
    return true;
}
</code></pre>

<p>根据注释可以了解：该处是你在Job进行构建时进行操作的地方，并且这里可以根据你在配置中的设置执行你需要的工作。通常，根据需要修改perform函数即可。</p>

<pre><code>传入数据的检查

 public FormValidation doCheckName(@QueryParameter String value)
                throws IOException, ServletException {
            if (value.length() == 0)
                return FormValidation.error("Please set a name");
            if (value.length() &lt; 4)
                return FormValidation.warning("Isn't the name too short?");
            return FormValidation.ok();
        }
</code></pre>

<p>在该函数中，实现在配置页面中填写内容时，进行校验的过程。如函数所述，当填入内容为空时，提示：Please set a name。你可以根据你的需要进行逻辑的控制。</p>

<h3>2.3 转换为eclipse工程</h3>

<p>为了便于在编辑器中进行修改，我们需要将生成的maven代码转化为eclipse工程，使用的命令如下：</p>

<pre><code>mvn eclipse:eclipse
或者
mvn -DdownloadSources=true -DdownloadJavadocs=true -DoutputDirectory=target/eclipse-classes eclipse:eclipse
</code></pre>

<p>第二条较长的命令中，参数是可选的。</p>

<h3>2.4 生成hpi文件</h3>

<p>使用如下命令可以生成<code>./target/pluginname.hpi</code>:</p>

<pre><code>mvn install
或者
mvn package 
</code></pre>

<p>其中mvn install 生成hpi文件，并放置到本地maven仓库中，mvn package只进行打包操作。</p>

<h3>2.5 使用.hpl进行调试</h3>

<p>maven中使用<code>.hpl（hudson plugin link）</code>格式来进行插件的调试。hpl文件中只包含一个链接，链接到类似<code>META-INF/MANIFEST.MF</code>的说明文件<code>../path/to/your/plugin/workspace/manifest-debug.mf</code>。该文件其中额外定义了一些属性来指定文件目录位置,这样资源的修改可以立即生效（需要配置stapler.jelly.noCache=true），不需要重新打包安装。 <br/>
在maven中可以使用命令：</p>

<pre><code>mvn hpi:hpl -DhudsonHome=/...
</code></pre>

<h3>2.6 使用.hpi进行测试</h3>

<p>在调试通过后，可以使用.hpi文件来启动jenkins,查看结果，命令如下：</p>

<pre><code>mvn hpi:run -DhudsonHome=/...
</code></pre>

<p>说明：-DhudsonHome可以不选，默认Jenkins安装到工程的./target目录中。</p>

<hr />

<p>致谢:lizejun</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JsTestDriver 简介]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/03/22/jstestdriver-in-brief/"/>
    <updated>2013-03-22T16:11:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/03/22/jstestdriver-in-brief</id>
    <content type="html"><![CDATA[<h1>jsTestDriver</h1>

<p>jsTestDriver是一个JavaScript单元测试工具，易于与持续构建系统相集成并能够在多个浏览器上执行运行测试，轻松实现TDD（测试驱动开发）风格的开发。当在项目中配置好js-test-driver以后，如同junit测试java文件一般，js-test-driver可以直接通过直接运行js文件，来对js文件单元测试。 <br/>
<img src="http://www.shenyanchao.cn/images/blog/jsTestDriver-framework.jpg" alt="alt jsTestDriver框架" /></p>

<!--more-->


<h5>在Intellij IDEA中安装JsTestDriver</h5>

<ul>
<li>打开IDEA编辑器，点击<strong>File</strong>，点击下拉列表中的<strong>setting</strong>，进入IDEA设置对话框</li>
<li>在搜索框中键入<strong>plugins</strong>，在搜索结果中选择<strong>plugins</strong>这一项</li>
<li>点击<strong>Browse Repositories</strong>，在弹出的列表中搜索jsTestDriver。</li>
<li>右击jsTestDriver插件，选择<strong>Download and Install</strong>.</li>
</ul>


<p><img src="http://www.shenyanchao.cn/images/blog/idea-install-jstestdriver-plugin-dialog.png" alt="alt jsTestDriver插件安装" /></p>

<h5>在IDEA中使用jsTestDriver运行js测试代码</h5>

<ul>
<li>在IDEA中新建一个空的工程，在工程目录下新建代码包test</li>
<li><p>在src代码包中新建Greeter.js代码如下：</p>

<p>  myapp = {};<br/>
  myapp.Greeter = function() { };<br/>
  myapp.Greeter.prototype.greet = function(name) {
  return &#8220;Hello &#8221; + name + &#8220;!&#8221;;<br/>
  };</p></li>
<li><p>在test代码包中新建GreeterTest.js,代码如下</p>

<p>  GGdTestCase(&#8220;GreeterTest&#8221;, {
  &#8220;test greet&#8221;: function() {</p>

<pre><code>  var greeter = new myapp.Greeter();
  assertEquals("Hello World!", greeter.greet("World"));
</code></pre>

  },
  &#8220;test greet null&#8221;: function() {

<pre><code>  var greeter = new myapp.Greeter();
  //assertNull(greeter.greet(null));
  assertTrue(true);
</code></pre>

<p>  }
  });</p></li>
<li><p>在项目主文件夹中新建配置文件greeter.jstd,文件内容如下：</p>

<p>  load:<br/>
&#8211; src/Greeter.js<br/>
&#8211;test/GreeterTest.js</p></li>
<li>启动jsTestDriver Server<br/>
<img src="http://www.shenyanchao.cn/images/blog/jsTestDriver-server.jpg" alt="alt jsTestDriver server" /></li>
<li>打开本地浏览器，访问url http://localhost:9876/capture</li>
<li>运行greeter.jstd</li>
</ul>


<h5>在Eclipse中安装jsTestDriver</h5>

<ul>
<li>在<strong>Help</strong>中的<strong>Install new software</strong>中，添加一个update site ：http://js-test-driver.googlecode.com/svn/update/</li>
<li>安装完毕后，重启Eclipse，新建一个空的java项目</li>
<li>在java项目中添加test代码包，在src中新建src.js,其代码如IDEA中的Greeter.js一样。</li>
<li>在test中添加test.js，其代码和IDEA中GreeterTest.js一样。</li>
<li><p>在项目目录中添加配置文件jsTestDriver.conf，其内容为</p>

<p>  load:<br/>
  &#8211; src/<em>.js<br/>
  &#8211; test/</em>.js<br/>
目录结构如图：<br/>
<img src="http://www.shenyanchao.cn/images/blog/eclipse-jstestDriver.jpg" alt="alt 目录结构" /></p></li>
<li>配置Run Configuration，新建一个Js Test Driver Test, 选择好项目和相应的配置文件。</li>
<li>启动jsTestDriver服务器，然后用浏览器去访问http://127.0.0.1:4244/capture，这样就可以在
浏览器中执行我们的js测试脚本了。<br/>
<img src="http://www.shenyanchao.cn/images/blog//eclipse-test.jpg" alt="alt eclipse执行结果" /><br/>
我们可以再eclipse中配置jsTestDriver的相关项，如图：<br/>
<img src="http://www.shenyanchao.cn/images/blog//eclipse-js-setting.jpg" alt="alt eclipse配置jsTestDriver" /></li>
</ul>


<hr />

<p>参考文献：<a href="http://code.google.com/p/js-test-driver/">http://code.google.com/p/js-test-driver/</a> <br/>
感谢：youthflies</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine 简介]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/03/22/jasmine-in-brief/"/>
    <updated>2013-03-22T15:47:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/03/22/jasmine-in-brief</id>
    <content type="html"><![CDATA[<h2>jasmine测试框架简介</h2>

<p><strong>jasmine</strong>是一种javascript测试框架，它既可以在html文件中运行，也可以和jsTestDriver整合，在jsTestDriver中运行。</p>

<h3>jasmine的简单语法</h3>

<p>一个基本的jasmine测试用例如下：</p>

<pre><code>describe("A suite", function() {  
    it("contains spec with an expectation", function() {  
    expect(true).toBe(true);  
    });  
});   
</code></pre>

<h4>describe方法</h4>

<p>describe方法标志着一个测试集(test suite)的开始，这个方法有两个参数，一个字符串String，一个方法function；字符串用来描述我们这个test suite，function里的东西就是测试代码，它们就是suite。</p>

<!--more-->


<h4>it方法</h4>

<p>jasmine中用方法it来开始specs（我理解成测试点，一个测试suite里可以有很多spec）。it方法和describe方法类似，同样有两个参数，一个String，一个function；String用来描述测试点（spec），function是具体的测试代码。一个测试点(spec)可以包含多个expections（其实是断言的意思）。</p>

<h4>expectations</h4>

<p>断言可以返回为true或者false。全部的断言返回true这个测试点就通过，一个或者多个断言返回false这个测试点就不通过。<br/>
describe和it都是方法，我们可以自定义一些变量，在describe中定义的变量，在it方法中可以直接使用。</p>

<pre><code>describe("A suite is just a function", function() {
var a;

it("and so is a spec", function() {
    a = true;

    expect(a).toBe(true);
});
});  
</code></pre>

<h4>Matchers</h4>

<p>一个一个的测试点们由expect开头，后面跟着一个我们需要测试的变量，如上面的a，然后跟着一个Matcher方法（我理解成校验规则），Matcher方法带着一个期望值，如上面的true。Matchers方法返回true或者false，它决定着测试点（spec）是否通过。所有的Matchers方法都能在mathcer前面加上not来进行否定断言，如`expect(a).not.toBe(true);</p>

<p>jasmine中有很多Matchers方法供我们使用，当然我们也可以定义自己的Matchers方法。</p>

<pre><code>describe("Included matchers:", function() {

    it("The 'toBe' matcher compares with ===", function() {
        var a = 12;
        var b = a;

        expect(a).toBe(b);
        expect(a).not.toBe(null);
    });  
    //上面的例子，比较a、b是否相等；验证a是否不是空。 

    it("should work for objects", function() {
        var foo = {
            a: 12,
            b: 34
        };
        var bar = {
            a: 12,
            b: 34
        };
        expect(foo).toEqual(bar);
    });
    //上面的例子比较了两个对象是否相等
});

it("The 'toMatch' matcher is for regular expressions", function() {
    var message = 'foo bar baz';

    expect(message).toMatch(/bar/);
    expect(message).toMatch('bar');
    expect(message).not.toMatch(/quux/);
});
//也可以使用正则表达式

it("The 'toBeDefined' matcher compares against `undefined`", function() {
    var a = {
        foo: 'foo'
    };

    expect(a.foo).toBeDefined();
    expect(a.bar).not.toBeDefined();
});
//验证变量是否被定义

it("The 'toBeNull' matcher compares against null", function() {
    var a = null;
    var foo = 'foo';

    expect(null).toBeNull();
    expect(a).toBeNull();
    expect(foo).not.toBeNull();
});
//验证是否为空

it("The 'toBeTruthy' matcher is for boolean casting testing", function() {
    var a, foo = 'foo';

    expect(foo).toBeTruthy();
    expect(a).not.toBeTruthy();
});

it("The 'toBeFalsy' matcher is for boolean casting testing", function() {
    var a, foo = 'foo';

    expect(a).toBeFalsy();
    expect(foo).not.toBeFalsy();
});
//变量是否能够转化成boolean变量？ 不太确定

it("The 'toContain' matcher is for finding an item in an Array", function() {
    var a = ['foo', 'bar', 'baz'];

    expect(a).toContain('bar');
    expect(a).not.toContain('quux');
});
//是否包含
it("The 'toBeLessThan' matcher is for mathematical comparisons", function() {
    var pi = 3.1415926, e = 2.78;

    expect(e).toBeLessThan(pi);
    expect(pi).not.toBeLessThan(e);
});

it("The 'toBeGreaterThan' is for mathematical comparisons", function() {
    var pi = 3.1415926, e = 2.78;

    expect(pi).toBeGreaterThan(e);
    expect(e).not.toBeGreaterThan(pi);
});
//数学大小的比较

it("The 'toBeCloseTo' matcher is for precision math comparison", function() {
var pi = 3.1415926, e = 2.78;

expect(pi).not.toBeCloseTo(e, 2);
expect(pi).toBeCloseTo(e, 0);
});
//两个数值是否接近，这里接近的意思是将pi和e保留一定小数位数后，是否相等。（一定小数位数：默认为2，也可以手动指定）

it("The 'toThrow' matcher is for testing if a function throws an exception", function() {
    var foo = function() {
    return 1 + 2;
    };
    var bar = function() {
        return a + 1;
    };

    expect(foo).not.toThrow();
    expect(bar).toThrow();
    });
}); 
//测试一个方法是否抛出异常  
</code></pre>

<h4>Setup和Teardown方法</h4>

<p>为了代码简洁，减少重复性的工作，jasmine提供<code>beforeEach</code>和<code>afterEach</code>方法。<code>beforeEach</code>会在每个spec之前执行，<code>after</code>会在每个spec之后执行，类似于selenium中的<code>beforeMethod</code>和<code>afterMethod</code>方法。</p>

<pre><code>describe("A spec (with setup and tear-down)", function() {
    var foo;

    beforeEach(function() {
        foo = 1;
    });

    afterEach(function() {
        foo = 0;
    });

    it("is just a function, so it can contain any code", function() {
        expect(foo).toEqual(1);
    });

    it("can have more than one expectation", function() {
        expect(foo).toEqual(1);
        expect(true).toEqual(true);
    });
});  
</code></pre>

<p>另外describe和it作为方法是可以嵌套的，也就是describe中可以出现子describe和it。</p>

<h4>禁用某些spec和suites</h4>

<p>在测试中，我们可能需要禁用一些suites和spec，方法是使用xdescribe和xit方法，这些测试的方法会被忽略，不计入统计结果。</p>

<h4>The Runner and Reporter</h4>

<p>Jasmine是用javascript实现的，所以它也必须在javascript的环境中运行，最简单的环境也就是一个web页面。所有的spec都可以在这个页面中运行，这个页面就叫做Runner。</p>

<p>Jasmine通过下面的js代码来展现spec运行结果：</p>

<pre><code>var htmlReporter = new jasmine.HtmlReporter(); //创建一个HTMLReporter
jasmineEnv.addReporter(htmlReporter);  

jasmineEnv.specFilter = function(spec) {  //一个过滤器，允许我们点击单个的suites，单独运行
return htmlReporter.specFilter(spec);
};  


var currentWindowOnload = window.onload;   //页面加载完毕后，执行所有的test。
window.onload = function() {
    if (currentWindowOnload) {
        currentWindowOnload();
    }

    document.querySelector('.version').innerHTML = jasmineEnv.versionString();
    execJasmine();
};

function execJasmine() {
        jasmineEnv.execute();
}
})();
</code></pre>

<hr />

<p>参考文献：<a href="http://pivotal.github.com/jasmine/">http://pivotal.github.com/jasmine/</a> <br/>
感谢：youthflies</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qunit 简介]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/03/22/qunit-in-brief/"/>
    <updated>2013-03-22T15:21:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/03/22/qunit-in-brief</id>
    <content type="html"><![CDATA[<h1>QUnit</h1>

<p>QUnit是一个强大的JavaScript单元测试框架，用于调试代码。该框架是由jQuery团队的成员所开发，并且是jQuery的官方测试套件。任意正规JavaScript代码QUnit都能测试。 <br/>
<a href="http://qunitjs.com/">项目官网</a> <br/>
<a href="https://github.com/jquery/qunit">文件下载地址</a></p>

<h1>建立测试程序</h1>

<p>建立html测试页面，引入 <code>qunit.js</code> 和 <code>qunit.css</code> 这两个必需的文件。其中<code>qunit.js</code>是测试套件程序，<code>qunit.css</code>用于控制测试套件的结果显示的样式。</p>

<pre><code>&lt;!--sample.html:--&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;
  &lt;title&gt;QUnit basic example&lt;/title&gt;
  &lt;link rel="stylesheet" href="./resources/qunit.css"&gt;
&lt;script type="text/javascript" src="./resources/jquery.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="qunit"&gt;&lt;/div&gt;
  &lt;div id="qunit-fixture"&gt;&lt;/div&gt;
  &lt;script src="./resources/qunit.js"&gt;&lt;/script&gt;
  &lt;script&gt;
    test( "a basic test example", function() {
      var value = "hello";
      equal( value, "hello", "We expect value to be hello" );
    });
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<!--more-->


<p>其中放置的文件及文件结构如下：</p>

<pre><code>|-qunit-test   
|  |-sample.html   
|  |-resources   
|  |    |-qunit.js   
|  |    |-qunit.css
|  |    |-jquery.js   
</code></pre>

<p>测试的结果会由<code>qunit.js</code>控制输出到页面代码中的<code>&lt;div id="qunit"&gt;&lt;/div&gt;</code>中。另外一个必不可少的元素是<code>&lt;div id=""qunit-fixture""&gt;&lt;/div&gt;</code>。在每个test执行完毕后，如果改动了该元素，会自动重置。<code>jquery.js</code>的引入是为了测试使用jQuery语法写的程序。 <br/>
在浏览器中打开sample1.html可以看到结果显示如下图所示： <br/>
<img src="http://www.shenyanchao.cn/images/blog/qunit-pic.png" alt="qunit的用例运行显示结果" /></p>

<h1>测试框架使用说明</h1>

<p>标题下面有一条横线，绿色表示全部用例正确，红色表示至少有一个用例错误。 <br/>
下面是3个checkbox。&#8221;Hide passed tests&#8221;点击后可以过滤掉通过的用例，只显示失败的用例。&#8221;Check for Globals&#8221;，用来检查window对象在test运行前后的变化，如果出现变化，则会报错。&#8221;No try-catch&#8221;用来显示测试用例中抛出的异常，当选中时直接将其死掉，不选中时则显示报错信息。对每个测试用例，标题中包含（x,y,z）表示总共有z个断言，y个是正确的，x个是错误的。</p>

<h1>断言</h1>

<ul>
<li><strong>ok( truthy [, message ] )</strong>   判断是否为true</li>
<li><strong>equal( actual, expected [, message ] )</strong>    判断actual==expected</li>
<li><strong>deepEqual( actual, expected [, message ] )</strong>    判断actual===expected</li>
</ul>


<p>用例如下：</p>

<pre><code>test("assertion",function(){   

    ok( true, "true succeeds" );
    ok( NaN, "NaN fails" );

    equal( 0, 0, "0, 0 : equal succeeds" );
    equal( "", 0, "Empty, 0: equal succeeds" );
    equal( null, "", "null, empty: equal fails" );

    var obj = { foo: "bar" };
    deepEqual( obj, { foo: "bar" }, "Two objects can be the same in value" );
    equal( "", 0, "Empty, 0: equal succeeds" );
});    
</code></pre>

<h1>测试同步代码</h1>

<p>在同步代码的测试中，有两种方式： <br/>
-   test( name, expected, fucntion(){&#8230;})：expceted指assertion的数量。 <br/>
-   test( name, function(){expected(amount);&#8230;})：在function中增加expected(amount)，amount表示assertiong的数量。</p>

<p>test()是常规的测试用例，并且默认是同步的，这意味着他们是一个接一个的运行。expected()最有价值的地方在于callback函数的测试。当callback函数因为任何原因不能执行时，会造成实际断言的数量不等于expected值，这时会有额外的错误提示。</p>

<pre><code>test( "a test", 2, function() {
    ok( true, "sucess" );
    ok( false, "fail" );
});   

test( "a test", function() {
  expect( 2 );

  function calc( x, operation ) {
    return operation( x );
  }

  var result = calc( 2, function( x ) {
    ok( true, "calc() calls operation function" );
    return x * x;
  });

  equal( result, 4, "2 square equals 4" );
});
</code></pre>

<h1>测试异步代码</h1>

<p>对Ajax请求或通过setTimeout()或sestInterval()调用的方法，需要使用异步测试函数asyncTest()。</p>

<pre><code>asyncTest( "asynchronous test: one second later!", function() {
  expect( 1 );

  setTimeout(function() {
     ok( true, "Passed and ready to resume!" );
     start();
  }, 1000);
});      
</code></pre>

<h1>用户行为的测试</h1>

<p>测试用户行为时，无法使用一个函数就搞定，通常需要使用一个匿名函数绑定到元素的事件上来模拟。事件的触发使用<code>trigger()</code>或者<code>triggerHandler()</code>来实现。</p>

<pre><code>test( "div click test", 1, function() {
  var $body = $( "#qunit-fixture" );

  $body.bind( "click", function() {
    ok( true, "body was clicked!" );
  });

  $body.trigger( "click" );
});
</code></pre>

<p>下面是Qunit中的一个demo例子，其中模拟了一个key的记录器<code>KeyLogger()</code>，在test中初始化了一个事件event，并且使触发了两次，：</p>

<pre><code>function KeyLogger( target ) {
  if ( !(this instanceof KeyLogger) ) {
    return new KeyLogger( target );
  }
  this.target = target;
  this.log = [];

  var self = this;

  this.target.bind( "keydown", function( event ) {
    self.log.push( event.keyCode );
  });
}
test( "keylogger api behavior", function() {

  var event,
      $doc = $( document ),
      keys = KeyLogger( $doc );

  // trigger event
  event = $.Event( "keydown" );

  event.keyCode = 'A';
  $doc.trigger( event );
  $doc.trigger( event );

  // verify expected behavior
  equal( keys.log.length, 2, "2 key was logged" );
  equal( keys.log[ 0 ], 'A', "correct key was logged" );

});   
</code></pre>

<h1>模块化</h1>

<p>为了使自己的用例的顺序更加富有逻辑性，可以使用module()函数对用例进行分组。对出现在某个module（）后面的所有用例都被分在该组中。</p>

<pre><code>module( "group a" );
test( "a basic test example", function() {
  ok( true, "this test is fine" );
});
test( "a basic test example 2", function() {
  ok( true, "this test is fine" );
});

module( "group b" );
test( "a basic test example 3", function() {
  ok( true, "this test is fine" );
});
test( "a basic test example 4", function() {
  ok( true, "this test is fine" );
});
</code></pre>

<p>除了可以进行分组之外，module()还可以从测试用例中抽取通用的代码，用可选的第二个参数来定义每个test在运行之前、之后的函数。</p>

<pre><code>module( "module", {
  setup: function() {
    ok( true, "one extra assert per test" );
  }, teardown: function() {
    ok( true, "and one extra assert after each test" );
  }
});
test( "test with setup and teardown", function() {
  expect( 3 );
  ok( true, "test" );
});
</code></pre>

<h1>推荐使用的框架程序</h1>

<p>最上面建立的测试框架为用于学习时建立的demo框架。真正在使用中，为了方便我们习惯通过外部引入的方式来进行测试用例的书写。如下面所示，直接在项目中引入项目代码<code>myProject.js</code>和测试代码<code>myTests.js</code>。</p>

<pre><code>&lt;!--sample-framework.html:--&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;
  &lt;title&gt;QUnit basic example&lt;/title&gt;
  &lt;link rel="stylesheet" href="./resources/qunit.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="qunit"&gt;&lt;/div&gt;
  &lt;div id="qunit-fixture"&gt;&lt;/div&gt;
  &lt;script src="./resources/qunit.js"&gt;&lt;/script&gt;
  &lt;script type="text/javascript" src="./resources/jquery.js"&gt;&lt;/script&gt;
    &lt;!-- 项目代码 --&gt;
  &lt;script type="text/javascript" src="myProject.js"&gt;&lt;/script&gt;
    &lt;!-- 测试代码 --&gt;
  &lt;script type="text/javascript" src="myTests.js"&gt;&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<hr />

<p>参考文献：<a href="http://qunitjs.com/cookbook/">http://qunitjs.com/cookbook/</a> <br/>
感谢：lizejun</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocha简介]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/03/18/mocha-in-brief/"/>
    <updated>2013-03-18T20:44:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/03/18/mocha-in-brief</id>
    <content type="html"><![CDATA[<h2>Mocha</h2>

<p>Mocha作为一种咖啡名，应该是广为人知的，中文翻译为<strong>摩卡</strong>。在这里，我们介绍的是一个JavaScript Test Framework，它用于对NodeJS、JavaScript进行单元测试。<br/>
Mocha是一个功能丰富的Javascript测试框架，能够运行在node和浏览器上，并且有丰富的报表支持。 <br/>
项目主页：<a href="http://visionmedia.github.com/mocha/">http://visionmedia.github.com/mocha/</a></p>

<h2>安装</h2>

<pre><code>npm install -g mocha
</code></pre>

<h2>一个简单的样例</h2>

<pre><code>$ mkdir test
$ cd ..
$ mocha test/test.js

var assert = require("assert")
describe('Array', function(){
describe('#indexOf()', function(){
    it('should return -1 when the value is not present', function(){
    assert.equal(-1, [1,2,3].indexOf(5));
    assert.equal(-1, [1,2,3].indexOf(0));
    })
})
})

$  mocha

 .

 ✔ 1 test complete (1ms)
</code></pre>

<!--more-->


<h2>Assertions</h2>

<p>在Java Unit Test中类似JUNIT，TestNG提供了不少的Assert函数。同样的，mocha也有很多选择。而这些并不属于mocha的一部分。</p>

<ul>
<li><a href="http://github.com/visionmedia/should.js">should.js</a></li>
<li><a href="https://github.com/LearnBoost/expect.js">expect.js</a></li>
<li><a href="http://chaijs.com/">chai</a></li>
<li><a href="https://github.com/visionmedia/better-assert">better-assert</a></li>
</ul>


<h2>测试同步代码</h2>

<pre><code>describe('Array', function(){
describe('#indexOf()', function(){
    it('should return -1 when the value is not present', function(){
    [1,2,3].indexOf(5).should.equal(-1);
    [1,2,3].indexOf(0).should.equal(-1);
    })
})
})
</code></pre>

<h2>测试异步代码</h2>

<p>添加一个回调函数，通常称为done,给it。mocha就会知道应该等待操作完成。</p>

<pre><code>describe('User', function(){
describe('#save()', function(){
    it('should save without error', function(done){
    var user = new User('Luna');
    user.save(done);
    })
})
})
</code></pre>

<h2>类似与JUNIT的函数</h2>

<ul>
<li>before : 在所有测试执行之前</li>
<li>after ： 在所有测试执行之后</li>
<li>beforeEach ： 每个测试之前</li>
<li>afterEach ：每个测试之后</li>
</ul>


<h2>mocha指令</h2>

<pre><code>Usage: mocha [debug] [options] [files]

Commands:

init &lt;path&gt;
initialize a client-side mocha setup at &lt;path&gt;

Options:

-h, --help                      帮助信息
-V, --version                   版本信息
-r, --require &lt;name&gt;            依赖的module
-R, --reporter &lt;name&gt;           使用的报告模式
-u, --ui &lt;name&gt;                 用什么接口(bdd|tdd|exports)
-g, --grep &lt;pattern&gt;            执行匹配 &lt;pattern&gt;的测试
-i, --invert                    --grep 相反的测试
-t, --timeout &lt;ms&gt;              超时毫秒数 [2000]
-s, --slow &lt;ms&gt;                 "slow" 测试的门槛 [75]
-w, --watch                     查看文件的变化，如true,则变化后自动运行。
-c, --colors                    启用colors
-C, --no-colors                 禁用colors
-G, --growl                     启用growl notification
-d, --debug                     启用debug
-b, --bail                      只对第一个报错的TEST感兴趣
--recursive                     递归执行
--debug-brk                     enable node's debugger breaking on the first line
--globals &lt;names&gt;               allow the given comma-delimited global [names]
--ignore-leaks                  ignore global variable leaks
--interfaces                    显示可用的接口
--reporters                     显示可用的报表列表
--compilers &lt;ext&gt;:&lt;module&gt;,...  使用指定的module来编译文件
</code></pre>

<h2>报表</h2>

<pre><code>dot - dot matrix
    doc - html documentation
    spec - hierarchical spec list
    json - single json object
    progress - progress bar
    list - spec-style listing
    tap - test-anything-protocol
    landing - unicode landing strip
    xunit - xunit reportert
    teamcity - teamcity ci support
    html-cov - HTML test coverage
    json-cov - JSON test coverage
    min - minimal reporter (great with --watch)
    json-stream - newline delimited json events
    markdown - markdown documentation (github flavour)
    nyan - nyan cat!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Karma  or Testacular 简介]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/03/12/testacular-in-brief/"/>
    <updated>2013-03-12T15:12:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/03/12/testacular-in-brief</id>
    <content type="html"><![CDATA[<h2>Karma/Testacular是什么？</h2>

<p>在2012年11月，Google开源了<a href="http://testacular.github.com/">Testacular</a>，一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。</p>

<p>Testacular可以在不同的桌面或移动设备浏览器上，或在持续集成的服务器上测试JavaScript代码。Testacular支持chrome、ChromeCanary、 Safari、Firefox、IE、Opera、PhantomJS，知道如何捕获浏览器正使用的默认路径，这些路径可能在启动器配置文件被忽视（overridden）。Testacular就是一个可以和多重测试框架协作的测试执行过程管理工具，它有针对Jasmine、Mocha和AngularJS的适配器，它也可以与<a href="http://jenkins-ci.org/">Jenkins</a>或<a href="https://travis-ci.org/">Travis</a>整合，用于执行持续集成测试。</p>

<!--more-->


<p>这个测试工具的一个强大特性就是，它可以监控一套文件的变换，并立即开始测试已保存的文件，用户无需离开文本编辑器。测试结果通常显示在命令行中，而非代码编辑器。这也就让Testacular基本可以和任何JS编辑器一起使用。为更好结果，它可以整合到<a href="http://www.jetbrains.com/webstorm/">WebStorm</a>中，而WebStorm持错误栈追踪和单元测试调试。</p>

<p>为更好运行，Testacular需要Node.js和一个配置文件，该配置文件包括：待测试的文件、需忽略的文件、基本路径、web服务器端口、日子等级等。（配置文件样例）</p>

<p>说到Testacular的性能，Google工程师Vojta Jína在Chrome Canary和Chrome做了一个演示，用WebStorm大约执行了1500个AngularJS测试，在5秒之内完成。</p>

<p>Jína也说到Testacular是受<a href="http://code.google.com/p/js-test-driver/">JS Test Driver(JSTD)</a>的启发，但他们决定写一个完全不同的测试执行过程管理工具，因为JSTD有很多问题，他们想要一个能稳定并快速执行Javascript测试的工具。所以他们用了Socket.io库和Node.js。</p>

<h2>Vojta Jína原版视频</h2>

<p>youtube(凸墙): <br/>
<a href="http://www.youtube.com/watch?v=5mHjJ4xf_K0">http://www.youtube.com/watch?v=5mHjJ4xf_K0</a>  <br/>
<a href="http://www.youtube.com/watch?v=MVw8N3hTfCI">http://www.youtube.com/watch?v=MVw8N3hTfCI</a>  <br/>
youku[个人转录]:</p>

<iframe height=498 width=510 src="http://player.youku.com/embed/XNTI2NTg0Nzky" frameborder=0 allowfullscreen></iframe>




<iframe height=498 width=510 src="http://player.youku.com/embed/XNTI2NTg0Mzc2" frameborder=0 allowfullscreen></iframe>


<h2>Karma/Testacular 安装</h2>

<p>首先，保证已经有Node.js环境以及NPM。然后执行以下命令即可：</p>

<pre><code>npm install -g karma/testacular
</code></pre>

<p>安装成功后，可以查看其支持的命令。</p>

<pre><code>testacular --help
Testacular - Spectacular Test Runner for JavaScript.

Usage:
testacular &lt;command&gt;

Commands:
start [&lt;configFile&gt;] [&lt;options&gt;] Start the server / do single run.
init [&lt;configFile&gt;] Initialize a config file.
run [&lt;options&gt;] Trigger a test run.

Run --help with particular command to see its description and   available options.

Options:
--help     Print usage and options.
--version  Print current version.   
</code></pre>

<p>简单来看，就只有start,init,run这几个命令。start用于启动浏览器server,init用于辅助的生成配置文件，run用于驱动Test执行。<br/>
下面就来看以下，最主要的部分，那就是配置文件了。</p>

<h2>Karma/Testacular配置文件</h2>

<p>这个配置文件，定义了Test执行所需要的各种选项，testacular正是通过这个文件来进行测试执行的。 <br/>
在GitHub上可以看到一个官方提供的默认样例<a href="https://github.com/testacular/testacular/blob/master/test/client/testacular.conf.js">https://github.com/testacular/testacular/blob/master/test/client/testacular.conf.js</a>,可以看出里面有相当多的配置，还要里面都有一些注释的了，都大概能看懂一点。<br/>
同样的，使用<code>karma/testacular init</code>命令也可以帮助你自动的生成一个配置文件。init后可以跟文件名，如果不写，默认的文件名就是karma/testacular.conf.js。对应的<code>karma/testacular start</code>也会默认搜索当前目录下的karma/testacular.conf.js来启动。  <br/>
下面，我们来生成一个看看：</p>

<pre><code>karma/testacular init my.conf.js

Which testing framework do you want to use ?
Press tab to list possible options. Enter to move to the next   question.
&gt; mocha

Do you want to use Require.js ?
This will add Require.js adapter into files.
Press tab to list possible options. Enter to move to the next question.
&gt; no

Do you want to capture a browser automatically ?
Press tab to list possible options. Enter empty string to move to the next question.
&gt; Firefox
......

Config file generated at "/home/shenyanchao/tmp/my.conf.js".
</code></pre>

<p>这样就生成了一个my.conf.js文件。其中要我们自己要做的就是选择一下而已。需要注意的是，正如提示所说，选择切换使用的是<strong>Tab</strong>。<br/>
此时，执行<code>testacular start my.conf.js</code>,可以发现，浏览器已经启动了。</p>

<p><img src="http://www.shenyanchao.cn/images/blog/testacular-run-in-firefox.png" alt="Testacular启动" /></p>

<p><strong>配置文件参数：</strong></p>

<pre><code>autoWatch

类型: Boolean
默认: false
命令行: --auto-watch, --no-auto-watch
详细介绍:当检测到文件内容变化的时候，是不是自动的重新运行Test

basePath

类型: String
默认: ''
详细介绍: 基本路径，用来解决相对路径问题。

browsers

类型: Array
默认: []
命令行: --browsers Chrome,Firefox
取值:
Chrome
ChromeCanary
Firefox
Opera
Safari
PhantomJS
IE
详细介绍: 定义一组需要启动的浏览器，那么所有测试将分别在各个浏览器运行并给出结果。关闭的时候也同时全部关闭。

captureTimeout

类型: Number
默认: 60000
详细介绍: 捕获浏览器的超时时间 (单位 ms)。超时后，testacular会关闭然后重新尝试。  

colors

类型: Boolean
默认: true
命令行: --colors, --no-colors
详细介绍: 在reporters和logs里面是否启用色彩。
exclude

类型: Array
默认: []
详细介绍: 排除在外的文件列表或者正则表达式

files

类型: Array
默认: []
详细介绍: 要加载的文件列表或者正则表达式

hostname

类型: String
默认: 'localhost'
详细介绍: 启动的浏览器主机名

logLevel

类型: Constant
默认: LOG_INFO
命令行: --log-level debug
取值:
LOG_DISABLE
LOG_ERROR
LOG_WARN
LOG_INFO
LOG_DEBUG
详细介绍: 日志级别.

loggers

类型: Array
默认: [{type: 'console'}]
详细介绍: 定义日志目标。比如log4js

port

类型: Number
默认: 9876
命令行: --port 9876
详细介绍: web服务的监听端口

preprocessors

类型: Object
默认: {'**/*.coffee': 'coffee'}
详细介绍: 前置处理器的MAP

proxies

类型: Object
默认: {}
详细介绍: 路径代理的映射MAP
例如:
proxies =  {
    '/static': 'http://gstatic.com',
    '/web': 'http://localhost:9000'
};

reportSlowerThan

类型: Number
默认: 0
详细介绍: 这时一个以ms为单位的数值，如果test执行超过这个时间，那么Testacular会进行记录。 

reporters

类型: Array
默认: ['progress']
命令行: --reporters progress,growl
取值:
dots
progress
junit
growl
coverage
详细介绍: 使用的报表列表

runnerPort

类型: Number
默认: 9100
命令行: --runner-port 9100
详细介绍: 使用testacular run时，服务器的监听端口

singleRun

类型: Boolean
默认: false
命令行: --single-run, no-single-run
详细介绍: CI模式。如为true，就会在所有浏览器运行，运行结束后关闭浏览器，返回码0，失败返回1.

urlRoot

类型: String
默认: '/'
详细介绍: 基本URL，相当于一个URL默认的前缀。尤其在使用proxies时有用。
</code></pre>

<h2>browser无法启动？</h2>

<p>当在karma/testacular.conf.js中配置完browsersCanary，有可能会出现无法启动浏览器的情况。testacular会在一套默认的路径下进行尝试加载启动浏览器，而在不同的操作系统下默认位置是不同的。
如果无法找到，可以通过覆盖<code>&lt;BROWSER&gt;_BIN</code>来解决。 <br/>
比如：</p>

<pre><code>export CHROME_BIN=/usr/local/bin/my-chrome-build
export CHROME_CANARY_BIN=/usr/local/bin/my-chrome-build
export PHANTOMJS_BIN=$HOME/local/bin/phantomjs
</code></pre>

<p>就是要设置相应的变量。在windows下自然就是添加相应的环境变量了。这样配置后，testacular就直到从哪儿加载启动浏览器了。</p>

<h2>写在Testacular学习之后</h2>

<p>Testacular应该是Google<a href="http://angularjs.org/">AngularJS</a>的副产品。出于CommonJS的规范，以及对产品质量的保证。AngularJS只身需要进行单元测试，而在测试过程中遇到了种种的问题。也许他们最开始就是使用JsTestDriver来驱动测试的，后来发现不能满足需求，或者能更好。因此Testacular出现了，并开源了出来。<br/>
以上，存在一定的个人猜测，但是其产生的过程值得好好学习。</p>

<h2>改名为Karma</h2>

<p>2013年3月18日，Testacular更名为Karma，版本从V0.6.0直接升为V0.8.0，并在GitHub上提交时评论为<code>chore: rename this shit to Karma</code>。具体什么原因，不得而知。也许是因为令人诟病的Testacular名字不好听吧。不过功能都是一样的，只是使用的时候，testacular变为karma了。所以上面文档中的操作，只需要全部替换即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Node.js开发指南》读书笔记]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/03/11/node-dot-js-develop-guide-reading-note/"/>
    <updated>2013-03-11T16:53:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/03/11/node-dot-js-develop-guide-reading-note</id>
    <content type="html"><![CDATA[<h3>书籍信息</h3>

<p>Amazon: <a href="http://www.amazon.cn/Node-js%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97-%E9%83%AD%E5%AE%B6%E5%AE%9D/dp/B008HN793I">NodeJS开发指南</a></p>

<p>PDF: <a href="http://azrael.ihorsley.com/wordpress/wp-content/uploads/2012/11/Node.js%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97_%E4%B8%AD%E6%96%87%E6%AD%A3%E7%89%88.pdf">免费下载</a></p>

<h3>NodeJS简介</h3>

<p>是NodeJS的出现，让JavaScript在服务器端得以使用，重新焕发了生机。而不仅仅像大家所认为的，只是一个客户端脚本语言。<br/>
由于JavaScript自身的脚本语言特性，造成开发混乱，难以维护。CommonJS对这个进行了规范。像NodeJS,ringojs都是对这一规范的具体实现。
CommonJS规范包括：</p>

<ul>
<li>模块（modules）</li>
<li>包（packages）</li>
<li>系统（system）</li>
<li>二进制（binary）</li>
<li>控制台（console）</li>
<li>编码（encodings）</li>
<li>文件系统（filesystems）</li>
<li>套接字（sockets）</li>
<li>单元测试（unit testing）</li>
</ul>


<!--more-->


<h3>NodeJS的模块与包</h3>

<p>模块（module）和包(package)是NodeJS的基本。并且都是参照CommonJS标准来实现的。如果项目有一定的规模，势必要把各种功能模块进行切分，然后再组装起来。这也正式所有服务器端的通用做法。然而，在NodeJS中怎么实现模块之间的调用呢，这里是使用require函数的。模块和包通常区分不是很明确，可以认为是一致的。</p>

<h4>1.什么是模块？</h4>

<pre><code>var http = require("http");
</code></pre>

<p>其中http就是nodeJs中的一个核心模块. 像Java中的import一样，这里是使用require来引入这个模块。</p>

<h4>2.创建与发布模块</h4>

<p>NodeJS提供了exports和require两个对象来完成，exports用于公开模块的接口，require用于获取外部模块的接口。
如创建一个module.js:</p>

<pre><code>var name;
exports.setName=function(thyName){
     name=thyName;
     }
     exports.sayHello = function(){
    console.log('Hello '+name);
}
</code></pre>

<p>在同一个目录下，再创建一个getmodule.js:</p>

<pre><code>var mymodule = require('./module');
myModule.setName('shenyanchao');
myModule.sayHello();
</code></pre>

<p>运行后的结果：</p>

<pre><code>Hello shenyanchao
</code></pre>

<p>这就是一个简单的模块发布与调用关系。</p>

<h4>3.包（package）</h4>

<p>包是对模块的更进一步的抽象。类似与Java的类库概念。当包便多，甚至依赖很复杂的时候，就需要一个管理工具，就像是Java的Maven用来管理Jar包一样。NodeJs用NPM（Node Packages Manager）来发布、更新、依赖管理和版本控制。<br/>
直观上看，NodeJS的包是一个目录，并且包含一个package.json文件。一个符合CommonJS的包应有以下的特征：</p>

<ul>
<li>package.json在包的顶层目录下；</li>
<li>二进制可执行文件在bin目录下；</li>
<li>JS代码在lib目录下；</li>
<li>文档在doc目录下；</li>
<li>单元测试在test下；
这就相当于对包的目录结构进行了一个定义，类似于J2EE的规范一样，减少大家的学习成本，什么东西放在哪儿都一清二楚。如果在github或者googlecode上看开源项目，绝对都是这样的结构。</li>
</ul>


<p>模块与文件是一一对应的。文件不仅可以是 JavaScript 代码或二进制代码,还可以是一个文件夹。最简单的包,就是一个作为文件夹的模块。建立一个叫做 somepackage 的文件夹,在其中创建 index.js,内容如下:</p>

<pre><code>exports.hello = function() {
   console.log('Hello.');
};
</code></pre>

<p>然后在 somepackage 之外建立 getpackage.js,内容如下:</p>

<pre><code>var somePackage = require('./somepackage');
somePackage.hello();
</code></pre>

<p>运行 node getpackage.js,控制台将输出结果 Hello。 <br/>
我们使用这种方法可以把文件夹封装为一个模块,即所谓的包。包通常是一些模块的集合,在模块的基础上提供了更高层的抽象,相当于提供了一些固定接口的函数库。通过定制package.json,我们可以创建更复杂、更完善、更符合规范的包用于发布。 <br/>
<strong>package.json</strong>
在somepackage 文件夹下,我们创建一个叫做 package.json 的文件,内容如下所示:</p>

<pre><code>{
    "main" : "./lib/interface.js"
}
</code></pre>

<p>然后将 index.js 重命名为 interface.js 并放入 lib 子文件夹下。以同样的方式再次调用这个包,依然可以正常使用。 <br/>
NodeJS在调用某个包时,会首先检查包中 package.json 文件的 main 字段,将其作为包的接口模块,如package.json 或 main 字段不存在,会尝试寻找 index.js 或 index.node 作为包的接口。<br/>
package.json 是 CommonJS 规定的用来描述包的文件,完全符合规范的 package.json 文件应该含有以下字段。 <br/>
name:包的名称,必须是唯一的,由小写英文字母、数字和下划线组成,不能包含空格。 <br/>
description:包的简要说明。 <br/>
version:符合语义化版本识别 规范的版本字符串。<br/>
keywords:关键字数组,通常用于搜索。 <br/>
maintainers:维护者数组,每个元素要包含 name、email (可选) web (可选)字段。<br/>
contributors:贡献者数组,格式与maintainers相同。包的作者应该是贡献者数组的第一个元素。 <br/>
bugs:提交bug的地址,可以是网址或者电子邮件地址。 <br/>
licenses:许可证数组,每个元素要包含 type (许可证的名称)和 url (链接到许可证文本的地址)字段。 <br/>
repositories:仓库托管地址数组,每个元素要包含 type(仓库的类型, git )如url (仓库的地址)和 path (相对于仓库的路径,可选)字段。 <br/>
下面是mocha的package.json:</p>

<pre><code>{
 "name": "mocha",
 "version": "1.8.1",
"description": "simple, flexible, fun test framework",
 "keywords": [
 "mocha",
    "test",
 "bdd",
 "tdd",
 "tap"
],
 "author": {
 "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
 },
"repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/mocha.git"
 },
"main": "./index",
"bin": {
    "mocha": "./bin/mocha",
    "_mocha": "./bin/_mocha"
},
"engines": {
    "node": "&gt;= 0.4.x"
},
"scripts": {
    "test": "make test-all"
 },
"dependencies": {
    "commander": "0.6.1",
    "growl": "1.7.x",
    "jade": "0.26.3",
    "diff": "1.0.2",
    "debug": "*",
    "mkdirp": "0.3.3",
    "ms": "0.3.0"
},
"devDependencies": {
 "should": "*",
    "coffee-script": "1.2"
 },
"readme": "..."
}
</code></pre>

<p>也就是说，这里面提供了完善的信息来告诉npm，怎么样安装、升级、传播。 <br/>
如执行：</p>

<pre><code>npm install -g mocha
</code></pre>

<p>那么，npm将会依据json提供的信息来进行管理。</p>

<h4>4.npm的本地模式与全局模式</h4>

<p>npm默认会从http://npmjs.org上搜索并下载包，并将包安装在当前目录的node_modules子目录下。这种就称为本地模式。也就意味着只能在当前目录使用。如果想在全部地方可用，那就用<code>-g</code>参数。这样包就会安装到NODE_PATH里了，在任何目录都可以使用了。g应该就是global的缩写，很容易记。</p>

<h3>模块（modules）的加载机制</h3>

<p>前面，已经知道模块加载是通过require来进行的。NodeJS的模块可以分为2大类，一类是核心模块、一类是文件模块。核心模块有最高的优先级，如有模块命名冲突，NodeJS总是优先加载核心模块。<br/>
那么，文件模块是如何加载的呢？</p>

<h4>按路径加载模块</h4>

<p>1.如果require按“/”开头，那就是绝对路径进行加载。如require(&#8216;/home/shenyanchao/module&#8217;),将会按照以下优先级尝试加载 /home/shenyanchao/module.js、/home/shenyanchao/module.json、/home/shenyanchao/module.node。 <br/>
2.如果require按“./”或者“../”开头，则是依相对路径来查找模块，这种较为常见。<br/>
3.对于核心模块,比如require(&#8216;http&#8217;)，nodeJS是怎么找到的呢，自然是通过NODE_PATH目录加载的。那么对于文件模块，如果不用绝对路径已经相对路径，那么该如何查找呢？ <br/>
如果，使用require(&#8216;mymodule&#8217;),那么NodeJS将首先在当前目录的node_modules目录内进行尝试加载。如果没有找到，那么将会到当前目录的上一级目录的node_modules继续查找，并反复执行，直到根目录为止。 <br/>
例如： 我们在/home/shenyanchao/develop/app.js中使用require(&#8216;mymodule&#8217;)，NodeJS的查找路径如下：</p>

<ul>
<li>/home/shenyanchao/develop/node_modules/mymodule.js</li>
<li>/home/shenyanchao/node_modules/mymodule.js</li>
<li>/home/node_modules/mymodule.js</li>
<li>/node_modules/mymodule.js</li>
</ul>


<p>这个时候，明白了加载机制，就可以返回来，看一下模块的本地模式于全局模式来。当以本地模式<code>npm install mocha</code>的时候，会在当前目录建立一个node_modules目录，这就保证了系统内使用require(&#8216;mocha&#8217;)时，能够直接使用。而<code>npm install -g mocha</code>相当于把mocha安装到NODE_PATH，这样就使用类似于加载核心模块的形式进行加载了。</p>

<h3>express: JS的MVC框架</h3>

<p>这里介绍来一个强大的Web application Framework for Node。用于进行WEB项目的开发。类似于Java的SpringFramework。很轻量级，简单易用。 <br/>
express将NodeJS的开发，推向了一个新的高度。很有兴趣，待研究！  <br/>
express主页：<a href="http://expressjs.com/">http://expressjs.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《探索式软件测试》读书笔记(1)]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/01/21/exploratory-software-testing-reading-notes-1/"/>
    <updated>2013-01-21T19:14:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/01/21/exploratory-software-testing-reading-notes-1</id>
    <content type="html"><![CDATA[<p>书中，完全以旅游来讲解各种测试方法，从而让晦涩的理论变得浅显易懂。 <br/>
一般情况下，旅游地都会有这样一些区域：</p>

<ul>
<li><strong>商业区</strong>: 早晚交通拥挤，上班紧张。商业区有银行、办公楼、各类商店。对软件来说，指的是“在那里完成实际业务”。</li>
<li><strong>历史区</strong>: 城市一般都有写历史古迹，历史事件吸引着大批的旅游者。对软件来说，就是“历史遗留代码”。</li>
<li><strong>旅游区</strong>: 专门针对旅游者的区域，而一般人是不会去的。这是说故宫、长城吗？软件的有些特性和功能就是专门针对新用户的，老用户则不再使用。</li>
<li><strong>娱乐区</strong>: 旅游者看了所有景点和名胜古迹后，通常是很累的，筋疲力尽之后难免要去一些地方娱乐娱乐的，借此来消磨时间。软件也有这样的辅助特性和功能。</li>
<li><strong>旅馆区</strong>: 是人总是要有个休息的地方，睡一觉。可有时候，“休息”时还是很忙的。软件尤其如此。</li>
<li><strong>破旧区</strong>：每个城市都有阴暗的一面，但也有很多人无限向往之，贫民窟的百万富翁之类的。这些地方尽量不去，但是这些地方也可能存在一些漏洞。</li>
</ul>


<!--more-->


<h3>商业区测试类型</h3>

<p>商业区特点在于，上下班高峰以及午餐时间。并且是工作得以完成的地方。</p>

<blockquote><p><strong>指南测试法</strong>： 测试人员按照用户手册进行操作。 <br/>
各大旅游地，通常都有各种旅游攻略，告诉你应该去哪里，怎么选择路线等等。</p>

<p><strong>卖点测试法</strong>： 按照销售人员对客户演示的顺序（卖点）进行测试。 <br/>
令旅游者向往的任何一个地方一定有吸引他们的理由。</p>

<p><strong>地标测试法</strong>： 选择一个功能点，然后向另外的功能点测试。<br/>
在森林里漫步，首先要定位一个大致的方向，然后从一个地标开始走，走到下一个地标，最终到达目的地。</p>

<p><strong>极限测试法</strong>： 向软件提出很多难以回答的问题。 <br/>
旅游中，你可能会有很多问题要问，你的导游需要来回答你提出的问题。那如何判断一个导游是否真的很牛呢，发挥你的能力，向导游尽可能的发问。</p>

<p><strong>快递测试法</strong>： 专注与数据，保证数据在任何出现的地方都是同一个。<br/>
信息时代，网购盛行，快递更是得到大家青睐。但绝不允许出现的是，快递的东西在整个运输过程中发生了变化。即使是A->B->C->A也是不允许的，通常这个快递公司不会这么傻逼的，因此要绝对保证A->A->A->A，不能开封的说。</p>

<p><strong>深夜／清晨测试法</strong>： 在软件的空闲时段，去测试一些功能。 <br/>
下班后，城市很拥挤，这个时候的商业区是空荡荡的。但是，其实很多人还是在忙碌的运行的，以用来支持第2天的正常运转，比如设备检修，打扫卫生等等。对应与软件来说，这时候通常会有一些数据归档，定时任务等工作。这是软件人员需要关注的。</p>

<p><strong>遍历测试法</strong>： 通过选定一个目标，然后使用可以发现的最短路径来访问目标包含的所有对象。  <br/>
城市内的垃圾车，需要在夜间将各个地方的垃圾运走，垃圾车的司机通常对城市的所有路径都是特别熟悉的，他们通常都能按预先的规划，利用最短路径，将一个地方的垃圾装上，然后另外一家。</p></blockquote>

<h3>历史区测试类型</h3>

<p>主要是针对老功能以及修复代码的测试。</p>

<blockquote><p><strong>恶邻测试法</strong>： 随着测试的深入，发现BUG较多的区域，通常值得反复的测试。<br/>
每个旅游城市都有些不好的地方，旅游者通常被告知避免访问那里。但是也总有人会去的，通常这些地方更值得测试人员关注。</p>

<p><strong>博物馆测试法</strong>： 历史遗留代码值得测试人员多加关注。<br/>
展示古董的博物馆深受旅游者喜爱，但同时也要保证同现代建筑的和谐。</p>

<p><strong>上一版测试法</strong>： 当前产品如果是对先前版本的更新，那就必须运行先前版本的所有场景和测试用例。</p></blockquote>

<h3>娱乐区测试类型</h3>

<p>旅游者除了在繁忙的观光景点之外，还需要安排一些休闲时间。软件需要测试那些辅助特性，而不是主线特性，并确保这2种特性能够结合在一起。</p>

<blockquote><p><strong>配角测试法</strong>：鼓励测试人员，专注于某些特定特性，他们虽然不是主要功能，但是很可能紧邻着主要功能，容易引起别人的注意。 <br/>
导游向你介绍一栋建筑，可能你却毫无兴趣，只关注于建筑边草地上的MM。</p>

<p><strong>深巷测试法</strong>： 测试那些最不可能被用到或者那些最不吸引用户的特性。 <br/>
高质量的旅游是去大家喜闻乐见的地方，质量不好的旅游则是指到了别人不愿意去的地方。</p>

<p><strong>通宵测试法</strong>： 让程序一直运行，而不去关闭他。<br/>
通宵旅游，又称为夜总会之游。很多人都会在夜店狂欢，不断的喝酒，考验人的体力与素质。</p></blockquote>

<h3>旅游区测试类型</h3>

<p>每个重视旅游的城市，都有专供旅游者聚集的地方。旅行通常走马观花，简短。对软件来说，旅游不关心软件是否工作，关心的是快速访问软件的各种功能，仅仅在于到此一游。</p>

<blockquote><p><strong>收藏家测试法</strong>：  收集软件的输出，越多越好。尽可能观察所有的输出结果是否正确。<br/>
旅游区，通常都会有一些特色的产品或者赠品，甚至是门票。而有些游客是很喜欢收集这些东西的，尤其是免费的东西。</p>

<p><strong>长路径测试法</strong>： 测试距离目标功能点尽可能远的特性。指导思想是到达目的地之前尽量多的在应用程序中穿行。<br/>
在旅行中，有可能只是乘坐各种交通工具，往来与各个景点。殊不知，有时候，路上的风景也许更加的宜人，正所谓，慢慢走欣赏啊。</p>

<p><strong>超模测试法</strong>： 关注表面的东西，测试界面。<br/>
旅游中见到的都是美女，这是多么惬意的事情啊，还管什么旅游不旅游的呢。</p>

<p><strong>测一送一法</strong>: 测试同一个应用多个拷贝的情况。<br/>
旅行中，买一送一的促销手段，相比大家都了解。但这里不太一样，通常是从另外一个角度来说的，是说，如果你在一个拷贝上发现了一个缺陷，那么所有的拷贝都有同样的缺陷。</p>

<p><strong>苏格兰酒吧测试法</strong>： 测试者需要穷尽各种努力，来找到很不容易找的功能点，并测试之。<br/>
作者朋友，在旅游中加入了一个苏格兰泡吧团，从而找到很多隐藏于社区的各类酒吧。如果没有他们的带领，可能永远找不到这些地方。适用与大型的项目。</p></blockquote>

<h3>旅馆区测试类型</h3>

<p>休息的地方，远离喧嚣的热门景点。要求测试人员，放过主要的以及最受欢迎的功能，而测试一些经常被忽略或者测试计划中较少描述的次要辅助功能。</p>

<blockquote><p><strong>取消测试法</strong>： 启动操作然后停止它。学会使用取消按钮。 <br/>
任何一个旅行，都有可能因为天气、飞机、或者病痛而被迫中断。</p>

<p><strong>懒汉测试法</strong>： 测试人员做尽量少的实际工作，多使用默认值。程序则需要忙碌的来处理。 <br/>
一个旅游团，总有人不积极参与，那么导游通常需要积极努力，试着吸引懒汉来享受他的旅程。</p></blockquote>

<h3>破旧区测试类型</h3>

<blockquote><p><strong>破坏测试法</strong>： 试图利用每个可能的机会暗中破坏应用程序。让操纵环境变得恶劣。</p>

<p><strong>反叛测试法</strong>： 输入最不可能的数据，或者已知的恶意输入。<br/>
旅行团中，通常有这样的人，当大家都惊叹于某著名标志物时，他却惊呼地上的一只老鼠很迷人。总有一些人是对着干的。</p>

<p><strong>强迫症测试法</strong>： 患有“强迫症”的测试人员，一遍又一遍的输入同样的数据，执行同样的操作。 <br/>
如果步行旅游，但是规定参加它的人不允许踩到地上的任何裂缝，很难想象会有多少人感兴趣。但在测试中，通常会让人有所收获。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu软件中心最受欢迎的20个软件]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/01/17/most-rated-20-software-in-ubuntu-softcenter/"/>
    <updated>2013-01-17T13:21:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/01/17/most-rated-20-software-in-ubuntu-softcenter</id>
    <content type="html"><![CDATA[<p>Ubuntu软件中心以下20款软件下载次数很多并且得票很高。</p>

<p>1.Stellarium 开源的桌面星空软件</p>

<p>2.Chromium web浏览器</p>

<p>3.SMPlayer 播放器</p>

<p>4.GnuCash 资金管理软件</p>

<p>5.Blender 三维绘图及渲染软件</p>

<!--more-->


<p>6.Guake GNOME 命令终端</p>

<p>7.Synaptic 包管理器</p>

<p>8.Shutter 截图工具</p>

<p>9.Synapse 启动器</p>

<p>10.Mumble 游戏语音通讯工具</p>

<p>11.XChat IRC 客户端</p>

<p>12.Akregator KDE下不错的feed 聚合器</p>

<p>13.Uget 下载管理器</p>

<p>14.Deluge BT下载客户端</p>

<p>15.GIMP图片编辑器</p>

<p>16.RawTherapee RAW照片处理软件</p>

<p>17.Darktable  数字摄影暗房软件</p>

<p>18.Inskscape 矢量图形编辑器</p>

<p>19.OpenShot 视频编辑器</p>

<p>20.Calibre 电子图书馆</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium-Grid2 配置]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/01/10/selenium-grid2-config/"/>
    <updated>2013-01-10T19:37:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/01/10/selenium-grid2-config</id>
    <content type="html"><![CDATA[<h3>为什么要使用Selenium Grid ?</h3>

<ul>
<li>分布式运行大规模的Test</li>
<li>能够通过一个中央点，很容易的运行不同OS上的不同browser</li>
<li>最小化对Grid的维护时间，并能充分利用虚拟设备</li>
</ul>


<h3>Selenium Grid 部署与启动</h3>

<p>Hub :总控节点，连接调用Node。 <br/>
Node: 负责执行Tests,调用浏览器。</p>

<!--more-->


<p>下面以selenium-server-standalone-2.27.0.jar版本为例： <br/>
使用这样3台机器：</p>

<ul>
<li>10.81.14.170</li>
<li>10.81.14.180</li>
<li>10.81.14.190</li>
</ul>


<p>启动Hub（10.81.14.180）:</p>

<pre><code>java  -jar  selenium-server-standalone-2.27.0.jar -role hub 
</code></pre>

<p>在浏览器内打开：<a href="http://10.81.14.180:4444/grid/console">http://10.81.14.180:4444/grid/console</a>可以查看Hub状态。也就是说Grid默认启动端口是4444，如果想切换为其他端口，则加<code>-port</code>参数。比如要切换为8888：</p>

<pre><code>java  -jar  selenium-server-standalone-2.27.0.jar -role hub  -port 8888
</code></pre>

<p>启动Node（10.81.14.170）:</p>

<pre><code>java -jar selenium-server-standalone-2.27.0.jar -role node -hub http://10.81.14.180:8888/grid/register
</code></pre>

<p>同样的，也可以使用<code>-port</code>切换node端口，默认端口是5555.  <br/>
此处的node节点，也可以作为一个单机的远程节点存在，并同时支持RC,WebDriver。浏览器输入<a href="http://10.81.14.180:8877/wd/hub">http://10.81.14.180:8877/wd/hub</a>可以看到session信息。</p>

<p>然后，同样的启动10.81.14.180、10.81.14.190上的Node节点。</p>

<p>打开浏览器<a href="http://10.81.14.180:8888/grid/console">http://10.81.14.180:8888/grid/console</a>,可以看到如下的界面：</p>

<p><img src="http://www.shenyanchao.cn/images/blog/selenium-grid-console.png" alt="" /></p>

<p>至此，Selenium Grid2已经配置成功了。</p>

<h3>使用Grid运行Tests</h3>

<p>Selenium Grid2是向后兼容的，同时支持RC,WebDriver。
如果使用RC,即Selenium1，使用以下的方法：</p>

<pre><code>Selenium selenium = new DefaultSelenium(“10.81.14.180”, 8888, “*firefox”, “http://www.baidu.com”);
</code></pre>

<p>使用WebDriver的话，使用以下的方法：</p>

<pre><code>DesiredCapabilities capability = DesiredCapabilities.firefox();
WebDriver driver = new RemoteWebDriver(new URL("http://10.81.14.180:8888/wd/hub"), capability);
</code></pre>

<p>可以看出所有的请求都发给了Hub,然后由Hub分配给匹配的节点来执行。 <br/>
那么，Hub是如何来分配的呢？往下看</p>

<h3>Node配置</h3>

<p>默认，Node会启动11个浏览器实例:5 Firefox,5 Chrome, 1 Internet Explorer. 从Grid Console界面看出来，为什么每个机器上有22个实例呢？是这样的，Node为了同时支持RC与WebDriver两种协议，所以就是2＊11了。把鼠标放到各个浏览器图标上，就可以看出里面的配置区别了。<br/>
内容类似：</p>

<pre><code>{
      "browserName": "*firefox",
      "maxInstances": 5,
      "seleniumProtocol": "Selenium"
    }
</code></pre>

<p>或者</p>

<pre><code> {
      "browserName": "firefox",
      "maxInstances": 5,
      "seleniumProtocol": "WebDriver"
    }
</code></pre>

<p>其中，seleniumProtocol就是定义的不同协议了。</p>

<p>如何修改Driver配置呢？可以从启动参数里操作。</p>

<pre><code>-browser browserName=firefox,version=3.6,maxInstances=5,platform=LINUX
</code></pre>

<p>那Node默认启动的配置是什么呢？  <br/>
由于如果从启动参数里，配置这个多东西，很难写的。因此，官方很人性化的提供了JSON文件来配置。也就是说默认启动的配置如下： <br/>
<a href="http://code.google.com/p/selenium/source/browse/trunk/java/server/src/org/openqa/grid/common/defaults/DefaultNode.json">http://code.google.com/p/selenium/source/browse/trunk/java/server/src/org/openqa/grid/common/defaults/DefaultNode.json</a></p>

<p><a href="http://code.google.com/p/selenium/source/browse/trunk/java/server/src/org/openqa/grid/common/defaults/DefaultHub.json">http://code.google.com/p/selenium/source/browse/trunk/java/server/src/org/openqa/grid/common/defaults/DefaultHub.json</a></p>

<p>如果想自定义配置，直接对json文件修改，启动时，指定配置文件就可以了。</p>

<pre><code>java -jar selenium-server-standalone.jar -role hub -hubConfig hubconfig.json 
</code></pre>

<p>仅仅就这样就行了？从博文<a href="http://www.shenyanchao.cn/blog/2012/10/12/selenium-multiple-browser-support/">http://www.shenyanchao.cn/blog/2012/10/12/selenium-multiple-browser-support/</a>知道，浏览器的启动是要制定一些driver位置的，否则Node不知道怎么启动浏览器实例。因此需要进行指定：</p>

<pre><code>java -jar selenium-server-standalone-2.27.0.jar -port 8877 -role node -hub http://10.81.14.180:8888/grid/register  -nodeConfig nodeconfig.json -Dwebdriver.chrome.driver="E:/selenium/chromedriver.exe" -Dwebdriver.ie.driver="E:/selenium/IEDriverServer.exe"
</code></pre>

<p>参考文档：<br/>
<a href="http://code.google.com/p/selenium/wiki/Grid2">http://code.google.com/p/selenium/wiki/Grid2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySql性能监控]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/01/10/mysql-monitor/"/>
    <updated>2013-01-10T19:03:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/01/10/mysql-monitor</id>
    <content type="html"><![CDATA[<h2>用mysqldumpslow分析mysql的slow query log</h2>

<p>mysql有一个功能就是可以log下来运行的比较慢的sql语句，默认是没有这个log的，为了开启这个功能，要修改my.cnf或者在mysql启动的时候加入一些参数。如果在my.cnf里面修改，需增加如下几行</p>

<pre><code>long_query_time = 1
log-slow-queries = /var/youpath/slow.log
log-queries-not-using-indexes[这个在mysql4.10以后才被引入]
</code></pre>

<p>long_query_time 是指执行超过多久的sql会被log下来，这里是1秒。<br/>
log-slow-queries 设置把日志写在那里，可以为空，系统会给一个缺省的文件host_name-slow.log，我生成的log就在mysql的data目录 <br/>
log-queries-not-using-indexes 就是字面意思，log下来没有使用索引的query。 <br/>
把上述参数打开，运行一段时间，就可以关掉了，省得影响生产环境。</p>

<!--more-->


<p>接下来就是分析了，我这里的文件名字叫host-slow.log。   <br/>
先mysqldumpslow –help以下，我主要用的是</p>

<pre><code>-s ORDER what to sort by (t, at, l, al, r, ar etc), ‘at’ is default
-t NUM just show the top n queries
-g PATTERN grep: only consider stmts that include this string
</code></pre>

<p>-s，是order的顺序，说明写的不够详细，俺用下来，包括看了代码，主要有
c,t,l,r和ac,at,al,ar，分别是按照query次数，时间，lock的时间和返回的记录数来排序，前面加了a的时倒叙  <br/>
-t，是top n的意思，即为返回前面多少条的数据  <br/>
-g，后边可以写一个正则匹配模式，大小写不敏感的</p>

<pre><code>mysqldumpslow -s c -t 20 host-slow.log
mysqldumpslow -s r -t 20 host-slow.log
</code></pre>

<p>上述命令可以看出访问次数最多的20个sql语句和返回记录集最多的20个sql。</p>

<pre><code>mysqldumpslow -t 10 -s t -g “left join” host-slow.log    
</code></pre>

<p>这个是按照时间返回前10条里面含有左连接的sql语句。 <br/>
用了这个工具就可以查询出来那些sql语句是性能的瓶颈，进行优化，比如加索引，该应用的实现方式等。</p>

<h2>linux 系统整体性能查看的方法:</h2>

<p>vmstat 10 &#8212;&#8211;每10秒刷新一次</p>

<pre><code>procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------   
r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st   
0  0      0  56508  10968  68380    0    0   184    40 1021   88  3 14 78  5  0    
0  0      0  56508  10976  68376    0    0     0     3 1251   49  0  0 100  0  0    
0  0      0  56508  10976  68376    0    0     0     0 1250   50  0  0 100  0  0    
0  0      0  56508  10984  68376    0    0     0     4 1251   51  0  0 100  0  0    
0  0      0  56508  10984  68376    0    0     0     0 1250   48  0  0 100  0  0    
0  0      0  56508  10984  68376    0    0     0     0 1250   50  0  0 100  0  0   
0  0      0  56508  10984  68376    0    0     0     0 1250   51  0  0 100  0  0      
0  0      0  56508  10992  68376    0    0     0     2 1250   49  0  0 100  0  0    
0  0      0  56508  10992  68376    0    0     0     0 1250   51  0  0 100  0  0   
</code></pre>

<p>procs: <br/>
r&#8211;>;在运行队列中等待的进程数  <br/>
b&#8211;>;在等待io的进程数 <br/>
w&#8211;>;可以进入运行队列但被替换的进程</p>

<p>memory  <br/>
swap&#8211;>;现时可用的交换内存（k表示） <br/>
free&#8211;>;空闲的内存（k表示）</p>

<p>pages <br/>
re－－》回收的页面 <br/>
mf－－》非严重错误的页面 <br/>
pi－－》进入页面数（k表示） <br/>
po－－》出页面数（k表示） <br/>
fr－－》空余的页面数（k表示） <br/>
de－－》提前读入的页面中的未命中数 <br/>
sr－－》通过时钟算法扫描的页面</p>

<p>disk 显示每秒的磁盘操作。 s表示scsi盘，0表示盘号</p>

<p>fault 显示每秒的中断数 <br/>
in－－》设备中断  <br/>
sy－－》系统中断 <br/>
cy－－》cpu交换</p>

<p>cpu 表示cpu的使用状态 <br/>
cs－－》用户进程使用的时间 <br/>
sy－－》系统进程使用的时间 <br/>
id－－》cpu空闲的时间</p>

<p>其中: <br/>
如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。 <br/>
如果pi，po 长期不等于0，表示内存不足。 <br/>
如果disk 经常不等于0， 且在 b中的队列 大于3， 表示 io性能不好。</p>

<p>每100s显示一次mysql 运行的状态:</p>

<pre><code>mysqladmin extended -i 100 –r
</code></pre>

<p>显示mysql服务器的线程列表</p>

<pre><code>mysqladmin -u root -p process    
Enter password:
+----+------+-----------+----+---------+------+-------+------------------+
| Id | User | Host      | db | Command | Time | State | Info             |
+----+------+-----------+----+---------+------+-------+------------------+
| 12 | root | localhost |    | Query   | 0    |       | show processlist |
+----+------+-----------+----+---------+------+-------+------------------+
</code></pre>

<p>相关命令：</p>

<p>一，获取mysql用户下的进程总数</p>

<pre><code>ps -ef | awk '{print $1}' | grep "mysql" | grep -v "grep" | wc-1
</code></pre>

<p>二，主机性能状态</p>

<pre><code>[root@ ~]# uptime
</code></pre>

<p> 13:05:52 up 53 days, 52 min,  1 user,  load average: 0.00, 0.00, 0.00</p>

<p>三，CPU使用率 <br/>
top 或 vmstat  <br/>
四，磁盘IO量  <br/>
vmstat 或  iostat <br/>
五，swap进出量[内存] <br/>
free  <br/>
六，数据库性能状态 <br/>
(1)QPS(每秒Query量) <br/>
QPS = Questions(or Queries) / seconds  <br/>
mysql > show status like &#8216;Question&#8217;; <br/>
(2)TPS(每秒事务量) <br/>
TPS = (Com_commit + Com_rollback) / seconds
mysql > show status like &#8216;Com_commit&#8217;;  <br/>
mysql > show status like &#8216;Com_rollback&#8217;; <br/>
(3)key Buffer 命中率  <br/>
key_buffer_read_hits = (1-key_reads / key_read_requests) * 100% <br/>
key_buffer_write_hits = (1-key_writes / key_write_requests) * 100%  <br/>
mysql> show status like &#8216;Key%&#8217;; <br/>
(4)InnoDB Buffer命中率  <br/>
innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%  <br/>
mysql> show status like &#8216;innodb_buffer_pool_read%&#8217;;   <br/>
(5)Query Cache命中率  <br/>
Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;  <br/>
mysql> show status like &#8216;Qcache%&#8217;; <br/>
(6)Table Cache状态量  <br/>
mysql> show status like &#8216;open%&#8217;;  <br/>
(7)Thread Cache 命中率  <br/>
Thread_cache_hits = (1 - Threads_created / connections ) * 100%  <br/>
mysql> show status like &#8216;Thread%&#8217;;  <br/>
mysql> show status like &#8216;Connections&#8217;;   <br/>
(8)锁定状态   <br/>
mysql> show status like &#8216;%lock%&#8217;;  <br/>
(9)复制延时量  <br/>
mysql > show slave status  <br/>
(10) Tmp Table 状况(临时表状况) <br/>
mysql > show status like &#8216;Create_tmp%&#8217;;  <br/>
(11) Binlog Cache 使用状况  <br/>
mysql > show status like &#8216;Binlog_cache%&#8217;; <br/>
(12) Innodb_log_waits 量  <br/>
mysql > show status like &#8216;innodb_log_waits&#8217;;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从源码编译构建Jmeter]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/12/31/build-jmeter-from-sources/"/>
    <updated>2012-12-31T15:48:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/12/31/build-jmeter-from-sources</id>
    <content type="html"><![CDATA[<h3>获取Jmeter的源码</h3>

<p>Jmeter源码可以从SVN REPO找到，地址：<a href="https://github.com/apache/jmeter">https://github.com/apache/jmeter</a>  <br/>
从GIT上也是可以的。地址：<a href="https://github.com/apache/jmeter">https://github.com/apache/jmeter</a>  <br/>
Git clone:</p>

<pre><code>git clone git://github.com/apache/jmeter.git jmeter
</code></pre>

<p>这样就把Jmeter的源码给放到了本地的jmeter文件夹内。</p>

<h3>配置并编译Jmeter</h3>

<!--more-->


<p>进入Jmeter目录，有个build.xml文件，显然是用ant管理的。 <br/>
此时，如果把项目import到eclipse内，会发现缺失很多依赖的jar包。此时不禁感叹，为啥不直接用maven管理呢，这样就不用管这些了。我第一次操作的时候害的我还去下载了一个最新的发行版本，然后从里面找各种依赖的jar包。后来发现，开发者已经为我们想到了这个。执行ant命令就可以直接下载：</p>

<pre><code>ant download_jars
</code></pre>

<p>一段时间的等待后，各种jar包就下载好了。要耐心等待，这个过程要下载很多包的。</p>

<p>接下来吗？直接执行：</p>

<pre><code>ant install /ant clean install
</code></pre>

<p>提示BUILD SUCCESSFUL,这就表明已经编译成功了。</p>

<h3>运行Jmeter</h3>

<p>进入bin目录，执行jmeter.bat（windows）或者 ./jmeter（linux）,Jmeter的界面打开了，开始体验吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jmeter 分布式 step by step]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/12/07/jmeter-distribution-step-by-step/"/>
    <updated>2012-12-07T13:25:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/12/07/jmeter-distribution-step-by-step</id>
    <content type="html"><![CDATA[<h3>环境准备</h3>

<ul>
<li>Jmeter(本文以2.8为例)</li>
<li>jdk 1.5+</li>
<li>多台机器<br/>
(假设3台，IP分别为：10.81.14.170，10.81.14.180，10.81.14.190)</li>
</ul>


<h3>工作原理</h3>

<p>1台机器做为总控机，其他机器作为节点机。总控机器，负责将JMX脚本分发到节点机上，各个节点同时独立运行，向服务发出压力，总控机可以获取并汇总报告。 <br/>
定义：</p>

<blockquote><p>总控机为<strong>client</strong>，我们（用户）只与这太机器打交道。或者称之为<strong>Master</strong>; <br/>
节点机器为<strong>server</strong>,它负责真正的向服务发出压力。或者称之为<strong>Slave</strong>;</p></blockquote>

<!--more-->


<p>这个只是角度不一样，就是一个总分结构。</p>

<h3>Slave配置</h3>

<p>假设这3台机器都作为slave，那么分别在各个机器上，
进入%JMETER HOME%/bin/目录   <br/>
运行: <br/>
jmeter-server.bat（windows） <br/>
jmeter-server.sh (linux)</p>

<h3>Master配置</h3>

<p>这里，我们以10.81.14.170作为Master,
进入%JMETER HOME%/bin/ 目录 <br/>
找到jmeter.properties文件，打开并找到remote_hosts=127.0.0.1这一行，修改为remote_hosts=127.0.0.1,10.81.14.180,10.81.14.190  <br/>
其中，IP部分指向slave,并以逗号分割。由于170这台机器同时也是slave而存在，因此直接写为127.0.0.1了。  <br/>
在目录下执行： <br/>
jmeter.bat (windows) <br/>
jmeter.sh (linux) <br/>
用来打开GUI界面。<br/>
点开运行->远程启动，将会看到这样的界面： <br/>
<img src="http://www.shenyanchao.cn/images/blog/jmeter-remote.png" alt="Jmeter远程启动" /> <br/>
从这里就可以指定哪台slave来发压力了。当然也可以选择远程全部启动了。</p>

<h3>为什么要分布式发压力？</h3>

<p>1.单机运行受限，网络、CPU、内存读可能是瓶颈所在； <br/>
2.Jmeter是纯Java的程序，受JVM的一些限制；  <br/>
一般情况下，依据机器配置，单机的发压量为300～600，如果需要更大的并发，就需要使用分布式的多台机器同时加压。</p>

<h3>配置注意事项</h3>

<p>1.尽量保证各台机器之间的jmeter版本一致 <br/>
2.JDK／JRE要正确安装 <br/>
3.启动端口有可能被占用了，这个需要在启动时间指定SERVER_PORT</p>

<hr />

<p>参考文献： <br/>
<a href="http://jmeter.apache.org/usermanual/remote-test.html">http://jmeter.apache.org/usermanual/remote-test.html</a> <br/>
<a href="http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.pdf">http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysqldump命令使用]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/12/04/mysqldump/"/>
    <updated>2012-12-04T15:32:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/12/04/mysqldump</id>
    <content type="html"><![CDATA[<p>mysqldump命令用来备份数据库，默认会导出一整条insert语句，虽说执行起来会快一些。但是遇到大表，很可能因为缓冲区过载而挂掉。</p>

<p>mysqldump &#8211;skip-opt 加入这个参数，就可以导出多条独立的insert语句。</p>

<p>例如：</p>

<pre><code>mysqldump --skip-opt -uroot -p database tablename &gt; script.sql
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：观察者（Observer） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/observer-in-java/"/>
    <updated>2012-11-08T18:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/observer-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>又叫发布订阅模式（Publish/subscribe），它定义了对象间的一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。</p>

<blockquote><p>这个定义还是比较通俗易懂的。我看了一遍，发现这不就是微博吗？我发布一条微博，那么所有关注我的人，都会收到通知，然后在新鲜事里显示出来。没错，就是这样！</p></blockquote>

<p>观察者模式有4个角色：</p>

<ul>
<li>被观察者(Observable):<br/>
定义被观察者必须实现的职责，动态的增加、删除观察者以及通知观察者</li>
<li>观察者（Observer）: <br/>
接收到消息后，进行更新操作</li>
<li>被观察者(Observable)具体类:<br/>
定义自己的业务逻辑，并定义哪儿些事件需要通知观察者</li>
<li>观察者（Observer）具体类：   <br/>
每个观察者在接收到消息后的更新操作是不同的。</li>
</ul>


<!--more-->


<p>在Java中如何实现观察者模式呢？废话，写代码啊！这个我自然知道，更令人惊喜的是JDK自身就提供了对观察者模式的原生支持，我不得不赞叹Java的强大。</p>

<p>Java提供了这样的两个东西：</p>

<ul>
<li>类<code>java.util.Observable</code>：<br/>
它内部维护了一个Vector容器，用来放所有的观察者，并且提供了添加、删除观察者的方法。此外，定义了notifyObservers方法，用来通知观察者。</li>
<li>接口<code>java.util.Observer</code>：
它定义了一个update方法，让Observer具体类来实现各自的操作。</li>
</ul>


<p>下面，就以微博作为例子吧。<br/>
先来一个被观察者，也就是我自己了。</p>

<pre><code>public class ShenYanChao extends Observable {

    //业务逻辑,不通知
    public String getName(){
        return "shenyanchao";
    }
    //发微博，通知
    public void publishWeibo(String content){
        System.out.println("我发布1条微博，內容是：["+content+"]");
        setChanged();
        notifyObservers(content);
    }
}
</code></pre>

<p>其中，setChanged()用来表明自身的状态变了，否则观察者是不会理的。这个是JDK的限制，其实观察者模式可以不用这个的。</p>

<p>下面就需要定义观察者了，也就是我的粉丝了。</p>

<pre><code>public class Fans implements Observer {

    @Override
    public void update(Observable o, Object content) {
        String who = ((ShenYanChao) o).getName();
        System.out.println("新鲜事:{" + who + "发布了一条微博，内容是：[" + content + "]}");
    }

}
</code></pre>

<p>观察者Fans一旦发现我发了1条微博，那么他就会出现一条新鲜事的了。update()的参数，第1个是被观察者，也就是我；第2个就是notifyObservers传过来的参数了，此处是微博内容。</p>

<p>具体场景是这样的：</p>

<pre><code>ShenYanChao shenyanchao = new ShenYanChao();
final int FANS_NUM = 10;//我的粉丝可不止这些呢
for (int i = 0; i &lt; FANS_NUM; i++) {
    shenyanchao.addObserver(new Fans());
}
shenyanchao.publishWeibo("欢迎登录：www.shenyanchao.cn");
</code></pre>

<p>此处模拟，我有10个粉丝，然后我发了1条微博。结果如下：</p>

<pre><code>我发布1条微博，內容是：[欢迎登录：www.shenyanchao.cn]
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
</code></pre>

<p>可见，一旦我发了微博，所有的观察者（Fans）都收到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：迭代器（Iterator） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/iterator-in-java/"/>
    <updated>2012-11-08T16:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/iterator-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>迭代器模式提供了一种方法来访问一个容器对象种的各个元素，而又不暴露这个对象的内部细节。</p>

<blockquote><p>在Java中已经默认提供了Iterator支持，各种容器类都进行了实现，而事实上，迭代器模式就是为了解决如何遍历这些容器里的元素而诞生的。</p></blockquote>

<p><strong>迭代器模式</strong>主要有以下的角色：</p>

<ul>
<li>Iterator抽象迭代器： <br/>
负责定义访问与遍历元素的接口。基本有3个固定的方法<code>hasNext()</code>,<code>next()</code>,<code>remove()</code>;</li>
<li>Concrete Iterator具体迭代器：  <br/>
迭代器的实现类，实现接口，完成元素遍历。</li>
<li>Aggregate抽象容器： <br/>
定义创建具体迭代器的接口。在Java种一般是<code>iterator()</code>方法。</li>
<li>Concrete Aggregate具体容器：<br/>
实现创建迭代器接口，返回迭代器实例对象。</li>
</ul>


<!--more-->


<p>为了方便，下面就直接以ArrayList为例，来看看迭代器是如何实现的吧。<br/>
在使用时，通常这样对ArrayList进行遍历：</p>

<pre><code>    List&lt;String&gt; list = new ArrayList&lt;String&gt;();
    list.add("first");
    list.add("second");
    Iterator&lt;String&gt; itr = list.iterator();
    while (itr.hasNext()) {
        String element = itr.next();
        System.out.println(element);
    }
</code></pre>

<p>从这里，我们可以看出来，这就是完全的迭代器模式。<br/>
首先来看，Iterator接口（java.util.Iterator）：</p>

<pre><code>public interface Iterator&lt;E&gt; {

    boolean hasNext();

    E next();

    void remove();
}
</code></pre>

<p>然后是Iterator的具体实现类(java.util.AbstractList<E>$Itr)：</p>

<pre><code>private class Itr implements Iterator&lt;E&gt; {

    int cursor = 0;

    int lastRet = -1;

    int expectedModCount = modCount;

    public boolean hasNext() {
        return cursor != size();
    }

    public E next() {
        checkForComodification();
        try {
        E next = get(cursor);
        lastRet = cursor++;
        return next;
        } catch (IndexOutOfBoundsException e) {
            checkForComodification();
            throw new NoSuchElementException();
        }
    }

    public void remove() {
        if (lastRet == -1)
        throw new IllegalStateException();
            checkForComodification();

        try {
            AbstractList.this.remove(lastRet);
        if (lastRet &lt; cursor)
            cursor--;
        lastRet = -1;
        expectedModCount = modCount;
        } catch (IndexOutOfBoundsException e) {
            throw new ConcurrentModificationException();
        }
    }

    final void checkForComodification() {
        if (modCount != expectedModCount)
            throw new ConcurrentModificationException();
    }
}
</code></pre>

<p>这个就是具体的Iterator了，当然还有另外一个ListItr extends Itr，这个是专门针对List进行操作的。 <br/>
那么Aggregate接口对应的是哪个呢？就是<code>java.util.AbstractCollection&lt;E&gt;</code> ，它里面定义了这样的一个接口：</p>

<pre><code>...
/**
 * Returns an iterator over the elements contained in this collection.
 *
 * @return an iterator over the elements contained in this collection
 */
public abstract Iterator&lt;E&gt; iterator();
...
</code></pre>

<p>那么具体实现是在哪儿？<code>java.util.AbstractList&lt;E&gt;</code>做了实现。</p>

<pre><code>    public Iterator&lt;E&gt; iterator() {
        return new Itr();
    }
</code></pre>

<p>返回了一个具体的迭代器实例。而ArrayList,LinkedList都是继承AbstractList的，因此自动具有了返回迭代器实例的功能。</p>

<p>因此，Java种的容器类只负责元素的的维护就好了。访问就教给迭代器吧，Java做的如此完善，以至于我们都不必再自己写Iterator了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：命令（Command） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/command-in-java/"/>
    <updated>2012-11-08T15:09:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/command-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>命令模式是一种高内聚的模式。它将一个请求封装成一个对象，从而让使用不同请求来把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销与恢复功能。 <br/>
听起来，好复杂！</p>

<p>在程序员之间，流传着这样一句话：程序写到最后，就是if-else,for,while。<br/>
真是枯燥啊！其实能体会到这种感觉，说明作为一个程序员，你已经有了一定的造诣了。那如何提高呢？</p>

<p>试想，在代码中，你有很多if-else或者case语句。为什么有这样的语句呢？因为判断条件多啊，需要根据不同的条件来做不同的事情。2、3个条件还可以写，如果有20个条件呢，或者N多呢。那么我们的if-else那就判断N重条件，这简直是无法忍受的，写出的代码可维护性更不用说了。</p>

<!--more-->


<p> <br/>
<strong>命令模式</strong>就是可以解决这种问题的方法之一。下面就来提高一下程序员的自我修养了。</p>

<p>命令模式中，主要有3个角色：</p>

<ul>
<li>Receiver命令接收者</li>
<li>Command命令</li>
<li>Invoker命令调用者</li>
</ul>


<p>下面开始分别定义： <br/>
<strong>Receiver:</strong>定义命令的N种接收者</p>

<pre><code>public abstract class AbstractReceiver {
    public abstract void doSomething();
}

public class Receiver1 extends AbstractReceiver {
    @Override
    public void doSomething() {
        System.out.println("receiver1 do something");
    }
}
public class Receiver2 extends AbstractReceiver {
    @Override
    public void doSomething() {
        System.out.println("receiver2 do something");
    }
}
...
public class ReceiverN
...
</code></pre>

<p><strong>Command:</strong>定义N种命令</p>

<pre><code>public abstract class AbstractCommand {
    public abstract void execute();
}

public class Command1 extends AbstractCommand {
    private AbstractReceiver receiver;
    public Command1(AbstractReceiver receiver) {
        this.receiver = receiver;
    }
    @Override
    public void execute() {
        System.out.println("command1 命令发出");
        receiver.doSomething();
    }
}
public class Command2 extends AbstractCommand {
    private AbstractReceiver receiver;
    public Command2(AbstractReceiver receiver) {
        this.receiver = receiver;
    }
    @Override
    public void execute() {
        System.out.println("command2 命令发出");
        receiver.doSomething();
    }
}
...
public class CommandN
....
</code></pre>

<p><strong>Invoker:</strong>定义调用者</p>

<pre><code>public class Invoker {

    private List&lt;AbstractCommand&gt; commandList = new LinkedList&lt;AbstractCommand&gt;();

    public void addCommand(AbstractCommand command) {
        commandList.add(command);
    }

    public void addCommands(LinkedList&lt;AbstractCommand&gt; commands) {
        commandList.addAll(commands);
    }

    public void action() {
        for (AbstractCommand command : commandList) {
            command.execute();
        }
    }

}
</code></pre>

<p>使用场景：</p>

<pre><code>Invoker invoker = new Invoker();
AbstractReceiver receiver1 = new Receiver1();
AbstractReceiver receiver2 = new Receiver2();
AbstractCommand command1 = new Command1(receiver2);
AbstractCommand command2 = new Command2(receiver1);
invoker.addCommand(command1);
invoker.addCommand(command2);
invoker.action();
</code></pre>

<p>运行结果：</p>

<pre><code>command1 命令发出
receiver2 do something
command2 命令发出
receiver1 do something
</code></pre>

<p>现在再回过来看命令模式的定义，就比较明白了吧。也就是说有N种请求条件，那么就定义N个类来封装请求，我们称之为命令（Command）。每个命令做什么操作呢，谁来执行这个命令呢，有命令自己来进行定义。这样就避免了if-else，而由N种命令来决定跳转关系。</p>

<p>调用者（Invoker）呢，它维护了一个命令列表，并按照一定的顺序来发起命令调用。当然这个列表也有可能就只有一个命令了，就简化了一下。与if-else对比更直观的了。</p>

<p>定义中还提到了命令撤销或恢复的功能，这种撤销与恢复也是命令的一种了，一般可以通过扩展一个命令出来，通过诸如日志等来恢复之前的操作。其实这个也是可以通过备忘录模式来实现的。</p>

<h2>命令模式 in JDK</h2>

<pre><code>java.lang.Runnable#run()
javax.swing.Action#actionPeformed(ActionEvent e)
</code></pre>

<p>从Runnable来说，不同的实现者，通过调用run()来实现在不同线程执行不同的操作。
从Action来说，由于桌面UI有很多的操作事件，这些事件就是命令。通过actionPerformed函数，接受不同的命令参数来做出不同的表现。</p>
]]></content>
  </entry>
  
</feed>
