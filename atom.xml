<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blues 小站]]></title>
  <link href="http://blueshen.github.com/atom.xml" rel="self"/>
  <link href="http://blueshen.github.com/"/>
  <updated>2012-10-16T20:21:16+08:00</updated>
  <id>http://blueshen.github.com/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PageObjects 设计模式]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/16/pageobjects-design-pattern/"/>
    <updated>2012-10-16T16:40:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/16/pageobjects-design-pattern</id>
    <content type="html"><![CDATA[<h2>什么是Page Objects(翻译为：页面对象？)&#8230;</h2>

<p>简单的说，Page Objects是指UI界面上用于与用户进行交互的对象。它可以指整个页面，也可以指Page上的某个区域。Page Objects是你的test code的交互对象，是对实际UI的一种抽象模型化。通过Page Objects可以减少重复代码的编写，例如，很多页面都有同样的header，footer，navigator等部分，如果对这些进行抽象，只写一次就可以在其他地方通用了。</p>

<p><strong>注意PageObjects与Page Objects是不一样的</strong>，PageObjects用于特指采用Page Objects进行封装的一种设计模式（Design Pattern）,而不仅仅是多一个空格的区别。哈。</p>

<h2>如何实现PageObjects设计模式？</h2>

<p>一般情况下，对于一个Page Objects对象，它有两个方面的特征：</p>

<ul>
<li>自身元素(WebElement)</li>
<li>实现功能 (Services)</li>
</ul>


<!--more-->


<p></p>

<p>自身元素很好理解，就是实实在在的页面元素。而Page Object通常也都是实现一定的功能的。就Test的开发人员来说，更关心的是Page Objects它们实现了什么交互功能，而不是其内部的实现，因此，这里的功能与开发人员理解的功能是<strong>不一样的</strong>。</p>

<p>以用户登录为例：在登录界面，点击登录后要么成功，转向首页。要么失败，出现提示出错信息。 <br/>
相信这是一个很容易理解的场景吧！<br/>
Java Code可能类似如下：</p>

<pre><code>public class LoginPage {
    //用户名录入框
    private WebElement usernameBox;
    //密码录入框
    private WebElement passwordBox;
    //提交按钮
    private WebElement submitButton;

    public HomePage loginAs(String username, String password) {
        usernameBox.sendKeys(username);
        passwordBox.sendKeys(password);
        submitButton.submit();
        return new HomePage(...)
    }

    public LoginPage loginAsExpectingError(String username, String password) {
         //  出错的username,password 仍留在LoginPage
     }

    public String getErrorMessage() {
    // 获取错误信息
    }
}   
</code></pre>

<p>从上面可以看出，同时封装了元素以及功能。此处样例，元素是没有初始化的。可以通过类似于<code>driver.findElement()</code>的函数来直接进行初始化，另外WebDriver提供了一个PageFactory用于对PageObjects设计模式进行支持，下面将会讲到。<br/>
通过上面的这段代码，也展现出了一个重要的问题，那就是assertion不应该在Page Objects内部，而应该由tests进行处理。Page Objects只是返回需要验证的信息即可。</p>

<h2>总结</h2>

<ul>
<li>public方法代表Page提供的功能</li>
<li>尽量不要暴露Page的内部细节</li>
<li>不要assertion</li>
<li>方法可以返回其他Page Objects</li>
<li>Page Objects不用代表整个页面，可以是任意一个部分</li>
<li>一样的操作，不同的结果应该分开（正确登录，错误登录）</li>
</ul>


<h2>样例</h2>

<pre><code>public class LoginPage {
    private final WebDriver driver;
    // 用户名录入框
    private WebElement usernameBox;
    // 密码录入框
    private WebElement passwordBox;
    // 提交按钮
    private WebElement submitButton;

    public LoginPage(WebDriver driver) {
        this.driver = driver;
        if (!"Login".equals(driver.getTitle())) {
            throw new IllegalStateException("This is not the login page");
        }
        this.usernameBox = driver.findElement(By.id("username"));
        this.passwordBox = driver.findElement(By.id("passwd"));
        this.submitButton = driver.findElement(By.id("login"));
    }

    public HomePage loginAs(String username, String password) {
        usernameBox.sendKeys(username);
        passwordBox.sendKeys(password);
        submitButton.submit();
        return new HomePage(driver);
    }
}
</code></pre>

<h2>PageFactory</h2>

<p>从上面的样例中，有没有发现每个元素都要进行<code>driver.findElement()</code>这样的操作，写起来好累啊，一堆重复性的代码。有没有更好的，更优雅的处理方法呢？<strong><code>org.openqa.selenium.support.PageFactory</code></strong>就是用来负责处理这个的，真Happy! <br/>
下面以<a href="http://www.baidu.com">百度搜索</a>作为样例场景，搜索一个关键字：</p>

<pre><code>import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.support.PageFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
* @author shenyanchao
* 
 */
public class BaiduSearchPage {
    public static final Logger LOG = LoggerFactory
        .getLogger(BaiduSearchPage.class);
    private WebElement wd;

    public void searchFor(String keyword) {
        wd.sendKeys(keyword);
        wd.submit();
    }

    public static void main(String[] args) {
        WebDriver driver = new HtmlUnitDriver();
        driver.get("http://www.baidu.com");
        BaiduSearchPage baiduPage = PageFactory.initElements(driver,
            BaiduSearchPage.class);
        LOG.info("before search url is:{}",driver.getCurrentUrl());
        baiduPage.searchFor("blueshen");
        LOG.info("after search url is:{}",driver.getCurrentUrl());
    }
}
</code></pre>

<p>运行以上代码，发现已经可以正常运行，结果如下：</p>

<pre><code>......
before search url is:http://www.baidu.com/
......
after search url is:http://www.baidu.com/s?wd=blueshen&amp;rsv_bp=0&amp;rsv_spt=3
</code></pre>

<p>可见，搜索后，已经转向了正确的搜索结果页面。然而WebElement是如何初始化的呢？玄机就在<code>BaiduSearchPage baiduPage = PageFactory.initElements(driver,BaiduSearchPage.class);</code>这行代码。PageFactory负责初始化了Page里的元素，amazing，用起来就是这么的优雅。 <br/>
那么下来，我就要问了：PageFactory是怎么定位元素的呢？</p>

<blockquote><p>原来PageFactory初始化元素有一个惯例，样例中将WebElement的名称定为wd,那么PageFactory将按类似以下的形式对其进行初始化：  <br/>
<code>driver.findElement(By.id("wd"));</code><br/>
PageFactory认为wd是HTML元素的id或者name字段的值,并且优先从id开始查找。至此，我们终于知道怎么回事了。</p></blockquote>

<p>随着项目的变大，以及使用的更加深入，HTML元素的id，name字段并不一定唯一，并且Java Class的属性看起来都是一堆无意义的名称。这些要求我们必须要进行改进。幸好PageFactory已经提前考虑到了这一切，它支持annotations来显式定位元素。那么上述的百度搜索样例，可以修改为如下形式：</p>

<pre><code>public class BaiduSearchPage {
    public static final Logger LOG = LoggerFactory
        .getLogger(BaiduSearchPage.class);
    @FindBy(how = How.NAME, using = "wd")
    @CacheLookup
    private WebElement serachBox;

    public void searchFor(String keyword) {
        serachBox.sendKeys(keyword);
        serachBox.submit();
    }
......
}
</code></pre>

<p>明确的指定HOW.NAME,using=&#8221;wd&#8221;,意为查找name=&#8221;wd&#8221;的元素，并将其初始化赋值给searchBox这一有意义的属性名。其中@CacheLookup用于标识其只初始化一次，然后缓存起来备用。</p>

<p>感觉还不够简洁吗？继续修改：</p>

<pre><code>@FindBy(name = "wd")
private WebElement searchBox;
</code></pre>

<p>这是其简略模式，还支持各种定位方式。</p>

<pre><code>    @FindBy(id="...")
    @FindBy(className="...")
    @FindBy(name="...")
    @FindBy(xpath="...")
    @FindBy(linkText="...")
    @FindBy(partialLinkText="...")
    @FindBy(tagName="...")
    @FindBy(css="...")
</code></pre>

<p>同时支持<code>@FindBys</code>用于支持列表元素查找定位，返回<code>List&lt;WebElement&gt;</code>类型。</p>

<p><strong>总之，利用PageObjects设计模式并且配合PageFactory使用，将使你的自动化测试优雅、易度、易维护。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium WebDriver的多浏览器支持]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/12/selenium-multiple-browser-support/"/>
    <updated>2012-10-12T14:56:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/12/selenium-multiple-browser-support</id>
    <content type="html"><![CDATA[<h2>Selenium WebDriver支持哪儿些浏览器？</h2>

<p>按照官方文档的说法，现阶段有以下的drivers:</p>

<blockquote><ul>
<li>ChromeDriver</li>
<li>InternetExplorerDriver</li>
<li>FirefoxDriver</li>
<li>OperaDriver</li>
<li>HtmlUnitDriver</li>
<li>AndroidDriver(mobile testing)</li>
<li>OperaMobileDriver(mobile testing)</li>
<li>IPhoneDriver(mobile testing)</li>
</ul>
</blockquote>

<!--more-->


<p></p>

<h2>为什么selenium自动化case在一个浏览器运行的很好，换为另外一个浏览器则不行？</h2>

<h3>一个Driver可以打开浏览器，另外一个Driver却不行？</h3>

<p>WebDriver是通过调用native浏览器来操作的，浏览器之间的差异注定会出现一些问题。下面以InternetExplorer,Firefox,Chrome为例进行说明：</p>

<h4>InternetExplorer：</h4>

<blockquote><p>1.它分不同的版本，版本之间差异很大。InternetExplorerDriver支持IE6、7、8、9。操作系统支持XP、Vista、Windows 7。 <br/>
2.InternetExplorerDriver同时支持32/64bit的浏览器，这个取决于你用的是什么版本的<a href="http://code.google.com/p/selenium/downloads/list">IEDriverServer.exe</a>。 <br/>
3.要求条件如下：</p>

<blockquote><ul>
<li><a href="http://code.google.com/p/selenium/downloads/list">IEDriverServer</a>在系统环境的PATH内（selenium2.26.0+版本推荐方式）。</li>
<li>在windows vista、windows7操作系统中，如果使用IE7+的浏览器，应该保证浏览器的<strong>保护模式</strong>都处于<strong>同一状态</strong>[开启或者关闭]。如果不一致，那么报错信息类似于<code>Caused by: org.openqa.selenium.WebDriverException: Unexpected error launching Internet Explorer. Protected Mode settings are not the same for all zones. Enable Protected Mode must be set to the same value (enabled or disabled) for all zones. (WARNING: The server did not provide any stacktrace information)</code> <br/>
不会设置吗？ <br/>
操作如下：打开浏览器->Internet选项 ->安全->启用保护模式。保证Internet、本地Intranet、受信任的站点、受限制的站点4个zone保护模式一致就OK</li>
<li>为了确保能获得正确的坐标点，要把浏览器的缩放设为100%。 <br/>
设置方法：打开浏览器->页面->缩放(Z)->100%</li>
</ul>
</blockquote></blockquote>

<p>参考<a href="http://code.google.com/p/selenium/wiki/InternetExplorerDriver">http://code.google.com/p/selenium/wiki/InternetExplorerDriver</a></p>

<h4>Firefox:</h4>

<blockquote><p>1.Firefox不像InternetExplorer一样，用户可以自定义安装路径。因此使用时，需要制定firefox.exe的安装路径。<br/>
怎么指定?</p>

<blockquote><ul>
<li>java code: <code>System.setProperty()</code></li>
<li>命令行：<code>-DpropertyName='value'</code></li>
</ul>
</blockquote>

<p>2.系统变量的值为：<code>webdriver.firefox.bin</code>，以及其他的key值，详见参考页面。webdriver.firefox.bin用来指定Firefox的安装路径。如不设置，默认从%PROGRAMFILES%\Mozilla Firefox\firefox.exe加载。<strong>个人强烈建议，即使安装在默认路径也进行指定</strong>。 <br/>
3.Java代码如下：</p>

<pre><code>System.setProperty("webdriver.firefox.bin", "C://Mozila/firefox.exe");  
WebDriver driver = new FirefoxDriver();  
</code></pre>

<p>其中firefox的安装路径，按情况自行替换。</p></blockquote>

<p>参考<a href="http://code.google.com/p/selenium/wiki/FirefoxDriver">http://code.google.com/p/selenium/wiki/FirefoxDriver</a></p>

<h4>Chrome:</h4>

<p>chrome要求条件如下：</p>

<blockquote><p>1.Chrome应当安装在默认路径下（如果是从官方下载的，安装后直接都是默认路径）。
<table border=”1px">
<tbody>
<tr><td>OS</td><td>默认位置</td></tr>
<tr><td>Linux</td><td>/usr/bin/google-chrome</td></tr>
<tr><td>Mac</td><td>/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome</td></tr>
<tr><td>Windwos XP</td><td>%HOMEPATH%\Local Settings\Application Data\Google\Chrome\Application\chrome.exe</td></tr>
<tr><td>Windwos Vista</td><td>C:\Users\%USERNAME%\AppData\Local\Google\Chrome\Application\chrome.exe</td></tr>
</tbody>
</table>  <br/>
2.需要下载相应版本的<a href="http://code.google.com/p/chromedriver/downloads/list">chromedriver</a>，用来架起chrome浏览器与webdriver之间的桥梁。 <br/>
3.与FirefoxDriver差不多，需要设置chromedriver的路径。key值为：webdriver.chrome.driver. <br/>
4.Java代码如下：</p>

<pre><code>System.setProperty("webdriver.chrome.driver", "C://drivers/chromedriver.exe");  
WebDriver driver = new ChromeDriver();    
</code></pre>

<p>需要注意的是，chrome浏览器会自动更新，而<a href="http://code.google.com/p/chromedriver/downloads/list">chromedriver</a>也是不断更新的。如果chrome版本太新，而chromedriver没有相应的更换，会造成只是打开chrome浏览器，而不进行任何操作的问题。另外，ChromeDriver只适用于chrome 12.0.712.0+,如果需要使用更老的版本，见参考页面的详细描述。</p></blockquote>

<p>参考<a href="http://code.google.com/p/selenium/wiki/ChromeDriver">http://code.google.com/p/selenium/wiki/ChromeDriver</a></p>

<h3>在一个浏览器里，元素可以找到或者可以操作，而在另外一个浏览器内则不行，为什么？</h3>

<p>不同浏览器之间解析DOM以及响应事件的机制不同，难免会有一些不兼容性。解决方法：</p>

<blockquote><p>1.元素定位，通常是由于DOM解析不同造成的，可以使用不同的findElement方法进行实验，如id,class,xpath等。这个没有统一的结论，大多数情况下id是最靠谱的。<strong>推荐！</strong> <br/>
2.事件的响应，这个如果存在问题，一般比较难解决。通常是由于浏览器之间的差异造成的。可以通过使用selenium更高的版本，或者更换浏览器的版本来解决。或者想一下，有没有其他的方式，换个事件来绕过去，总有办法的。如果实在解决不了，那也只能暂时是这样了。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[selenium FAQ:如何处理JavaScript弹出的alert、prompt窗口]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/12/selenium-faq-alerts-and-prompts/"/>
    <updated>2012-10-12T14:39:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/12/selenium-faq-alerts-and-prompts</id>
    <content type="html"><![CDATA[<h2>经常会碰到，页面操作后，出现一个alert窗口或者prompt确认窗口的情况，这时需要获得窗口的提示信息以及点击确定或取消的情况。</h2>

<pre><code>// Get a handle to the open alert, prompt or confirmation
Alert alert = driver.switchTo().alert();
// Get the text of the alert or prompt
alert.getText();  
// And acknowledge the alert (equivalent to clicking "OK")
alert.accept();
</code></pre>

<p>这是通用的处理方法。但是如果弹出的窗口不是<code>alert()</code>或者<code>prompt()</code>弹出来的则不适用。请注意。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[selenium FAQ:怎么样调用Javascript？]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/12/selenium-faq-how-to-use-javascript/"/>
    <updated>2012-10-12T14:30:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/12/selenium-faq-how-to-use-javascript</id>
    <content type="html"><![CDATA[<h2>selenium自动化开发中，难免需要用到直接调用javascript，怎么用呢？</h2>

<pre><code>WebDriver driver; // Assigned elsewhere
JavascriptExecutor js = (JavascriptExecutor) driver;
js.executeScript("return document.title");
</code></pre>

<p>直接将driver强制转化为JavascriptExecutor,然后执行javascript即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apache mpm介绍[转]]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/12/apache-mpm/"/>
    <updated>2012-10-12T12:45:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/12/apache-mpm</id>
    <content type="html"><![CDATA[<h2>什么是MPM？</h2>

<p>MPM（Multi -Processing Modules，多路处理模块）是Apache2.x中影响性能的最核心特性。</p>

<p>是Apache 2.x才支持的一个可插入的并发模型，在编译的时候，我们只可以选择一个并发模型。</p>

<p>配置文件：/usr/local/apache2/conf/extra/httpd-mpm.conf</p>

<p>如果apache是默认安装的可能配置在httpd.conf文件中。根据实际情况查找配置。</p>

<p>使用格式：
进入apache的目录，对apache进行如下编译：</p>

<p>Linux代码
<code>./configure --help|grep mpm </code></p>

<!--more-->


<p>显示内容如下：</p>

<p>Linux代码</p>

<pre><code>--with-mpm=MPM  
Choose the process model for Apache to use.  
MPM={beos|worker|prefork|mpmt_os2| perchild|leader|threadpool}  
</code></pre>

<ul>
<li><p>1、Beos、mpmt_os2分别是BeOS和OS/2上缺省的MPM。</p></li>
<li><p>2、perchild主要设计目的是以不同的用户和组的身份来运行不同的子进程，这在运行多个需要CGI的虚拟主机时特别有用，会比1.3版中的SuExec 机制做得更好。</p></li>
<li><p>3、leader和threadpool都是基于worker的变体，还处于实验性阶段，某些情况下并不会按照预期设想的那样工作，所以 Apache官方也并不推荐使用。</p></li>
<li><p>4、prefork如果不用“–with-mpm ”显式指定某种MPM，prefork就是LInux/Unix平台上缺省的MPM.它所采用的预派生子进程方式也是 Apache 1.3中采用的模式.prefork本身并没有使用到线程，2.0版使用它是为了与1.3版保持兼容性；另一方面，prefork用单独的子进程来处理不同的请求，进程之间是彼此独立的，这也使其成为最稳定的MPM之一。<br/>
prefork的工作原理是，控制进程在最初建立“StartServers”个子进程后,为了满足MinSpareServers设置的需要创建一个进程,等待一秒钟，继续创建两个，再等待一秒钟，继续创建四个……如此按指数级增加创建的进程数,最多达到每秒32个，直到满足MinSpareServers设置的值为止。这就是预派生（prefork）的由来.这种模式可以不必在请求到来时再产生新的进程，从而减小了系统开销以增加性能。</p></li>
<li><p>5、worker相对于prefork,worker是2.x版中全新的支持多线程和多进程混合模型的MPM。由于使用线程来处理,所以可以处理相对海量的请求，而系统资源的开销要小于基于进程的服务器.但是，worker也使用了多进程，每个进程又生成多个线程，以获得基于进程服务器的稳定性.这种MPM的工作方式将是Apache 2.x的发展趋势。  <br/>
worker的工作原理是，由主控制进程生成“StartServers”个子进程，每个子进程中包含固定的ThreadsPerChild 线程数，各个线程独立地处理请求。同样，为了不在请求到来时再生成线程，MinSpareThreads和MaxSpareThreads设置了最少和最多的空闲线程数；而MaxClients设置了所有子进程中的线程总数.如果现有子进程中的线程总数不能满足负载，控制进程将派生新的子进程。</p></li>
</ul>


<h2>如何判断当前的服务器使用那种MPM 模块?</h2>

<p>若使用prefork，在make编译和make install安装后，使用“httpd -l”来确定当前使用的MPM，
如下示:</p>

<pre><code>[aaron@webslave1 extra]$ /usr/local/apache2/bin/httpd -l 
Compiled in modules: 
core.c 
...... 
prefork.c 
...... 
</code></pre>

<p>应该会看到prefork.c（如果看到worker.c说明使用的是worker MPM，依此类推）。再查看缺省生成的httpd.conf配置文件，里面包含如下配置段：</p>

<p>Linux代码</p>

<pre><code>&lt;IfModule prefork.c&gt;  
StartServers 5  
MinSpareServers 5  
MaxSpareServers 10  最大的空闲进程数 
MaxClients 150  Apache可以同时处理的请求(最重要)--即为常说的并发连接数!! 
MaxRequestsPerChild 0  每个子进程可处理的请求数 
&lt;/IfModule&gt;  
</code></pre>

<p>MaxSpareServers设置了最大的空闲进程数，如果空闲进程数大于这个值，Apache会自动kill掉一些多余进程。这个值不要设得过大，但如果设的值比MinSpareServers小，Apache会自动把其调整为MinSpareServers+1。如果站点负载较大，可考虑同时加大MinSpareServers和MaxSpareServers。</p>

<p>MaxRequestsPerChild设置的是每个子进程可处理的请求数。每个子进程在处理了“MaxRequestsPerChild”个请求后将自动销毁。0意味着无限，即子进程永不销毁。虽然缺省设为0可以使每个子进程处理更多的请求，但如果设成非零值也有两点重要的好处：</p>

<p>可防止意外的内存泄漏；
在服务器负载下降的时侯会自动减少子进程数。</p>

<p>因此，可根据服务器的负载来调整这个值。笔者认为10000左右比较合适。</p>

<p>MaxClients是这些指令中最为重要的一个，设定的是Apache可以同时处理的请求，是对Apache性能影响最大的参数。<br/>
其缺省值150是远远不够的，如果请求总数已达到这个值（可通过ps -ef|grep http|wc -l来确认），那么后面的请求就要排队，直到某个已处理请求完毕。这就是系统资源还剩下很多而HTTP访问却很慢的主要原因。系统管理员可以根据硬件配置和负载情况来动态调整这个值。<br/>
虽然理论上这个值越大，可以处理的请求就越多，但Apache默认的限制不能大于256。如果把这个值设为大于256，那么Apache将无法起动。事实上，256对于负载稍重的站点也是不够的。在Apache 1.3中，这是个硬限制。如果要加大这个值，必须在“configure”前手工修改的源代码树下的src/include/httpd.h中查找256，就会发现“#define HARD_SERVER_LIMIT 256”这行。把256改为要增大的值（如4000），然后重新编译Apache即可。在Apache 2.0中新加入了ServerLimit指令，使得无须重编译Apache就可以加大MaxClients。下面是笔者的prefork配置段：</p>

<p>Linux代码</p>

<pre><code>&lt;IfModule prefork.c&gt;  
StartServers 10  
MinSpareServers 10  
MaxSpareServers 15  
ServerLimit 2000  
MaxClients 1000  
MaxRequestsPerChild 10000  
&lt;/IfModule&gt;  
</code></pre>

<p>　上述配置中，ServerLimit的最大值是20000，对于大多数站点已经足够。如果一定要再加大这个数值，对位于源代码目录下
/httpd-2.2.15/server/mpm/prefork/prefork.c中以下两行做相应修改即可：<br/>
Linux代码</p>

<pre><code>#define DEFAULT_SERVER_LIMIT 256  
#define MAX_SERVER_LIMIT 20000  
</code></pre>

<p>worker的工作原理是，由主控制进程生成“StartServers”个子进程，每个子进程中包含固定的ThreadsPerChild线程数，各个线程独立地处理请求。同样，为了不在请求到来时再生成线程，MinSpareThreads和MaxSpareThreads设置了最少和最多的空闲线程数；而MaxClients设置了所有子进程中的线程总数。如果现有子进程中的线程总数不能满足负载，控制进程将派生新的子进程。</p>

<p>MinSpareThreads和MaxSpareThreads的最大缺省值分别是75和250。这两个参数对Apache的性能影响并不大，可以按照实际情况相应调节。
ThreadsPerChild是worker MPM中与性能相关最密切的指令。ThreadsPerChild的最大缺省值是64，如果负载较大，64也是不够的。这时要显式使用ThreadLimit指令，它的最大缺省值是20000。上述两个值位于源码树server/mpm/worker/worker.c中的以下两行：</p>

<p>Linux代码</p>

<pre><code>#define DEFAULT_THREAD_LIMIT 64  
#define MAX_THREAD_LIMIT 20000  
</code></pre>

<p>这两行对应着ThreadsPerChild和ThreadLimit的限制数。最好在configure之前就把64改成所希望的值。注意，不要把这两个值设得太高，超过系统的处理能力，从而因Apache不起动使系统很不稳定。
Worker模式下所能同时处理的请求总数是由子进程总数乘以ThreadsPerChild值决定的，应该大于等于MaxClients。如果负载很大，现有的子进程数不能满足时，控制进程会派生新的子进程。默认最大的子进程总数是16，加大时也需要显式声明ServerLimit（最大值是20000）。这两个值位于源码树server/mpm/worker/worker.c中的以下两行：</p>

<p>Linux代码</p>

<pre><code>#define DEFAULT_SERVER_LIMIT 16  
#define MAX_SERVER_LIMIT 20000  
</code></pre>

<p>需要注意的是，如果显式声明了ServerLimit，那么它乘以ThreadsPerChild的值必须大于等于MaxClients，而且MaxClients必须是ThreadsPerChild的整数倍，否则Apache将会自动调节到一个相应值（可能是个非期望值）。下面是笔者的worker配置段：</p>

<p>Linux代码</p>

<pre><code>&lt;IfModule worker.c&gt;  
StartServers 3  
MaxClients 2000  
ServerLimit 25  
MinSpareThreads 50  
MaxSpareThreads 200  
ThreadLimit 200  
ThreadsPerChild 100  
MaxRequestsPerChild 0  
&lt;/IfModule&gt;  
</code></pre>

<p>通过上面的叙述，可以了解到Apache 2.0中prefork和worker这两个重要MPM的工作原理，并可根据实际情况来配置Apache相关的核心参数，以获得最大的性能和稳定性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[提高selenium自动化的稳定性2-等待]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/11/selenium-stable-2/"/>
    <updated>2012-10-11T14:32:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/11/selenium-stable-2</id>
    <content type="html"><![CDATA[<h2>很多页面元素都是ajax动态生成的，这就要求进行适当的等待</h2>

<h2>如何进行等待呢？</h2>

<h3>1.直接sleep</h3>

<pre><code>public static void sleep(int seconds) {
    try {
        TimeUnit.SECONDS.sleep(seconds);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>这种方法，用于直接的让thread进行等待指定的seconds。</p>

<!--more-->


<h3>2.使用selenium webdriver提供的等待方法</h3>

<pre><code>driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
</code></pre>

<p>这种方法是webdriver提供的一种隐式等待。<br/>
隐式等待是指当要查找元素（<code>driver.findElement()</code>），而这个元素没有马上出现时，告诉WebDriver查询Dom一定时间。默认值是0,但是设置之后，这个时间将在WebDriver对象实例整个生命周期都起作用。 <br/>
比如使用：<code>driver.findElement(By.id("element"));</code>来查找id=&#8221;element&#8221;的元素。如果没有设置隐式等待，那么执行到这一步的时候就会直接报错<code>NoSuchElementException</code>。而设置后，则会在10秒内不断就查询元素是否存在，如果存在则返回。超过10秒仍没找到，才报错。</p>

<h3>3.使用WebDriver提供的<code>Wait&lt;T&gt;</code>接口</h3>

<pre><code>FluentWait&lt;T&gt; implements Wait&lt;T&gt;  

Wait&lt;WebDriver&gt; wait = new FluentWait&lt;WebDriver&gt;(driver)
   .withTimeout(30, SECONDS)
   .pollingEvery(5, SECONDS)
   .ignoring(NoSuchElementException.class);

WebElement element = wait.until(new Function&lt;WebDriver, WebElement&gt;() {
 public WebElement apply(WebDriver driver) {
   return driver.findElement(By.id("element"));
 }
});
element.click();//something to do
</code></pre>

<p>此方法用于等待一个元素在页面上出现，超时时间为30S，每隔5S去请求一次，并且忽略掉until中抛出的<code>NoSuchElementException</code>。 <br/>
FluentWait的源码中这样写到:</p>

<pre><code>private Duration timeout = FIVE_HUNDRED_MILLIS;  
private Duration interval = FIVE_HUNDRED_MILLIS;   
</code></pre>

<p>因此，如果不设置<code>withTimeout</code>、<code>pollingEvery</code>则相当于等待了500ms,并且请求了一次，要使用<code>FluentWait</code>应该依据实际需要进行设置。那有没有更好的方法呢，有的，请往下看。</p>

<pre><code>WebDriverWait extends FluentWait&lt;WebDriver&gt;

Wait&lt;WebDriver&gt; waiter = new WebDriverWait(driver, 10);
WebElement element = waiter.until(new Function&lt;WebDriver, WebElement&gt;() {
        public WebElement apply(WebDriver driver) {
            return driver.findElement(By.id("element"));
        }

    });
element.click();//something to do
</code></pre>

<p><code>WebDriverWait</code>是继承于<code>FluentWait</code>的，并且实现了对功能进行了增强。从源码看出<code>WebDriverWait</code>的构造函数进行了如下的设置：</p>

<pre><code>withTimeout(timeOutInSeconds, TimeUnit.SECONDS);
pollingEvery(sleepTimeOut, TimeUnit.MILLISECONDS);
ignoring(NotFoundException.class);
</code></pre>

<p>设置了超时时间、每次请求的间隔为<code>sleepTimeOut</code>（默认500ms）、忽略了<code>NotFoundException</code>。因此直接使用<code>WebDriverWait</code>更加的省事。</p>

<h3>总结</h3>

<p>WebDriver提供了很多等待机制来增加selenium自动化的稳定性，只要合理利用是可以达到理想的效果的。 <br/>
无疑第一种方法sleep是最不可取的，是万不得已才用的一份方法，因为元素的加载与网络速度等客观因素直接相关。这个sleep的值是很难取的，值小了不行，值大了会造成case的运行速度缓慢。 <br/>
第二种方法是从全局的角度来解决元素查找问题的，在解决通用性的问题上有一定的优势，可以考虑使用。 <br/>
第三种方法是最好的，也是<strong>推荐</strong>的一种等待方式，很好的解决了动态元素的查找问题。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[提高selenium自动化的稳定性1-点击空白区域]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/11/selenium-stable-1/"/>
    <updated>2012-10-11T14:12:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/11/selenium-stable-1</id>
    <content type="html"><![CDATA[<p>在写selenium自动化的过程中，经常会遇到这样的问题：</p>

<blockquote><p>1.在同一个页面内做操作，比如点击某个按钮后，弹出一个框，再点击另外一个按钮，又弹出一个框 <br/>
2.此时如果第一个click操作后，第二个click再点击时，由于前一个弹出的框仍旧在前端显示，就会出错 <br/>
3.在实际人工操作中，点击出第一个框后，点击一下空白区域，在点击出现第二个框。因此，可以考虑一个点击空白区域的方法</p></blockquote>

<h2>实现方法如下</h2>

<pre><code>/**
 * 点击空白区域：坐标（0，0）
 */
public static void clickBlankArea(WebDriver driver) {
    Actions actions = new Actions(driver);
    actions.moveByOffset(0, 0).click().build().perform();
}
</code></pre>

<p>让driver先移动到一个空白位置（此处设为(0,0)坐标点），做一下点击操作即可</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PMD静态代码检查]]></title>
    <link href="http://blueshen.github.com/blog/2012/10/11/pmd/"/>
    <updated>2012-10-11T11:20:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/10/11/pmd</id>
    <content type="html"><![CDATA[<h2>一 maven插件：maven-pmd-plugin</h2>

<blockquote><p>pom.xml添加如下内容：</p></blockquote>

<pre><code>    &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.7.1&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;phase&gt;package&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;check&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
            &lt;configuration&gt;
                &lt;failurePriority&gt;2&lt;/failurePriority&gt;
                &lt;targetJdk&gt;1.6&lt;/targetJdk&gt;
                &lt;rulesets&gt;
                    &lt;ruleset&gt;/pmd-rulesets.xml&lt;/ruleset&gt;
                &lt;/rulesets&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
</code></pre>

<blockquote><p>failurePriority用于指定在什么错误级别会failure，级别0~5不等。0为最高，5为最低。此处设为2,意为0、1、2级别的错误都会导致报错。级别可以根据项目的要求进行配置</p></blockquote>

<!--more-->


<blockquote><p>其中<strong>pmd-rulesets.xml</strong>是规则文件,由pmd制定的一些规则，这些规则可以在pmd-*.jar里找到。 <strong>pmd-rulesets.xml</strong>类似于以下：</p></blockquote>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;ruleset xmlns="http://pmd.sf.net/ruleset/1.0.0" name="pmd-rulsets" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"&gt;
    &lt;description&gt;PMD Plugin preferences rule set&lt;/description&gt;
    &lt;rule ref="rulesets/typeresolution.xml/LooseCoupling"/&gt;
    &lt;rule ref="rulesets/typeresolution.xml/CloneMethodMustImplementCloneable"/&gt;
    &lt;rule ref="rulesets/typeresolution.xml/SignatureDeclareThrowsException"/&gt;
    &lt;rule ref="rulesets/braces.xml/IfStmtsMustUseBraces"/&gt;
    &lt;rule ref="rulesets/braces.xml/WhileLoopsMustUseBraces"/&gt;
&lt;/ruleset&gt;
</code></pre>

<h3>如何使用</h3>

<pre><code>mvn pmd:pmd
mvn pmd:check   
</code></pre>

<hr />

<h2>二 pmd在eclipse中的使用</h2>

<blockquote><p>1.安装</p>

<blockquote><p>Help -> Install New Software -> Add&#8230;<br/>
设置update site:<a href="http://pmd.sourceforge.net/eclipse">http://pmd.sourceforge.net/eclipse</a><br/>
一路next安装成功即可</p></blockquote>

<p>2.eclipse中的设置</p>

<blockquote><p>Window -> Prefrences -> PMD -> Rules Configuration<br/>
在其中可以设置相关Rules，这里面的Rules对应maven-pmd-plugins中的pmd-rulesets.xml，可以根据自己的需求进行定制</p></blockquote>

<p>3.eclipse中的使用</p>

<blockquote><p>右键选中project -> PMD -> Check Code with PMD<br/>
执行结束后，会打开PMD视图，会依据不同的Priority级别显示不同的颜色。其中红色标注的X是级别为错误级别的。</p></blockquote></blockquote>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown 工具]]></title>
    <link href="http://blueshen.github.com/blog/2012/09/21/markpad-tools/"/>
    <updated>2012-09-21T18:37:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/09/21/markpad-tools</id>
    <content type="html"><![CDATA[<hr />

<p>这个工具不错！可以很好的用来快速的对博客进行排版。<br/>
编辑器推荐: <a href="http://markdownpad.com/">MarkDownPad</a></p>

<p>@<a href="http://blueshen.github.com" title="blueshen">Blueshen</a>就是使用这种工具进行排版的</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown Syntax]]></title>
    <link href="http://blueshen.github.com/blog/2012/09/21/markdown-syntax/"/>
    <updated>2012-09-21T13:37:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/09/21/markdown-syntax</id>
    <content type="html"><![CDATA[<blockquote><p>用起来很爽 <br/>
语法具体可以参考：<a href="http://wowubuntu.com/markdown/">markdown Syntax</a></p></blockquote>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的第一篇中文博客]]></title>
    <link href="http://blueshen.github.com/blog/2012/09/20/wo-de-di--pian-zhong-wen-bo-ke/"/>
    <updated>2012-09-20T16:57:00+08:00</updated>
    <id>http://blueshen.github.com/blog/2012/09/20/wo-de-di&#8211;pian-zhong-wen-bo-ke</id>
    <content type="html"><![CDATA[<h1>吐槽</h1>

<p>这个OCTOPRESS真是难搞啊，最主要是_config.xml里面的格式校验也太严格了</center></p>

<h1>正文</h1>

<p>在这里写一些内容。
链接<a href="http://www.baidu.com">http://www.baidu.com</a></p>

<hr />

<p>代码段</p>

<pre><code>    System.out.println("ok!")
</code></pre>
]]></content>
  </entry>
  
</feed>
