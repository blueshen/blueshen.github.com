<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2013-01-10T21:03:08+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Selenium-Grid2 配置]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/01/10/selenium-grid2-config/"/>
    <updated>2013-01-10T19:37:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/01/10/selenium-grid2-config</id>
    <content type="html"><![CDATA[<h3>为什么要使用Selenium Grid ?</h3>

<ul>
<li>分布式运行大规模的Test</li>
<li>能够通过一个中央点，很容易的运行不同OS上的不同browser</li>
<li>最小化对Grid的维护时间，并能充分利用虚拟设备</li>
</ul>


<h3>Selenium Grid 部署与启动</h3>

<p>Hub :总控节点，连接调用Node。 <br/>
Node: 负责执行Tests,调用浏览器。</p>

<!--more-->


<p>下面以selenium-server-standalone-2.27.0.jar版本为例： <br/>
使用这样3台机器：</p>

<ul>
<li>10.81.14.170</li>
<li>10.81.14.180</li>
<li>10.81.14.190</li>
</ul>


<p>启动Hub（10.81.14.180）:</p>

<pre><code>java  -jar  selenium-server-standalone-2.27.0.jar -role hub 
</code></pre>

<p>在浏览器内打开：<a href="http://10.81.14.180:4444/grid/console">http://10.81.14.180:4444/grid/console</a>可以查看Hub状态。也就是说Grid默认启动端口是4444，如果想切换为其他端口，则加<code>-port</code>参数。比如要切换为8888：</p>

<pre><code>java  -jar  selenium-server-standalone-2.27.0.jar -role hub  -port 8888
</code></pre>

<p>启动Node（10.81.14.170）:</p>

<pre><code>java -jar selenium-server-standalone-2.27.0.jar -role node -hub http://10.81.14.180:8888/grid/register
</code></pre>

<p>同样的，也可以使用<code>-port</code>切换node端口，默认端口是5555.  <br/>
此处的node节点，也可以作为一个单机的远程节点存在，并同时支持RC,WebDriver。浏览器输入<a href="http://10.81.14.180:8877/wd/hub">http://10.81.14.180:8877/wd/hub</a>可以看到session信息。</p>

<p>然后，同样的启动10.81.14.180、10.81.14.190上的Node节点。</p>

<p>打开浏览器<a href="http://10.81.14.180:8888/grid/console">http://10.81.14.180:8888/grid/console</a>,可以看到如下的界面：</p>

<p><img src="http://www.shenyanchao.cn/images/blog/selenium-grid-console.png" alt="" /></p>

<p>至此，Selenium Grid2已经配置成功了。</p>

<h3>使用Grid运行Tests</h3>

<p>Selenium Grid2是向后兼容的，同时支持RC,WebDriver。
如果使用RC,即Selenium1，使用以下的方法：</p>

<pre><code>Selenium selenium = new DefaultSelenium(“10.81.14.180”, 8888, “*firefox”, “http://www.baidu.com”);
</code></pre>

<p>使用WebDriver的话，使用以下的方法：</p>

<pre><code>DesiredCapabilities capability = DesiredCapabilities.firefox();
WebDriver driver = new RemoteWebDriver(new URL("http://10.81.14.180:8888/wd/hub"), capability);
</code></pre>

<p>可以看出所有的请求都发给了Hub,然后由Hub分配给匹配的节点来执行。 <br/>
那么，Hub是如何来分配的呢？往下看</p>

<h3>Node配置</h3>

<p>默认，Node会启动11个浏览器实例:5 Firefox,5 Chrome, 1 Internet Explorer. 从Grid Console界面看出来，为什么每个机器上有22个实例呢？是这样的，Node为了同时支持RC与WebDriver两种协议，所以就是2＊11了。把鼠标放到各个浏览器图标上，就可以看出里面的配置区别了。<br/>
内容类似：</p>

<pre><code>{
      "browserName": "*firefox",
      "maxInstances": 5,
      "seleniumProtocol": "Selenium"
    }
</code></pre>

<p>或者</p>

<pre><code> {
      "browserName": "firefox",
      "maxInstances": 5,
      "seleniumProtocol": "WebDriver"
    }
</code></pre>

<p>其中，seleniumProtocol就是定义的不同协议了。</p>

<p>如何修改Driver配置呢？可以从启动参数里操作。</p>

<pre><code>-browser browserName=firefox,version=3.6,maxInstances=5,platform=LINUX
</code></pre>

<p>那Node默认启动的配置是什么呢？  <br/>
由于如果从启动参数里，配置这个多东西，很难写的。因此，官方很人性化的提供了JSON文件来配置。也就是说默认启动的配置如下： <br/>
<a href="http://code.google.com/p/selenium/source/browse/trunk/java/server/src/org/openqa/grid/common/defaults/DefaultNode.json">http://code.google.com/p/selenium/source/browse/trunk/java/server/src/org/openqa/grid/common/defaults/DefaultNode.json</a></p>

<p><a href="http://code.google.com/p/selenium/source/browse/trunk/java/server/src/org/openqa/grid/common/defaults/DefaultHub.json">http://code.google.com/p/selenium/source/browse/trunk/java/server/src/org/openqa/grid/common/defaults/DefaultHub.json</a></p>

<p>如果想自定义配置，直接对json文件修改，启动时，指定配置文件就可以了。</p>

<pre><code>java -jar selenium-server-standalone.jar -role hub -hubConfig hubconfig.json 
</code></pre>

<p>仅仅就这样就行了？从博文<a href="http://www.shenyanchao.cn/blog/2012/10/12/selenium-multiple-browser-support/">http://www.shenyanchao.cn/blog/2012/10/12/selenium-multiple-browser-support/</a>知道，浏览器的启动是要制定一些driver位置的，否则Node不知道怎么启动浏览器实例。因此需要进行指定：</p>

<pre><code>java -jar selenium-server-standalone-2.27.0.jar -port 8877 -role node -hub http://10.81.14.180:8888/grid/register  -nodeConfig nodeconfig.json -Dwebdriver.chrome.driver="E:/selenium/chromedriver.exe" -Dwebdriver.ie.driver="E:/selenium/IEDriverServer.exe"
</code></pre>

<p>参考文档：<br/>
<a href="http://code.google.com/p/selenium/wiki/Grid2">http://code.google.com/p/selenium/wiki/Grid2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySql性能监控]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/01/10/mysql-monitor/"/>
    <updated>2013-01-10T19:03:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/01/10/mysql-monitor</id>
    <content type="html"><![CDATA[<h2>用mysqldumpslow分析mysql的slow query log</h2>

<p>mysql有一个功能就是可以log下来运行的比较慢的sql语句，默认是没有这个log的，为了开启这个功能，要修改my.cnf或者在mysql启动的时候加入一些参数。如果在my.cnf里面修改，需增加如下几行</p>

<pre><code>long_query_time = 1
log-slow-queries = /var/youpath/slow.log
log-queries-not-using-indexes[这个在mysql4.10以后才被引入]
</code></pre>

<p>long_query_time 是指执行超过多久的sql会被log下来，这里是1秒。<br/>
log-slow-queries 设置把日志写在那里，可以为空，系统会给一个缺省的文件host_name-slow.log，我生成的log就在mysql的data目录 <br/>
log-queries-not-using-indexes 就是字面意思，log下来没有使用索引的query。 <br/>
把上述参数打开，运行一段时间，就可以关掉了，省得影响生产环境。</p>

<!--more-->


<p>接下来就是分析了，我这里的文件名字叫host-slow.log。   <br/>
先mysqldumpslow –help以下，我主要用的是</p>

<pre><code>-s ORDER what to sort by (t, at, l, al, r, ar etc), ‘at’ is default
-t NUM just show the top n queries
-g PATTERN grep: only consider stmts that include this string
</code></pre>

<p>-s，是order的顺序，说明写的不够详细，俺用下来，包括看了代码，主要有
c,t,l,r和ac,at,al,ar，分别是按照query次数，时间，lock的时间和返回的记录数来排序，前面加了a的时倒叙  <br/>
-t，是top n的意思，即为返回前面多少条的数据  <br/>
-g，后边可以写一个正则匹配模式，大小写不敏感的</p>

<pre><code>mysqldumpslow -s c -t 20 host-slow.log
mysqldumpslow -s r -t 20 host-slow.log
</code></pre>

<p>上述命令可以看出访问次数最多的20个sql语句和返回记录集最多的20个sql。  <br/>
mysqldumpslow -t 10 -s t -g “left join” host-slow.log  <br/>
这个是按照时间返回前10条里面含有左连接的sql语句。 <br/>
用了这个工具就可以查询出来那些sql语句是性能的瓶颈，进行优化，比如加索引，该应用的实现方式等。</p>

<h2>linux 系统整体性能查看的方法:</h2>

<p>vmstat 10 &#8212;&#8211;每10秒刷新一次</p>

<p>procs &#8212;&#8212;&#8212;&#8211;memory&#8212;&#8212;&#8212;- &#8212;swap&#8211; &#8212;&#8211;io&#8212;- &#8211;system&#8211; &#8212;&#8211;cpu&#8212;&#8212;
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 0  0      0  56508  10968  68380    0    0   184    40 1021   88  3 14 78  5  0
 0  0      0  56508  10976  68376    0    0     0     3 1251   49  0  0 100  0  0
 0  0      0  56508  10976  68376    0    0     0     0 1250   50  0  0 100  0  0
 0  0      0  56508  10984  68376    0    0     0     4 1251   51  0  0 100  0  0
 0  0      0  56508  10984  68376    0    0     0     0 1250   48  0  0 100  0  0
 0  0      0  56508  10984  68376    0    0     0     0 1250   50  0  0 100  0  0
 0  0      0  56508  10984  68376    0    0     0     0 1250   51  0  0 100  0  0
 0  0      0  56508  10992  68376    0    0     0     2 1250   49  0  0 100  0  0
 0  0      0  56508  10992  68376    0    0     0     0 1250   51  0  0 100  0  0</p>

<p>procs: <br/>
r&#8211;>;在运行队列中等待的进程数  <br/>
b&#8211;>;在等待io的进程数 <br/>
w&#8211;>;可以进入运行队列但被替换的进程</p>

<p>memory  <br/>
swap&#8211;>;现时可用的交换内存（k表示） <br/>
free&#8211;>;空闲的内存（k表示）</p>

<p>pages <br/>
re－－》回收的页面 <br/>
mf－－》非严重错误的页面 <br/>
pi－－》进入页面数（k表示） <br/>
po－－》出页面数（k表示） <br/>
fr－－》空余的页面数（k表示） <br/>
de－－》提前读入的页面中的未命中数 <br/>
sr－－》通过时钟算法扫描的页面</p>

<p>disk 显示每秒的磁盘操作。 s表示scsi盘，0表示盘号</p>

<p>fault 显示每秒的中断数 <br/>
in－－》设备中断  <br/>
sy－－》系统中断 <br/>
cy－－》cpu交换</p>

<p>cpu 表示cpu的使用状态 <br/>
cs－－》用户进程使用的时间 <br/>
sy－－》系统进程使用的时间 <br/>
id－－》cpu空闲的时间</p>

<p>其中: <br/>
如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。 <br/>
如果pi，po 长期不等于0，表示内存不足。 <br/>
如果disk 经常不等于0， 且在 b中的队列 大于3， 表示 io性能不好。</p>

<p>每100s显示一次mysql 运行的状态:</p>

<pre><code>mysqladmin extended -i100 –r
</code></pre>

<p>显示mysql服务器的线程列表</p>

<pre><code>mysqladmin -u root -p process    
</code></pre>

<p>Enter password:
+&#8212;-+&#8212;&#8212;+&#8212;&#8212;&#8212;&#8211;+&#8212;-+&#8212;&#8212;&#8212;+&#8212;&#8212;+&#8212;&#8212;-+&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;+
| Id | User | Host      | db | Command | Time | State | Info             |
+&#8212;-+&#8212;&#8212;+&#8212;&#8212;&#8212;&#8211;+&#8212;-+&#8212;&#8212;&#8212;+&#8212;&#8212;+&#8212;&#8212;-+&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;+
| 12 | root | localhost |    | Query   | 0    |       | show processlist |
+&#8212;-+&#8212;&#8212;+&#8212;&#8212;&#8212;&#8211;+&#8212;-+&#8212;&#8212;&#8212;+&#8212;&#8212;+&#8212;&#8212;-+&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;+</p>

<p>相关命令：</p>

<p>一，获取mysql用户下的进程总数</p>

<pre><code>ps -ef | awk '{print $1}' | grep "mysql" | grep -v "grep" | wc-1
</code></pre>

<p>二，主机性能状态</p>

<pre><code>[root@ ~]# uptime
</code></pre>

<p> 13:05:52 up 53 days, 52 min,  1 user,  load average: 0.00, 0.00, 0.00</p>

<p>三，CPU使用率 <br/>
top 或 vmstat  <br/>
四，磁盘IO量  <br/>
vmstat 或  iostat
五，swap进出量[内存] <br/>
free
六，数据库性能状态 <br/>
(1)QPS(每秒Query量) <br/>
QPS = Questions(or Queries) / seconds  <br/>
mysql > show status like &#8216;Question&#8217;; <br/>
(2)TPS(每秒事务量) <br/>
TPS = (Com_commit + Com_rollback) / seconds
mysql > show status like &#8216;Com_commit&#8217;;  <br/>
mysql > show status like &#8216;Com_rollback&#8217;; <br/>
(3)key Buffer 命中率  <br/>
key_buffer_read_hits = (1-key_reads / key_read_requests) * 100% <br/>
key_buffer_write_hits = (1-key_writes / key_write_requests) * 100%  <br/>
mysql> show status like &#8216;Key%&#8217;; <br/>
(4)InnoDB Buffer命中率  <br/>
innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%  <br/>
mysql> show status like &#8216;innodb_buffer_pool_read%&#8217;;   <br/>
(5)Query Cache命中率  <br/>
Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;  <br/>
mysql> show status like &#8216;Qcache%&#8217;; <br/>
(6)Table Cache状态量  <br/>
mysql> show status like &#8216;open%&#8217;;  <br/>
(7)Thread Cache 命中率  <br/>
Thread_cache_hits = (1 - Threads_created / connections ) * 100%  <br/>
mysql> show status like &#8216;Thread%&#8217;;  <br/>
mysql> show status like &#8216;Connections&#8217;;   <br/>
(8)锁定状态   <br/>
mysql> show status like &#8216;%lock%&#8217;;  <br/>
(9)复制延时量  <br/>
mysql > show slave status  <br/>
(10) Tmp Table 状况(临时表状况) <br/>
mysql > show status like &#8216;Create_tmp%&#8217;;  <br/>
(11) Binlog Cache 使用状况  <br/>
mysql > show status like &#8216;Binlog_cache%&#8217;; <br/>
(12) Innodb_log_waits 量  <br/>
mysql > show status like &#8216;innodb_log_waits&#8217;;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从源码编译构建Jmeter]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/12/31/build-jmeter-from-sources/"/>
    <updated>2012-12-31T15:48:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/12/31/build-jmeter-from-sources</id>
    <content type="html"><![CDATA[<h3>获取Jmeter的源码</h3>

<p>Jmeter源码可以从SVN REPO找到，地址：<a href="https://github.com/apache/jmeter">https://github.com/apache/jmeter</a>  <br/>
从GIT上也是可以的。地址：<a href="https://github.com/apache/jmeter">https://github.com/apache/jmeter</a>  <br/>
Git clone:</p>

<pre><code>git clone git://github.com/apache/jmeter.git jmeter
</code></pre>

<p>这样就把Jmeter的源码给放到了本地的jmeter文件夹内。</p>

<h3>配置并编译Jmeter</h3>

<!--more-->


<p>进入Jmeter目录，有个build.xml文件，显然是用ant管理的。 <br/>
此时，如果把项目import到eclipse内，会发现缺失很多依赖的jar包。此时不禁感叹，为啥不直接用maven管理呢，这样就不用管这些了。我第一次操作的时候害的我还去下载了一个最新的发行版本，然后从里面找各种依赖的jar包。后来发现，开发者已经为我们想到了这个。执行ant命令就可以直接下载：</p>

<pre><code>ant download_jars
</code></pre>

<p>一段时间的等待后，各种jar包就下载好了。要耐心等待，这个过程要下载很多包的。</p>

<p>接下来吗？直接执行：</p>

<pre><code>ant install /ant clean install
</code></pre>

<p>提示BUILD SUCCESSFUL,这就表明已经编译成功了。</p>

<h3>运行Jmeter</h3>

<p>进入bin目录，执行jmeter.bat（windows）或者 ./jmeter（linux）,Jmeter的界面打开了，开始体验吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jmeter 分布式 step by step]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/12/07/jmeter-distribution-step-by-step/"/>
    <updated>2012-12-07T13:25:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/12/07/jmeter-distribution-step-by-step</id>
    <content type="html"><![CDATA[<h3>环境准备</h3>

<ul>
<li>Jmeter(本文以2.8为例)</li>
<li>jdk 1.5+</li>
<li>多台机器<br/>
(假设3台，IP分别为：10.81.14.170，10.81.14.180，10.81.14.190)</li>
</ul>


<h3>工作原理</h3>

<p>1台机器做为总控机，其他机器作为节点机。总控机器，负责将JMX脚本分发到节点机上，各个节点同时独立运行，向服务发出压力，总控机可以获取并汇总报告。 <br/>
定义：</p>

<blockquote><p>总控机为<strong>client</strong>，我们（用户）只与这太机器打交道。或者称之为<strong>Master</strong>; <br/>
节点机器为<strong>server</strong>,它负责真正的向服务发出压力。或者称之为<strong>Slave</strong>;</p></blockquote>

<!--more-->


<p>这个只是角度不一样，就是一个总分结构。</p>

<h3>Slave配置</h3>

<p>假设这3台机器都作为slave，那么分别在各个机器上，
进入%JMETER HOME%/bin/目录   <br/>
运行: <br/>
jmeter-server.bat（windows） <br/>
jmeter-server.sh (linux)</p>

<h3>Master配置</h3>

<p>这里，我们以10.81.14.170作为Master,
进入%JMETER HOME%/bin/ 目录 <br/>
找到jmeter.properties文件，打开并找到remote_hosts=127.0.0.1这一行，修改为remote_hosts=127.0.0.1,10.81.14.180,10.81.14.190  <br/>
其中，IP部分指向slave,并以逗号分割。由于170这台机器同时也是slave而存在，因此直接写为127.0.0.1了。  <br/>
在目录下执行： <br/>
jmeter.bat (windows) <br/>
jmeter.sh (linux) <br/>
用来打开GUI界面。<br/>
点开运行->远程启动，将会看到这样的界面： <br/>
<img src="http://www.shenyanchao.cn/images/blog/jmeter-remote.png" alt="Jmeter远程启动" /> <br/>
从这里就可以指定哪台slave来发压力了。当然也可以选择远程全部启动了。</p>

<h3>为什么要分布式发压力？</h3>

<p>1.单机运行受限，网络、CPU、内存读可能是瓶颈所在； <br/>
2.Jmeter是纯Java的程序，受JVM的一些限制；  <br/>
一般情况下，依据机器配置，单机的发压量为300～600，如果需要更大的并发，就需要使用分布式的多台机器同时加压。</p>

<h3>配置注意事项</h3>

<p>1.尽量保证各台机器之间的jmeter版本一致 <br/>
2.JDK／JRE要正确安装 <br/>
3.启动端口有可能被占用了，这个需要在启动时间指定SERVER_PORT</p>

<hr />

<p>参考文献： <br/>
<a href="http://jmeter.apache.org/usermanual/remote-test.html">http://jmeter.apache.org/usermanual/remote-test.html</a> <br/>
<a href="http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.pdf">http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysqldump命令使用]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/12/04/mysqldump/"/>
    <updated>2012-12-04T15:32:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/12/04/mysqldump</id>
    <content type="html"><![CDATA[<p>mysqldump命令用来备份数据库，默认会导出一整条insert语句，虽说执行起来会快一些。但是遇到大表，很可能因为缓冲区过载而挂掉。</p>

<p>mysqldump &#8211;skip-opt 加入这个参数，就可以导出多条独立的insert语句。</p>

<p>例如：</p>

<pre><code>mysqldump --skip-opt -uroot -p database tablename &gt; script.sql
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：观察者（Observer） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/observer-in-java/"/>
    <updated>2012-11-08T18:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/observer-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>又叫发布订阅模式（Publish/subscribe），它定义了对象间的一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。</p>

<blockquote><p>这个定义还是比较通俗易懂的。我看了一遍，发现这不就是微博吗？我发布一条微博，那么所有关注我的人，都会收到通知，然后在新鲜事里显示出来。没错，就是这样！</p></blockquote>

<p>观察者模式有4个角色：</p>

<ul>
<li>被观察者(Observable):<br/>
定义被观察者必须实现的职责，动态的增加、删除观察者以及通知观察者</li>
<li>观察者（Observer）: <br/>
接收到消息后，进行更新操作</li>
<li>被观察者(Observable)具体类:<br/>
定义自己的业务逻辑，并定义哪儿些事件需要通知观察者</li>
<li>观察者（Observer）具体类：   <br/>
每个观察者在接收到消息后的更新操作是不同的。</li>
</ul>


<!--more-->


<p>在Java中如何实现观察者模式呢？废话，写代码啊！这个我自然知道，更令人惊喜的是JDK自身就提供了对观察者模式的原生支持，我不得不赞叹Java的强大。</p>

<p>Java提供了这样的两个东西：</p>

<ul>
<li>类<code>java.util.Observable</code>：<br/>
它内部维护了一个Vector容器，用来放所有的观察者，并且提供了添加、删除观察者的方法。此外，定义了notifyObservers方法，用来通知观察者。</li>
<li>接口<code>java.util.Observer</code>：
它定义了一个update方法，让Observer具体类来实现各自的操作。</li>
</ul>


<p>下面，就以微博作为例子吧。<br/>
先来一个被观察者，也就是我自己了。</p>

<pre><code>public class ShenYanChao extends Observable {

    //业务逻辑,不通知
    public String getName(){
        return "shenyanchao";
    }
    //发微博，通知
    public void publishWeibo(String content){
        System.out.println("我发布1条微博，內容是：["+content+"]");
        setChanged();
        notifyObservers(content);
    }
}
</code></pre>

<p>其中，setChanged()用来表明自身的状态变了，否则观察者是不会理的。这个是JDK的限制，其实观察者模式可以不用这个的。</p>

<p>下面就需要定义观察者了，也就是我的粉丝了。</p>

<pre><code>public class Fans implements Observer {

    @Override
    public void update(Observable o, Object content) {
        String who = ((ShenYanChao) o).getName();
        System.out.println("新鲜事:{" + who + "发布了一条微博，内容是：[" + content + "]}");
    }

}
</code></pre>

<p>观察者Fans一旦发现我发了1条微博，那么他就会出现一条新鲜事的了。update()的参数，第1个是被观察者，也就是我；第2个就是notifyObservers传过来的参数了，此处是微博内容。</p>

<p>具体场景是这样的：</p>

<pre><code>ShenYanChao shenyanchao = new ShenYanChao();
final int FANS_NUM = 10;//我的粉丝可不止这些呢
for (int i = 0; i &lt; FANS_NUM; i++) {
    shenyanchao.addObserver(new Fans());
}
shenyanchao.publishWeibo("欢迎登录：www.shenyanchao.cn");
</code></pre>

<p>此处模拟，我有10个粉丝，然后我发了1条微博。结果如下：</p>

<pre><code>我发布1条微博，內容是：[欢迎登录：www.shenyanchao.cn]
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
</code></pre>

<p>可见，一旦我发了微博，所有的观察者（Fans）都收到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：迭代器（Iterator） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/iterator-in-java/"/>
    <updated>2012-11-08T16:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/iterator-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>迭代器模式提供了一种方法来访问一个容器对象种的各个元素，而又不暴露这个对象的内部细节。</p>

<blockquote><p>在Java中已经默认提供了Iterator支持，各种容器类都进行了实现，而事实上，迭代器模式就是为了解决如何遍历这些容器里的元素而诞生的。</p></blockquote>

<p><strong>迭代器模式</strong>主要有以下的角色：</p>

<ul>
<li>Iterator抽象迭代器： <br/>
负责定义访问与遍历元素的接口。基本有3个固定的方法<code>hasNext()</code>,<code>next()</code>,<code>remove()</code>;</li>
<li>Concrete Iterator具体迭代器：  <br/>
迭代器的实现类，实现接口，完成元素遍历。</li>
<li>Aggregate抽象容器： <br/>
定义创建具体迭代器的接口。在Java种一般是<code>iterator()</code>方法。</li>
<li>Concrete Aggregate具体容器：<br/>
实现创建迭代器接口，返回迭代器实例对象。</li>
</ul>


<!--more-->


<p>为了方便，下面就直接以ArrayList为例，来看看迭代器是如何实现的吧。<br/>
在使用时，通常这样对ArrayList进行遍历：</p>

<pre><code>    List&lt;String&gt; list = new ArrayList&lt;String&gt;();
    list.add("first");
    list.add("second");
    Iterator&lt;String&gt; itr = list.iterator();
    while (itr.hasNext()) {
        String element = itr.next();
        System.out.println(element);
    }
</code></pre>

<p>从这里，我们可以看出来，这就是完全的迭代器模式。<br/>
首先来看，Iterator接口（java.util.Iterator）：</p>

<pre><code>public interface Iterator&lt;E&gt; {

    boolean hasNext();

    E next();

    void remove();
}
</code></pre>

<p>然后是Iterator的具体实现类(java.util.AbstractList<E>$Itr)：</p>

<pre><code>private class Itr implements Iterator&lt;E&gt; {

    int cursor = 0;

    int lastRet = -1;

    int expectedModCount = modCount;

    public boolean hasNext() {
        return cursor != size();
    }

    public E next() {
        checkForComodification();
        try {
        E next = get(cursor);
        lastRet = cursor++;
        return next;
        } catch (IndexOutOfBoundsException e) {
            checkForComodification();
            throw new NoSuchElementException();
        }
    }

    public void remove() {
        if (lastRet == -1)
        throw new IllegalStateException();
            checkForComodification();

        try {
            AbstractList.this.remove(lastRet);
        if (lastRet &lt; cursor)
            cursor--;
        lastRet = -1;
        expectedModCount = modCount;
        } catch (IndexOutOfBoundsException e) {
            throw new ConcurrentModificationException();
        }
    }

    final void checkForComodification() {
        if (modCount != expectedModCount)
            throw new ConcurrentModificationException();
    }
}
</code></pre>

<p>这个就是具体的Iterator了，当然还有另外一个ListItr extends Itr，这个是专门针对List进行操作的。 <br/>
那么Aggregate接口对应的是哪个呢？就是<code>java.util.AbstractCollection&lt;E&gt;</code> ，它里面定义了这样的一个接口：</p>

<pre><code>...
/**
 * Returns an iterator over the elements contained in this collection.
 *
 * @return an iterator over the elements contained in this collection
 */
public abstract Iterator&lt;E&gt; iterator();
...
</code></pre>

<p>那么具体实现是在哪儿？<code>java.util.AbstractList&lt;E&gt;</code>做了实现。</p>

<pre><code>    public Iterator&lt;E&gt; iterator() {
        return new Itr();
    }
</code></pre>

<p>返回了一个具体的迭代器实例。而ArrayList,LinkedList都是继承AbstractList的，因此自动具有了返回迭代器实例的功能。</p>

<p>因此，Java种的容器类只负责元素的的维护就好了。访问就教给迭代器吧，Java做的如此完善，以至于我们都不必再自己写Iterator了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：命令（Command） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/command-in-java/"/>
    <updated>2012-11-08T15:09:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/command-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>命令模式是一种高内聚的模式。它将一个请求封装成一个对象，从而让使用不同请求来把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销与恢复功能。 <br/>
听起来，好复杂！</p>

<p>在程序员之间，流传着这样一句话：程序写到最后，就是if-else,for,while。<br/>
真是枯燥啊！其实能体会到这种感觉，说明作为一个程序员，你已经有了一定的造诣了。那如何提高呢？</p>

<p>试想，在代码中，你有很多if-else或者case语句。为什么有这样的语句呢？因为判断条件多啊，需要根据不同的条件来做不同的事情。2、3个条件还可以写，如果有20个条件呢，或者N多呢。那么我们的if-else那就判断N重条件，这简直是无法忍受的，写出的代码可维护性更不用说了。</p>

<!--more-->


<p> <br/>
<strong>命令模式</strong>就是可以解决这种问题的方法之一。下面就来提高一下程序员的自我修养了。</p>

<p>命令模式中，主要有3个角色：</p>

<ul>
<li>Receiver命令接收者</li>
<li>Command命令</li>
<li>Invoker命令调用者</li>
</ul>


<p>下面开始分别定义： <br/>
<strong>Receiver:</strong>定义命令的N种接收者</p>

<pre><code>public abstract class AbstractReceiver {
    public abstract void doSomething();
}

public class Receiver1 extends AbstractReceiver {
    @Override
    public void doSomething() {
        System.out.println("receiver1 do something");
    }
}
public class Receiver2 extends AbstractReceiver {
    @Override
    public void doSomething() {
        System.out.println("receiver2 do something");
    }
}
...
public class ReceiverN
...
</code></pre>

<p><strong>Command:</strong>定义N种命令</p>

<pre><code>public abstract class AbstractCommand {
    public abstract void execute();
}

public class Command1 extends AbstractCommand {
    private AbstractReceiver receiver;
    public Command1(AbstractReceiver receiver) {
        this.receiver = receiver;
    }
    @Override
    public void execute() {
        System.out.println("command1 命令发出");
        receiver.doSomething();
    }
}
public class Command2 extends AbstractCommand {
    private AbstractReceiver receiver;
    public Command2(AbstractReceiver receiver) {
        this.receiver = receiver;
    }
    @Override
    public void execute() {
        System.out.println("command2 命令发出");
        receiver.doSomething();
    }
}
...
public class CommandN
....
</code></pre>

<p><strong>Invoker:</strong>定义调用者</p>

<pre><code>public class Invoker {

    private List&lt;AbstractCommand&gt; commandList = new LinkedList&lt;AbstractCommand&gt;();

    public void addCommand(AbstractCommand command) {
        commandList.add(command);
    }

    public void addCommands(LinkedList&lt;AbstractCommand&gt; commands) {
        commandList.addAll(commands);
    }

    public void action() {
        for (AbstractCommand command : commandList) {
            command.execute();
        }
    }

}
</code></pre>

<p>使用场景：</p>

<pre><code>Invoker invoker = new Invoker();
AbstractReceiver receiver1 = new Receiver1();
AbstractReceiver receiver2 = new Receiver2();
AbstractCommand command1 = new Command1(receiver2);
AbstractCommand command2 = new Command2(receiver1);
invoker.addCommand(command1);
invoker.addCommand(command2);
invoker.action();
</code></pre>

<p>运行结果：</p>

<pre><code>command1 命令发出
receiver2 do something
command2 命令发出
receiver1 do something
</code></pre>

<p>现在再回过来看命令模式的定义，就比较明白了吧。也就是说有N种请求条件，那么就定义N个类来封装请求，我们称之为命令（Command）。每个命令做什么操作呢，谁来执行这个命令呢，有命令自己来进行定义。这样就避免了if-else，而由N种命令来决定跳转关系。</p>

<p>调用者（Invoker）呢，它维护了一个命令列表，并按照一定的顺序来发起命令调用。当然这个列表也有可能就只有一个命令了，就简化了一下。与if-else对比更直观的了。</p>

<p>定义中还提到了命令撤销或恢复的功能，这种撤销与恢复也是命令的一种了，一般可以通过扩展一个命令出来，通过诸如日志等来恢复之前的操作。其实这个也是可以通过备忘录模式来实现的。</p>

<h2>命令模式 in JDK</h2>

<pre><code>java.lang.Runnable#run()
javax.swing.Action#actionPeformed(ActionEvent e)
</code></pre>

<p>从Runnable来说，不同的实现者，通过调用run()来实现在不同线程执行不同的操作。
从Action来说，由于桌面UI有很多的操作事件，这些事件就是命令。通过actionPerformed函数，接受不同的命令参数来做出不同的表现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：原型（prototype） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/07/prototype-in-java/"/>
    <updated>2012-11-07T20:41:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/07/prototype-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。<br/>
基本上，可以就是一个clone方法，通过这个方法进行对象的拷贝。</p>

<p>Java中的原型模式：</p>

<pre><code>public class ProtoTypeClass implements Cloneable {

    @Override
    public ProtoTypeClass clone(){
        ProtoTypeClass cloneObject = null;
        try{
            cloneObject = (ProtoTypeClass) super.clone();
        }catch (Exception e) {
            // TODO: handle exception
        }
        return cloneObject;
    }
}
</code></pre>

<p>上面就是实现了原型模式。不过Java在提供了Cloneable这一接口方便实现原型模式的同时，也带来了一些不容易注意到的问题。</p>

<ul>
<li>clone时，构造函数不会执行</li>
<li>浅拷贝与深拷贝</li>
</ul>


<p>这两个问题是需要时刻注意的。由于本文主要不是讲Cloneable,所以另辟专题吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：门面（Facade） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/07/facade-in-java/"/>
    <updated>2012-11-07T20:00:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/07/facade-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。 <br/>
就是说，Facade提供了一个统一的接口，掩盖下层系统的复杂性，用户用起来更加的方便。</p>

<p>以医院的例子，做个比喻：</p>

<!--more-->


<p></p>

<p>在无接待员的时候，病人要做业务，好复杂啊，好累！</p>

<p><img src="http://www.shenyanchao.cn/images/blog/facade-hospital1.png" alt="无接待员" /></p>

<p>有了接待员，各种就医流程好流畅的说。因为有接待员与各个部门打交道。</p>

<p><img src="http://www.shenyanchao.cn/images/blog/facade-hospital2.png" alt="有接待员" /></p>

<p>这个例子很好的说出了facade的作用。甚至都不需要代码来表达了。</p>

<p>门面模式的优点：</p>

<p>　　●松散耦合</p>

<p>　　门面模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。</p>

<p>　　●简单易用</p>

<p>　　门面模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟门面类交互就可以了。</p>

<p>　　●更好的划分访问层次</p>

<p>　　通过合理使用Facade，可以帮助我们更好地划分访问的层次。有些方法是对系统外的，有些方法是系统内部使用的。把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节</p>

<h2>门面模式 in JDK</h2>

<p>这个具体的例子，我首先想到的就是<a href="http://www.slf4j.org/">slf4j</a>这个日志框架。通过名字Simple Logging Facade for Java (SLF4J)就知道是采用的Facade模式了。下面是其官方的介绍： <br/>
The Simple Logging Facade for Java or (SLF4J) serves as a simple facade or abstraction for various logging frameworks, e.g. java.util.logging, log4j and logback, allowing the end user to plug in the desired logging framework at deployment time. <br/>
也就是说，他屏蔽了各种日志框架的差异，提供了一个统一的日志接口给用户使用。不得不说，<a href="http://www.slf4j.org/">slf4j</a>很好用，推荐！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：模板方法（template method） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/07/template-method-in-java/"/>
    <updated>2012-11-07T19:30:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/07/template-method-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义这个算法的某些特定步骤。 <br/>
简单的说，就是你首先定义一下算法的各部分之间的执行顺序或者调用关系，然后在子类中实现具体每一部分是如何实现的。</p>

<p>采用什么算法作为例子呢？就是用<strong>把动物放进冰箱</strong>这个算法吧。</p>

<!--more-->


<p>先定义一个抽象类:</p>

<pre><code>public abstract class AbstractAlgorithm {

    public abstract void openFridgeDoor();

    public abstract void putAnimalInFridge();

    public abstract void closeFridgeDoor();

    public void execute(){
        this.openFridgeDoor();
        this.putAnimalInFridge();
        this.closeFridgeDoor();
    }
}
</code></pre>

<p>这个类，定义了3个操作，打开冰箱门、把动物放进冰箱、关闭冰箱门，但并未实现，而留给子类来具体实现。<code>execute()</code>用来执行这一算法，它指定了各个操作之间的先后顺序。</p>

<p>比如：我想把大象放进冰箱里：</p>

<pre><code>public class PutElephantInFridge extends AbstractAlgorithm {

    @Override
    public void openFridgeDoor() {
        System.out.println("open the fridge door lightly");
    }

    @Override
    public void putAnimalInFridge() {
        System.out
            .println("try my best to put elephant in fridge,after 2 hours, I got it.");
    }

    @Override
    public void closeFridgeDoor() {
        System.out.println("close the fridge door...");
    }

}
</code></pre>

<p>具体使用：</p>

<pre><code>PutElephantInFridge algo = new PutElephantInFridge();
algo.execute();
</code></pre>

<p>好吧，执行一下算法就完成了。
下面吗？我想把猴子放进冰箱，好吧，新建一个类继承AbstractAlgorithm，然后重写相关步骤就可以了。</p>

<h2>模板方法 In JDK</h2>

<pre><code>java.io.InputStream, java.io.OutputStream, java.io.Reader，java.io.Writer      

java.util.AbstractList, java.util.AbstractSet and java.util.AbstractMap
</code></pre>

<p>所有非抽象方法。</p>

<pre><code>javax.servlet.http.HttpServlet#doXXX()   
</code></pre>

<p>都默认返回一个<code>SC_METHOD_NOT_ALLOWED</code>类似的错误码，或者代码，要想使用，只有继承并且重写这些方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式:工厂（factory） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/07/factory-in-java/"/>
    <updated>2012-11-07T17:43:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/07/factory-in-java</id>
    <content type="html"><![CDATA[<p>工厂模式，直接按名字来说，就是负责专门生产产品的。 <br/>
大致分为3类：</p>

<ul>
<li>工厂方法</li>
<li>简单工厂</li>
<li>抽象工厂</li>
</ul>


<p>同时，也有人认为简单工厂只是工厂方法的一种特列，那么就分为两种了。本文就按3种分别进行介绍了。</p>

<h3>工厂方法</h3>

<p><strong>定义：</strong>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法让一个类的实例化延迟到其子类。</p>

<!--more-->


<p>简单的说，就是有一个抽象类定义了一个方法，而实现类来决定到底初始化那个实例。这些实例，就是一个个产品了。 <br/>
产品接口（主要是考虑面向接口变成吧，个人感觉不要也行，对理解模式没有影响）：</p>

<pre><code>public interface IProduct {
    public void sayName();
}
</code></pre>

<p>下面呢，假设有两种产品：</p>

<pre><code>public class ProductA implements IProduct {
    @Override
    public void sayName() {
        // TODO Auto-generated method stub
        System.out.println("I am ProductA");
    }
}
public class ProductB implements IProduct {
    @Override
    public void sayName() {
        System.out.println("I am productB");
    }
}
</code></pre>

<p>有了产品定义，那么下面就要建一个工厂了，怎么建呢？依据定义来说，首先要定义一个接口了：</p>

<pre><code>public abstract class AbstractProductFactory {
    public abstract &lt;T extends IProduct&gt; T createProduct(
        Class&lt;T&gt; productType);
}
</code></pre>

<p>下面就是一个子类了，也就是具体负责初始化实例的工厂了。</p>

<pre><code>public class ProductFactory extends AbstractProductFactory {

    @Override
    public &lt;T extends IProduct&gt; T createProduct(Class&lt;T&gt; productType) {
        // TODO Auto-generated method stub
        IProduct product = null;
        try {
            product = productType.newInstance();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
        return (T) product;
    }
}
</code></pre>

<p>如何生成不同的产品呢，本例是根据传入的不同的类，来返回不同的实例的。当然了也可以用一个标识符了,如果传入的是“A”那么返回一个ProductA。诸如此类，这就是工厂方法了。<br/>
具体使用时，是这样的：</p>

<pre><code>ProductFactory productFactory = new ProductFactory();
IProduct productA = productFactory.createProduct(ProductA.class);
IProduct productB = productFactory.createProduct(ProductB.class);
productA.sayName();
productB.sayName();
</code></pre>

<h2>简单工厂</h2>

<p>简单工厂，可以说是工厂方法的一种扩展。上例中，发现在使用<code>ProductFactory</code>的时候，还需要先实例化一个。怎么那么麻烦呢？就像在实际生活中，我想要某个产品，我还需要先建一个工厂是一个道理的。</p>

<p>还好，Java提供了这样一个关键字<code>static</code>,简单工厂类就变成这个样子了。</p>

<pre><code>public class SimpleProductFactory {

    public static &lt;T extends IProduct&gt; T createProduct(Class&lt;T&gt; productType) {
        // TODO Auto-generated method stub
        IProduct product = null;
        try {
            product = productType.newInstance();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
        return (T) product;
    }
}
</code></pre>

<p>这样在使用的时间是方便了不少呢？</p>

<pre><code>IProduct productA = SimpleProductFactory.createProduct(ProductA.class);
IProduct productB = SimpleProductFactory.createProduct(ProductB.class);
productA.sayName();
productB.sayName();
</code></pre>

<h2>抽象工厂</h2>

<p>情况进一步发展，大家对美的追求不断提高。工厂也是需要对自己的产品不断升级的。那就对现有的产品ProductA，ProductB进行升级，各自推出红，蓝两种颜色的产品。那么，我就需要两个工厂了，一个工厂来生产红色产品，一个工厂来生产蓝色产品。 <br/>
下面，先对产品进行改造：</p>

<pre><code>public interface IProduct {
    public void sayName();
    public void sayColor();
}
public abstract class ProductA implements IProduct {
    @Override
    public void sayName() {
        // TODO Auto-generated method stub
        System.out.println("I am ProductA");
    }
}
public abstract class ProductB implements IProduct {
    @Override
    public void sayName() {
        System.out.println("I am productB");
    }
}
</code></pre>

<p>哎呀，貌似ProductA，ProductB没什么变化啊！还是有些变化的，都变为<code>abstract</code>了，也就是说他俩都是半成品，还没给上色呢。怎么能实例化，然后往外销售呢，这不坑人，影响工厂形象啊。当然了，没上色，那也没办法<code>sayColor</code>了，鬼知道将会涂成什么颜色。</p>

<p>好吧，有了半成品，现在进行上色操作。</p>

<pre><code>public class RedProductA extends ProductA {
    @Override
    public void sayColor() {
        System.out.println("my color is Red!");
    }
}
public class BlueProductA extends ProductA {
    @Override
    public void sayColor() {
        System.out.println("my color is Blue!");
    }
}

public class RedProductB extends ProductB {
    @Override
    public void sayColor() {
        System.out.println("my color is Red!");
    }
}
public class BlueProductB extends ProductB {
    @Override
    public void sayColor() {
        System.out.println("my color is Blue!");
    }
}
</code></pre>

<p>到此为止，产品定义完成了。  <br/>
下面就开建工厂了。一个<strong>红色工厂</strong>、一个<strong>蓝色工厂</strong> <br/>
先来个抽象的：</p>

<pre><code>public abstract class AbstractProductFactory {
    public abstract IProduct createProductA();

    public abstract IProduct createProductB();
}
</code></pre>

<p>工厂就是为负责生产两种产品的了。</p>

<pre><code>public class RedProductFactory extends AbstractProductFactory {

    @Override
    public IProduct createProductA() {
        return new RedProductA();
    }

    @Override
    public IProduct createProductB() {
        return new RedProductB();
    }
}

public class BlueProductFactory  extends AbstractProductFactory{
    @Override
    public IProduct createProductA() {
        return new BlueProductA();
    }

    @Override
    public IProduct createProductB() {
        return new BlueProductB();
    }
}
</code></pre>

<p>那么，通过这两种工厂生产出的产品，不论是A,还是B，颜色铁定是一致的啊。
使用场景如下：</p>

<pre><code>    RedProductFactory redProductFactory = new RedProductFactory();
    System.out.println("red factory is producing");
    IProduct product1 = redProductFactory.createProductA();
    product1.sayName();
    product1.sayColor();
    IProduct product2 = redProductFactory.createProductB();
    product2.sayName();
    product2.sayColor();

    BlueProductFactory blueProductFactory = new BlueProductFactory();
    System.out.println("blue factory is producing");
    IProduct product3 = blueProductFactory.createProductA();
    product3.sayName();
    product3.sayColor();
    IProduct product4 = blueProductFactory.createProductB();
    product4.sayName();
    product4.sayColor();
</code></pre>

<p>这样两个工厂分别开工了，一个出的产品都是红色的，一个都是蓝色的。这就是<strong>抽象工厂</strong>了。</p>

<h2>工厂模式 in JDK</h2>

<pre><code>Class.forName(String className);   
</code></pre>

<p>这种应该就是简单工厂的典型了。依据不同的className来生产相应的对象，只不过这里是Class对象了，不要混淆。</p>

<pre><code>javax.xml.parsers.DocumentBuilderFactory#newInstance()
javax.xml.transform.TransformerFactory#newInstance()
javax.xml.xpath.XPathFactory#newInstance()
</code></pre>

<p>这几个为什么就是抽象工厂了呢？不理解。高人指点。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：构建者（builder） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/05/builder-in-java/"/>
    <updated>2012-11-05T20:08:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/05/builder-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：中介者（mediator） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/mediator-in-java/"/>
    <updated>2012-11-02T20:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/mediator-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：访问者（visitor） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/visitor-in-java/"/>
    <updated>2012-11-02T20:12:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/visitor-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：策略（strategy） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/strategy-in-java/"/>
    <updated>2012-11-02T20:11:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/strategy-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：状态（state） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/state-in-java/"/>
    <updated>2012-11-02T20:11:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/state-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：空对象（null object） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/null-object-in-java/"/>
    <updated>2012-11-02T20:10:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/null-object-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式:备忘录（memento） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/memento-in-java/"/>
    <updated>2012-11-02T20:10:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/memento-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：解释器（interpreter） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/interpreter-in-java/"/>
    <updated>2012-11-02T20:09:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/interpreter-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
