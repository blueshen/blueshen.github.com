<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2012-11-10T00:59:52+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式：观察者（Observer） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/observer-in-java/"/>
    <updated>2012-11-08T18:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/observer-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>又叫发布订阅模式（Publish/subscribe），它定义了对象间的一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。</p>

<blockquote><p>这个定义还是比较通俗易懂的。我看了一遍，发现这不就是微博吗？我发布一条微博，那么所有关注我的人，都会收到通知，然后在新鲜事里显示出来。没错，就是这样！</p></blockquote>

<p>观察者模式有4个角色：</p>

<ul>
<li>被观察者(Observable):<br/>
定义被观察者必须实现的职责，动态的增加、删除观察者以及通知观察者</li>
<li>观察者（Observer）: <br/>
接收到消息后，进行更新操作</li>
<li>被观察者(Observable)具体类:<br/>
定义自己的业务逻辑，并定义哪儿些事件需要通知观察者</li>
<li>观察者（Observer）具体类：   <br/>
每个观察者在接收到消息后的更新操作是不同的。</li>
</ul>


<!--more-->


<p>在Java中如何实现观察者模式呢？废话，写代码啊！这个我自然知道，更令人惊喜的是JDK自身就提供了对观察者模式的原生支持，我不得不赞叹Java的强大。</p>

<p>Java提供了这样的两个东西：</p>

<ul>
<li>类<code>java.util.Observable</code>：<br/>
它内部维护了一个Vector容器，用来放所有的观察者，并且提供了添加、删除观察者的方法。此外，定义了notifyObservers方法，用来通知观察者。</li>
<li>接口<code>java.util.Observer</code>：
它定义了一个update方法，让Observer具体类来实现各自的操作。</li>
</ul>


<p>下面，就以微博作为例子吧。<br/>
先来一个被观察者，也就是我自己了。</p>

<pre><code>public class ShenYanChao extends Observable {

    //业务逻辑,不通知
    public String getName(){
        return "shenyanchao";
    }
    //发微博，通知
    public void publishWeibo(String content){
        System.out.println("我发布1条微博，內容是：["+content+"]");
        setChanged();
        notifyObservers(content);
    }
}
</code></pre>

<p>其中，setChanged()用来表明自身的状态变了，否则观察者是不会理的。这个是JDK的限制，其实观察者模式可以不用这个的。</p>

<p>下面就需要定义观察者了，也就是我的粉丝了。</p>

<pre><code>public class Fans implements Observer {

    @Override
    public void update(Observable o, Object content) {
        String who = ((ShenYanChao) o).getName();
        System.out.println("新鲜事:{" + who + "发布了一条微博，内容是：[" + content + "]}");
    }

}
</code></pre>

<p>观察者Fans一旦发现我发了1条微博，那么他就会出现一条新鲜事的了。update()的参数，第1个是被观察者，也就是我；第2个就是notifyObservers传过来的参数了，此处是微博内容。</p>

<p>具体场景是这样的：</p>

<pre><code>ShenYanChao shenyanchao = new ShenYanChao();
final int FANS_NUM = 10;//我的粉丝可不止这些呢
for (int i = 0; i &lt; FANS_NUM; i++) {
    shenyanchao.addObserver(new Fans());
}
shenyanchao.publishWeibo("欢迎登录：www.shenyanchao.cn");
</code></pre>

<p>此处模拟，我有10个粉丝，然后我发了1条微博。结果如下：</p>

<pre><code>我发布1条微博，內容是：[欢迎登录：www.shenyanchao.cn]
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
新鲜事:{shenyanchao发布了一条微博，内容是：[欢迎登录：www.shenyanchao.cn]}
</code></pre>

<p>可见，一旦我发了微博，所有的观察者（Fans）都收到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：迭代器（Iterator） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/iterator-in-java/"/>
    <updated>2012-11-08T16:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/iterator-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>迭代器模式提供了一种方法来访问一个容器对象种的各个元素，而又不暴露这个对象的内部细节。</p>

<blockquote><p>在Java中已经默认提供了Iterator支持，各种容器类都进行了实现，而事实上，迭代器模式就是为了解决如何遍历这些容器里的元素而诞生的。</p></blockquote>

<p><strong>迭代器模式</strong>主要有以下的角色：</p>

<ul>
<li>Iterator抽象迭代器： <br/>
负责定义访问与遍历元素的接口。基本有3个固定的方法<code>hasNext()</code>,<code>next()</code>,<code>remove()</code>;</li>
<li>Concrete Iterator具体迭代器：  <br/>
迭代器的实现类，实现接口，完成元素遍历。</li>
<li>Aggregate抽象容器： <br/>
定义创建具体迭代器的接口。在Java种一般是<code>iterator()</code>方法。</li>
<li>Concrete Aggregate具体容器：<br/>
实现创建迭代器接口，返回迭代器实例对象。</li>
</ul>


<!--more-->


<p>为了方便，下面就直接以ArrayList为例，来看看迭代器是如何实现的吧。<br/>
在使用时，通常这样对ArrayList进行遍历：</p>

<pre><code>    List&lt;String&gt; list = new ArrayList&lt;String&gt;();
    list.add("first");
    list.add("second");
    Iterator&lt;String&gt; itr = list.iterator();
    while (itr.hasNext()) {
        String element = itr.next();
        System.out.println(element);
    }
</code></pre>

<p>从这里，我们可以看出来，这就是完全的迭代器模式。<br/>
首先来看，Iterator接口（java.util.Iterator）：</p>

<pre><code>public interface Iterator&lt;E&gt; {

    boolean hasNext();

    E next();

    void remove();
}
</code></pre>

<p>然后是Iterator的具体实现类(java.util.AbstractList<E>$Itr)：</p>

<pre><code>private class Itr implements Iterator&lt;E&gt; {

    int cursor = 0;

    int lastRet = -1;

    int expectedModCount = modCount;

    public boolean hasNext() {
        return cursor != size();
    }

    public E next() {
        checkForComodification();
        try {
        E next = get(cursor);
        lastRet = cursor++;
        return next;
        } catch (IndexOutOfBoundsException e) {
            checkForComodification();
            throw new NoSuchElementException();
        }
    }

    public void remove() {
        if (lastRet == -1)
        throw new IllegalStateException();
            checkForComodification();

        try {
            AbstractList.this.remove(lastRet);
        if (lastRet &lt; cursor)
            cursor--;
        lastRet = -1;
        expectedModCount = modCount;
        } catch (IndexOutOfBoundsException e) {
            throw new ConcurrentModificationException();
        }
    }

    final void checkForComodification() {
        if (modCount != expectedModCount)
            throw new ConcurrentModificationException();
    }
}
</code></pre>

<p>这个就是具体的Iterator了，当然还有另外一个ListItr extends Itr，这个是专门针对List进行操作的。 <br/>
那么Aggregate接口对应的是哪个呢？就是<code>java.util.AbstractCollection&lt;E&gt;</code> ，它里面定义了这样的一个接口：</p>

<pre><code>...
/**
 * Returns an iterator over the elements contained in this collection.
 *
 * @return an iterator over the elements contained in this collection
 */
public abstract Iterator&lt;E&gt; iterator();
...
</code></pre>

<p>那么具体实现是在哪儿？<code>java.util.AbstractList&lt;E&gt;</code>做了实现。</p>

<pre><code>    public Iterator&lt;E&gt; iterator() {
        return new Itr();
    }
</code></pre>

<p>返回了一个具体的迭代器实例。而ArrayList,LinkedList都是继承AbstractList的，因此自动具有了返回迭代器实例的功能。</p>

<p>因此，Java种的容器类只负责元素的的维护就好了。访问就教给迭代器吧，Java做的如此完善，以至于我们都不必再自己写Iterator了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：命令（Command） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/08/command-in-java/"/>
    <updated>2012-11-08T15:09:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/08/command-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>命令模式是一种高内聚的模式。它将一个请求封装成一个对象，从而让使用不同请求来把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销与恢复功能。 <br/>
听起来，好复杂！</p>

<p>在程序员之间，流传着这样一句话：程序写到最后，就是if-else,for,while。<br/>
真是枯燥啊！其实能体会到这种感觉，说明作为一个程序员，你已经有了一定的造诣了。那如何提高呢？</p>

<p>试想，在代码中，你有很多if-else或者case语句。为什么有这样的语句呢？因为判断条件多啊，需要根据不同的条件来做不同的事情。2、3个条件还可以写，如果有20个条件呢，或者N多呢。那么我们的if-else那就判断N重条件，这简直是无法忍受的，写出的代码可维护性更不用说了。</p>

<!--more-->


<p> <br/>
<strong>命令模式</strong>就是可以解决这种问题的方法之一。下面就来提高一下程序员的自我修养了。</p>

<p>命令模式中，主要有3个角色：</p>

<ul>
<li>Receiver命令接收者</li>
<li>Command命令</li>
<li>Invoker命令调用者</li>
</ul>


<p>下面开始分别定义： <br/>
<strong>Receiver:</strong>定义命令的N种接收者</p>

<pre><code>public abstract class AbstractReceiver {
    public abstract void doSomething();
}

public class Receiver1 extends AbstractReceiver {
    @Override
    public void doSomething() {
        System.out.println("receiver1 do something");
    }
}
public class Receiver2 extends AbstractReceiver {
    @Override
    public void doSomething() {
        System.out.println("receiver2 do something");
    }
}
...
public class ReceiverN
...
</code></pre>

<p><strong>Command:</strong>定义N种命令</p>

<pre><code>public abstract class AbstractCommand {
    public abstract void execute();
}

public class Command1 extends AbstractCommand {
    private AbstractReceiver receiver;
    public Command1(AbstractReceiver receiver) {
        this.receiver = receiver;
    }
    @Override
    public void execute() {
        System.out.println("command1 命令发出");
        receiver.doSomething();
    }
}
public class Command2 extends AbstractCommand {
    private AbstractReceiver receiver;
    public Command2(AbstractReceiver receiver) {
        this.receiver = receiver;
    }
    @Override
    public void execute() {
        System.out.println("command2 命令发出");
        receiver.doSomething();
    }
}
...
public class CommandN
....
</code></pre>

<p><strong>Invoker:</strong>定义调用者</p>

<pre><code>public class Invoker {

    private List&lt;AbstractCommand&gt; commandList = new LinkedList&lt;AbstractCommand&gt;();

    public void addCommand(AbstractCommand command) {
        commandList.add(command);
    }

    public void addCommands(LinkedList&lt;AbstractCommand&gt; commands) {
        commandList.addAll(commands);
    }

    public void action() {
        for (AbstractCommand command : commandList) {
            command.execute();
        }
    }

}
</code></pre>

<p>使用场景：</p>

<pre><code>Invoker invoker = new Invoker();
AbstractReceiver receiver1 = new Receiver1();
AbstractReceiver receiver2 = new Receiver2();
AbstractCommand command1 = new Command1(receiver2);
AbstractCommand command2 = new Command2(receiver1);
invoker.addCommand(command1);
invoker.addCommand(command2);
invoker.action();
</code></pre>

<p>运行结果：</p>

<pre><code>command1 命令发出
receiver2 do something
command2 命令发出
receiver1 do something
</code></pre>

<p>现在再回过来看命令模式的定义，就比较明白了吧。也就是说有N种请求条件，那么就定义N个类来封装请求，我们称之为命令（Command）。每个命令做什么操作呢，谁来执行这个命令呢，有命令自己来进行定义。这样就避免了if-else，而由N种命令来决定跳转关系。</p>

<p>调用者（Invoker）呢，它维护了一个命令列表，并按照一定的顺序来发起命令调用。当然这个列表也有可能就只有一个命令了，就简化了一下。与if-else对比更直观的了。</p>

<p>定义中还提到了命令撤销或恢复的功能，这种撤销与恢复也是命令的一种了，一般可以通过扩展一个命令出来，通过诸如日志等来恢复之前的操作。其实这个也是可以通过备忘录模式来实现的。</p>

<h2>命令模式 in JDK</h2>

<pre><code>java.lang.Runnable#run()
javax.swing.Action#actionPeformed(ActionEvent e)
</code></pre>

<p>从Runnable来说，不同的实现者，通过调用run()来实现在不同线程执行不同的操作。
从Action来说，由于桌面UI有很多的操作事件，这些事件就是命令。通过actionPerformed函数，接受不同的命令参数来做出不同的表现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：原型（prototype） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/07/prototype-in-java/"/>
    <updated>2012-11-07T20:41:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/07/prototype-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。<br/>
基本上，可以就是一个clone方法，通过这个方法进行对象的拷贝。</p>

<p>Java中的原型模式：</p>

<pre><code>public class ProtoTypeClass implements Cloneable {

    @Override
    public ProtoTypeClass clone(){
        ProtoTypeClass cloneObject = null;
        try{
            cloneObject = (ProtoTypeClass) super.clone();
        }catch (Exception e) {
            // TODO: handle exception
        }
        return cloneObject;
    }
}
</code></pre>

<p>上面就是实现了原型模式。不过Java在提供了Cloneable这一接口方便实现原型模式的同时，也带来了一些不容易注意到的问题。</p>

<ul>
<li>clone时，构造函数不会执行</li>
<li>浅拷贝与深拷贝</li>
</ul>


<p>这两个问题是需要时刻注意的。由于本文主要不是讲Cloneable,所以另辟专题吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：门面（Facade） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/07/facade-in-java/"/>
    <updated>2012-11-07T20:00:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/07/facade-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。 <br/>
就是说，Facade提供了一个统一的接口，掩盖下层系统的复杂性，用户用起来更加的方便。</p>

<p>以医院的例子，做个比喻：</p>

<!--more-->


<p></p>

<p>在无接待员的时候，病人要做业务，好复杂啊，好累！</p>

<p><img src="http://www.shenyanchao.cn/images/blog/facade-hospital1.png" alt="无接待员" /></p>

<p>有了接待员，各种就医流程好流畅的说。因为有接待员与各个部门打交道。</p>

<p><img src="http://www.shenyanchao.cn/images/blog/facade-hospital2.png" alt="有接待员" /></p>

<p>这个例子很好的说出了facade的作用。甚至都不需要代码来表达了。</p>

<p>门面模式的优点：</p>

<p>　　●松散耦合</p>

<p>　　门面模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。</p>

<p>　　●简单易用</p>

<p>　　门面模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟门面类交互就可以了。</p>

<p>　　●更好的划分访问层次</p>

<p>　　通过合理使用Facade，可以帮助我们更好地划分访问的层次。有些方法是对系统外的，有些方法是系统内部使用的。把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节</p>

<h2>门面模式 in JDK</h2>

<p>这个具体的例子，我首先想到的就是<a href="http://www.slf4j.org/">slf4j</a>这个日志框架。通过名字Simple Logging Facade for Java (SLF4J)就知道是采用的Facade模式了。下面是其官方的介绍： <br/>
The Simple Logging Facade for Java or (SLF4J) serves as a simple facade or abstraction for various logging frameworks, e.g. java.util.logging, log4j and logback, allowing the end user to plug in the desired logging framework at deployment time. <br/>
也就是说，他屏蔽了各种日志框架的差异，提供了一个统一的日志接口给用户使用。不得不说，<a href="http://www.slf4j.org/">slf4j</a>很好用，推荐！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：模板方法（template method） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/07/template-method-in-java/"/>
    <updated>2012-11-07T19:30:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/07/template-method-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义这个算法的某些特定步骤。 <br/>
简单的说，就是你首先定义一下算法的各部分之间的执行顺序或者调用关系，然后在子类中实现具体每一部分是如何实现的。</p>

<p>采用什么算法作为例子呢？就是用<strong>把动物放进冰箱</strong>这个算法吧。</p>

<!--more-->


<p>先定义一个抽象类:</p>

<pre><code>public abstract class AbstractAlgorithm {

    public abstract void openFridgeDoor();

    public abstract void putAnimalInFridge();

    public abstract void closeFridgeDoor();

    public void execute(){
        this.openFridgeDoor();
        this.putAnimalInFridge();
        this.closeFridgeDoor();
    }
}
</code></pre>

<p>这个类，定义了3个操作，打开冰箱门、把动物放进冰箱、关闭冰箱门，但并未实现，而留给子类来具体实现。<code>execute()</code>用来执行这一算法，它指定了各个操作之间的先后顺序。</p>

<p>比如：我想把大象放进冰箱里：</p>

<pre><code>public class PutElephantInFridge extends AbstractAlgorithm {

    @Override
    public void openFridgeDoor() {
        System.out.println("open the fridge door lightly");
    }

    @Override
    public void putAnimalInFridge() {
        System.out
            .println("try my best to put elephant in fridge,after 2 hours, I got it.");
    }

    @Override
    public void closeFridgeDoor() {
        System.out.println("close the fridge door...");
    }

}
</code></pre>

<p>具体使用：</p>

<pre><code>PutElephantInFridge algo = new PutElephantInFridge();
algo.execute();
</code></pre>

<p>好吧，执行一下算法就完成了。
下面吗？我想把猴子放进冰箱，好吧，新建一个类继承AbstractAlgorithm，然后重写相关步骤就可以了。</p>

<h2>模板方法 In JDK</h2>

<pre><code>java.io.InputStream, java.io.OutputStream, java.io.Reader，java.io.Writer      

java.util.AbstractList, java.util.AbstractSet and java.util.AbstractMap
</code></pre>

<p>所有非抽象方法。</p>

<pre><code>javax.servlet.http.HttpServlet#doXXX()   
</code></pre>

<p>都默认返回一个<code>SC_METHOD_NOT_ALLOWED</code>类似的错误码，或者代码，要想使用，只有继承并且重写这些方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式:工厂（factory） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/07/factory-in-java/"/>
    <updated>2012-11-07T17:43:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/07/factory-in-java</id>
    <content type="html"><![CDATA[<p>工厂模式，直接按名字来说，就是负责专门生产产品的。 <br/>
大致分为3类：</p>

<ul>
<li>工厂方法</li>
<li>简单工厂</li>
<li>抽象工厂</li>
</ul>


<p>同时，也有人认为简单工厂只是工厂方法的一种特列，那么就分为两种了。本文就按3种分别进行介绍了。</p>

<h3>工厂方法</h3>

<p><strong>定义：</strong>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法让一个类的实例化延迟到其子类。</p>

<!--more-->


<p>简单的说，就是有一个抽象类定义了一个方法，而实现类来决定到底初始化那个实例。这些实例，就是一个个产品了。 <br/>
产品接口（主要是考虑面向接口变成吧，个人感觉不要也行，对理解模式没有影响）：</p>

<pre><code>public interface IProduct {
    public void sayName();
}
</code></pre>

<p>下面呢，假设有两种产品：</p>

<pre><code>public class ProductA implements IProduct {
    @Override
    public void sayName() {
        // TODO Auto-generated method stub
        System.out.println("I am ProductA");
    }
}
public class ProductB implements IProduct {
    @Override
    public void sayName() {
        System.out.println("I am productB");
    }
}
</code></pre>

<p>有了产品定义，那么下面就要建一个工厂了，怎么建呢？依据定义来说，首先要定义一个接口了：</p>

<pre><code>public abstract class AbstractProductFactory {
    public abstract &lt;T extends IProduct&gt; T createProduct(
        Class&lt;T&gt; productType);
}
</code></pre>

<p>下面就是一个子类了，也就是具体负责初始化实例的工厂了。</p>

<pre><code>public class ProductFactory extends AbstractProductFactory {

    @Override
    public &lt;T extends IProduct&gt; T createProduct(Class&lt;T&gt; productType) {
        // TODO Auto-generated method stub
        IProduct product = null;
        try {
            product = productType.newInstance();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
        return (T) product;
    }
}
</code></pre>

<p>如何生成不同的产品呢，本例是根据传入的不同的类，来返回不同的实例的。当然了也可以用一个标识符了,如果传入的是“A”那么返回一个ProductA。诸如此类，这就是工厂方法了。<br/>
具体使用时，是这样的：</p>

<pre><code>ProductFactory productFactory = new ProductFactory();
IProduct productA = productFactory.createProduct(ProductA.class);
IProduct productB = productFactory.createProduct(ProductB.class);
productA.sayName();
productB.sayName();
</code></pre>

<h2>简单工厂</h2>

<p>简单工厂，可以说是工厂方法的一种扩展。上例中，发现在使用<code>ProductFactory</code>的时候，还需要先实例化一个。怎么那么麻烦呢？就像在实际生活中，我想要某个产品，我还需要先建一个工厂是一个道理的。</p>

<p>还好，Java提供了这样一个关键字<code>static</code>,简单工厂类就变成这个样子了。</p>

<pre><code>public class SimpleProductFactory {

    public static &lt;T extends IProduct&gt; T createProduct(Class&lt;T&gt; productType) {
        // TODO Auto-generated method stub
        IProduct product = null;
        try {
            product = productType.newInstance();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
        return (T) product;
    }
}
</code></pre>

<p>这样在使用的时间是方便了不少呢？</p>

<pre><code>IProduct productA = SimpleProductFactory.createProduct(ProductA.class);
IProduct productB = SimpleProductFactory.createProduct(ProductB.class);
productA.sayName();
productB.sayName();
</code></pre>

<h2>抽象工厂</h2>

<p>情况进一步发展，大家对美的追求不断提高。工厂也是需要对自己的产品不断升级的。那就对现有的产品ProductA，ProductB进行升级，各自推出红，蓝两种颜色的产品。那么，我就需要两个工厂了，一个工厂来生产红色产品，一个工厂来生产蓝色产品。 <br/>
下面，先对产品进行改造：</p>

<pre><code>public interface IProduct {
    public void sayName();
    public void sayColor();
}
public abstract class ProductA implements IProduct {
    @Override
    public void sayName() {
        // TODO Auto-generated method stub
        System.out.println("I am ProductA");
    }
}
public abstract class ProductB implements IProduct {
    @Override
    public void sayName() {
        System.out.println("I am productB");
    }
}
</code></pre>

<p>哎呀，貌似ProductA，ProductB没什么变化啊！还是有些变化的，都变为<code>abstract</code>了，也就是说他俩都是半成品，还没给上色呢。怎么能实例化，然后往外销售呢，这不坑人，影响工厂形象啊。当然了，没上色，那也没办法<code>sayColor</code>了，鬼知道将会涂成什么颜色。</p>

<p>好吧，有了半成品，现在进行上色操作。</p>

<pre><code>public class RedProductA extends ProductA {
    @Override
    public void sayColor() {
        System.out.println("my color is Red!");
    }
}
public class BlueProductA extends ProductA {
    @Override
    public void sayColor() {
        System.out.println("my color is Blue!");
    }
}

public class RedProductB extends ProductB {
    @Override
    public void sayColor() {
        System.out.println("my color is Red!");
    }
}
public class BlueProductB extends ProductB {
    @Override
    public void sayColor() {
        System.out.println("my color is Blue!");
    }
}
</code></pre>

<p>到此为止，产品定义完成了。  <br/>
下面就开建工厂了。一个<strong>红色工厂</strong>、一个<strong>蓝色工厂</strong> <br/>
先来个抽象的：</p>

<pre><code>public abstract class AbstractProductFactory {
    public abstract IProduct createProductA();

    public abstract IProduct createProductB();
}
</code></pre>

<p>工厂就是为负责生产两种产品的了。</p>

<pre><code>public class RedProductFactory extends AbstractProductFactory {

    @Override
    public IProduct createProductA() {
        return new RedProductA();
    }

    @Override
    public IProduct createProductB() {
        return new RedProductB();
    }
}

public class BlueProductFactory  extends AbstractProductFactory{
    @Override
    public IProduct createProductA() {
        return new BlueProductA();
    }

    @Override
    public IProduct createProductB() {
        return new BlueProductB();
    }
}
</code></pre>

<p>那么，通过这两种工厂生产出的产品，不论是A,还是B，颜色铁定是一致的啊。
使用场景如下：</p>

<pre><code>    RedProductFactory redProductFactory = new RedProductFactory();
    System.out.println("red factory is producing");
    IProduct product1 = redProductFactory.createProductA();
    product1.sayName();
    product1.sayColor();
    IProduct product2 = redProductFactory.createProductB();
    product2.sayName();
    product2.sayColor();

    BlueProductFactory blueProductFactory = new BlueProductFactory();
    System.out.println("blue factory is producing");
    IProduct product3 = blueProductFactory.createProductA();
    product3.sayName();
    product3.sayColor();
    IProduct product4 = blueProductFactory.createProductB();
    product4.sayName();
    product4.sayColor();
</code></pre>

<p>这样两个工厂分别开工了，一个出的产品都是红色的，一个都是蓝色的。这就是<strong>抽象工厂</strong>了。</p>

<h2>工厂模式 in JDK</h2>

<pre><code>Class.forName(String className);   
</code></pre>

<p>这种应该就是简单工厂的典型了。依据不同的className来生产相应的对象，只不过这里是Class对象了，不要混淆。</p>

<pre><code>javax.xml.parsers.DocumentBuilderFactory#newInstance()
javax.xml.transform.TransformerFactory#newInstance()
javax.xml.xpath.XPathFactory#newInstance()
</code></pre>

<p>这几个为什么就是抽象工厂了呢？不理解。高人指点。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：构建者（builder） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/05/builder-in-java/"/>
    <updated>2012-11-05T20:08:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/05/builder-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：中介者（mediator） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/mediator-in-java/"/>
    <updated>2012-11-02T20:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/mediator-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：访问者（visitor） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/visitor-in-java/"/>
    <updated>2012-11-02T20:12:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/visitor-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：策略（strategy） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/strategy-in-java/"/>
    <updated>2012-11-02T20:11:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/strategy-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：状态（state） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/state-in-java/"/>
    <updated>2012-11-02T20:11:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/state-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：空对象（null object） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/null-object-in-java/"/>
    <updated>2012-11-02T20:10:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/null-object-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式:备忘录（memento） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/memento-in-java/"/>
    <updated>2012-11-02T20:10:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/memento-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：解释器（interpreter） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/interpreter-in-java/"/>
    <updated>2012-11-02T20:09:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/interpreter-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：责任链（chain of responsibility） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/chain-of-responsibility-in-java/"/>
    <updated>2012-11-02T20:09:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/chain-of-responsibility-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：享元（flyweight） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/flyweight-in-java/"/>
    <updated>2012-11-02T20:07:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/flyweight-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：组合（composite） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/composite-in-java/"/>
    <updated>2012-11-02T20:07:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/composite-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：桥接(bridge) in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/bridge-in-java/"/>
    <updated>2012-11-02T20:06:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/bridge-in-java</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式：单例（singleton） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/singleton-in-java/"/>
    <updated>2012-11-02T18:47:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/singleton-in-java</id>
    <content type="html"><![CDATA[<h3>概要</h3>

<p>单例模式是最简单的设计模式之一，但是对于Java的开发者来说，它却有很多缺陷。在本月的专栏中，David Geary探讨了单例模式以及在面对多线程（multithreading)、类装载器（classloaders）和序列化(serialization)时如何处理这些缺陷。</p>

<p>单例模式适合于一个类只有一个实例的情况，比如窗口管理器，打印缓冲池和文件系统，它们都是原型的例子。典型的情况是，那些对象的类型被遍及一个软件系统的不同对象访问，因此需要一个全局的访问指针，这便是众所周知的单例模式的应用。当然这只有在你确信你不再需要任何多于一个的实例的情况下。</p>

<!--more-->


<p> <br/>
单例模式的用意在于前一段中所关心的。通过单例模式你可以：</p>

<ul>
<li>确保一个类只有一个实例被建立</li>
<li>提供了一个对对象的全局访问指针</li>
<li>在不影响单例类的客户端的情况下允许将来有多个实例</li>
</ul>


<p>尽管单例设计模式如在下面的图中的所显示的一样是最简单的设计模式，但对于粗心的Java开发者来说却呈现出许多缺陷。这篇文章讨论了单例模式并揭示了那些缺陷。</p>

<h3>单例模式</h3>

<p>在《设计模式》一书中，作者这样来叙述单例模式的：确保一个类只有一个实例并提供一个对它的全局访问指针。
下图说明了单例模式的类图。  <br/>
<img src="http://www.shenyanchao.cn/images/blog/singleton.jpg" alt="" /></p>

<p>正如你在上图中所看到的，这不是单例模式的完整部分。此图中单例类保持了一个对唯一的单例实例的静态引用，并且会从静态getInstance()方法中返回对那个实例的引用。 <br/>
例1显示了一个经典的单例模式的实现。 <br/>
例1.经典的单例模式</p>

<pre><code>public class ClassicSingleton {   
    private static ClassicSingleton instance = null;   

    protected ClassicSingleton() {   
        // Exists only to defeat instantiation.   
    }   
    public static ClassicSingleton getInstance() {   
        if(instance == null) {   
            instance = new ClassicSingleton();   
        }   
        return instance;   
    }   
}   
</code></pre>

<p>在例1中的单例模式的实现很容易理解。ClassicSingleton类保持了一个对单独的单例实例的静态引用，并且从静态方法getInstance()中返回那个引用。 <br/>
关于ClassicSingleton类，有几个让我们感兴趣的地方。 <br/>
首先，ClassicSingleton使用了一个众所周知的懒汉式实例化去创建那个单例类的引用;结果，这个单例类的实例直到getInstance()方法被第一次调用时才被创建。这种技巧可以确保单例类的实例只有在需要时才被建立出来。其次，注意ClassicSingleton实现了一个protected的构造方法，这样客户端不能直接实例化一个ClassicSingleton类的实例。然而，你会惊奇的发现下面的代码完全合法：</p>

<pre><code>public class SingletonInstantiator {    
    public SingletonInstantiator() {    
        ClassicSingleton instance = ClassicSingleton.getInstance();   
        ClassicSingleton anotherInstance =  new ClassicSingleton();   
        ...    
        }    
}   
</code></pre>

<p>前面这个代码片段为何能在没有继承ClassicSingleton并且ClassicSingleton类的构造方法是protected的情况下创建其实例？ <br/>
答案是protected的构造方法可以被其子类以及在同一个包中的其它类调用。因为ClassicSingleton和SingletonInstantiator位于相同的包（缺省的包），所以SingletonInstantiator方法能创建ClasicSingleton的实例。<br/>
这种情况下有两种解决方案：一是你可以使ClassicSingleton的构造方法变化私有的（private）这样只有ClassicSingleton的方法能调用它;然而这也意味着ClassicSingleton不能有子类。有时这是一种很合意的解决方法，如果确实如此，那声明你的单例类为final是一个好主意，这样意图明确，并且让编译器去使用一些性能优化选项。另一种解决方法是把你的单例类放到一个外在的包中，以便在其它包中的类（包括缺省的包）无法实例化一个单例类。</p>

<p>关于ClassicSingleton的第三点感兴趣的地方是，如果单例由不同的类装载器装入，那便有可能存在多个单例类的实例。假定不是远端存取，例如一些servlet容器对每个servlet使用完全不同的类装载器，这样的话如果有两个servlet访问一个单例类，它们就都会有各自的实例。 <br/>
第四点，如果ClasicSingleton实现了java.io.Serializable接口，那么这个类的实例就可能被序列化和复原。不管怎样，如果你序列化一个单例类的对象，接下来复原多个那个对象，那你就会有多个单例类的实例。 <br/>
最后也许是最重要的一点，就是例1中的ClassicSingleton类不是线程安全的。如果两个线程，我们称它们为线程1和线程2，在同一时间调用ClassicSingleton.getInstance()方法，如果线程1先进入if块，然后线程2进行控制，那么就会有ClassicSingleton的两个的实例被创建。</p>

<p>正如你从前面的讨论中所看到的，尽管单例模式是最简单的设计模式之一，在Java中实现它也是决非想象的那么简单。这篇文章接下来会揭示Java规范对单例模式进行的考虑，但是首先让我们近水楼台的看看你如何才能测试你的单例类。</p>

<p><strong>测试单例模式</strong></p>

<p>接下来，我使用与log4j相对应的JUnit来测试单例类，它会贯穿在这篇文章余下的部分。如果你对JUnit或log4j不很熟悉，请参考相关资源。</p>

<p>例2是一个用JUnit测试例1的单例模式的案例：<br/>
例2.一个单例模式的案例</p>

<pre><code>import org.apache.log4j.Logger;   
import junit.framework.Assert;   
import junit.framework.TestCase;   

public class SingletonTest extends TestCase {   
    private ClassicSingleton sone = null, stwo = null;   
    private static Logger logger = Logger.getRootLogger();   

     public SingletonTest(String name) {   
        super(name);   
    }   
    public void setUp() {   
        logger.info("getting singleton...");   
        sone = ClassicSingleton.getInstance();   
        logger.info("...got singleton: " + sone);   

        logger.info("getting singleton...");   
        stwo = ClassicSingleton.getInstance();   
        logger.info("...got singleton: " + stwo);   
     }   
    public void testUnique() {   
        logger.info("checking singletons for equality");   
         Assert.assertEquals(true, sone == stwo);   
    }   
}   
</code></pre>

<p>例2两次调用ClassicSingleton.getInstance()，并且把返回的引用存储在成员变量中。方法testUnique()会检查这些引用看它们是否相同。例3是这个测试案例的输出：  <br/>
例3.是这个测试案例的输出<br/>
Buildfile: build.xml</p>

<p>init:</p>

<pre><code> [echo] Build 20030414 (14-04-2003 03:08)   
</code></pre>

<p>compile:</p>

<p>run-test-text:</p>

<pre><code> [java] .INFO main: [b]getting singleton...[/b]   
 [java] INFO main: [b]created singleton:[/b] Singleton@e86f41   
 [java] INFO main: ...got singleton: Singleton@e86f41   
 [java] INFO main: [b]getting singleton...[/b]   
 [java] INFO main: ...got singleton: Singleton@e86f41   
 [java] INFO main: checking singletons for equality   

 [java] Time: 0.032   

 [java] OK (1 test)  
</code></pre>

<p>正如前面的清单所示，例2的简单测试顺利通过&#8212;-通过ClassicSingleton.getInstance()获得的两个单例类的引用确实相同;然而，你要知道这些引用是在单线程中得到的。下面的部分着重于用多线程测试单例类。</p>

<p>多线程因素的考虑</p>

<p>在例1中的ClassicSingleton.getInstance()方法由于下面的代码而不是线程安全的：</p>

<pre><code>if(instance == null) {   
    instance = new Singleton();   
 }   
</code></pre>

<p>如果一个线程在第二行的赋值语句发生之前切换，那么成员变量instance仍然是null，然后另一个线程可能接下来进入到if块中。在这种情况下，两个不同的单例类实例就被创建。不幸的是这种假定很少发生，这样这种假定也很难在测试期间出现（译注：在这可能是作者对很少出现这种情况而导致无法测试从而使人们放松警惕而感到叹惜）。为了演示这个线程轮换，我得重新实现例1中的那个类。例4就是修订后的单例类： <br/>
例4.人为安排的方式</p>

<pre><code>import org.apache.log4j.Logger;       
public class Singleton {   
    private static Singleton singleton = null;   
    private static Logger logger = Logger.getRootLogger();   
    private static boolean firstThread = true;   

    protected Singleton() {   
     // Exists only to defeat instantiation.   
    }   
    public static Singleton getInstance() {   
        if(singleton == null) {   
            simulateRandomActivity();   
            singleton = new Singleton();   
    }   
    logger.info("created singleton: " + singleton);   
    return singleton;   
}   
private static void simulateRandomActivity() {   
    try {   
        if(firstThread) {   
            firstThread = false;   
            logger.info("sleeping...");   

            // This nap should give the second thread enough time   
            // to get by the first thread.   
            Thread.currentThread().sleep(50);   
        }   
        }   
        catch(InterruptedException ex) {   
            logger.warn("Sleep interrupted");   
        }   
    }   
}   
</code></pre>

<p>除了在这个清单中的单例类强制使用了一个多线程错误处理，例4类似于例1中的单例类。在getInstance()方法第一次被调用时，调用这个方法的线程会休眠50毫秒以便另外的线程也有时间调用getInstance()并创建一个新的单例类实例。当休眠的线程觉醒时，它也会创建一个新的单例类实例，这样我们就有两个单例类实例。尽管例4是人为如此的，但它却模拟了第一个线程调用了getInstance()并在没有完成时被切换的真实情形。 <br/>
例5测试了例4的单例类： <br/>
例5.失败的测试</p>

<pre><code>import org.apache.log4j.Logger;   
import junit.framework.Assert;   
import junit.framework.TestCase;   

public class SingletonTest extends TestCase {   
    private static Logger logger = Logger.getRootLogger();   
    private static Singleton singleton = null;   

public SingletonTest(String name) {   
    super(name);   
}   
public void setUp() {   
    singleton = null;   
}   
public void testUnique() throws InterruptedException {   
  // Both threads call Singleton.getInstance().   
  Thread threadOne = new Thread(new SingletonTestRunnable()),   
         threadTwo = new Thread(new SingletonTestRunnable());   

  threadOne.start();   
  threadTwo.start();   

  threadOne.join();   
  threadTwo.join();   
}   
private static class SingletonTestRunnable implements Runnable {   
  public void run() {   
     // Get a reference to the singleton.   
     Singleton s = Singleton.getInstance();   

     // Protect singleton member variable from   
     // multithreaded access.   
     synchronized(SingletonTest.class) {   
        if(singleton == null) // If local reference is null...   
           singleton = s;     // ...set it to the singleton   
        }   
     // Local reference must be equal to the one and   
     // only instance of Singleton; otherwise, we have two   
              // Singleton instances.   
     Assert.assertEquals(true, s == singleton);   
    }   
    }   
}   
</code></pre>

<p>例5的测试案例创建两个线程，然后各自启动，等待完成。这个案例保持了一个对单例类的静态引用，每个线程都会调用Singleton.getInstance()。如果这个静态成员变量没有被设置，那么第一个线程就会将它设为通过调用getInstance()而得到的引用，然后这个静态变量会与一个局部变量比较是否相等。      <br/>
在这个测试案例运行时会发生一系列的事情：第一个线程调用getInstance()，进入if块，然后休眠;接着，第二个线程也调用getInstance()并且创建了一个单例类的实例。第二个线程会设置这个静态成员变量为它所创建的引用。第二个线程检查这个静态成员变量与一个局部备份的相等性。然后测试通过。当第一个线程觉醒时，它也会创建一个单例类的实例，并且它不会设置那个静态成员变量（因为第二个线程已经设置过了），所以那个静态变量与那个局部变量脱离同步，相等性测试即告失败。例6列出了例5的输出：      <br/>
例6.例5的输出</p>

<pre><code>Buildfile: build.xml   
init:   
    [echo] Build 20030414 (14-04-2003 03:06)   
compile:   
run-test-text:   
INFO Thread-1: sleeping...   
INFO Thread-2: created singleton: Singleton@7e5cbd   
INFO Thread-1: created singleton: Singleton@704ebb   
junit.framework.AssertionFailedError: expected: but was:   
    at junit.framework.Assert.fail(Assert.java:47)   
    at junit.framework.Assert.failNotEquals(Assert.java:282)   
    at junit.framework.Assert.assertEquals(Assert.java:64)   
    at junit.framework.Assert.assertEquals(Assert.java:149)   
    at junit.framework.Assert.assertEquals(Assert.java:155)   
    at SingletonTest$SingletonTestRunnable.run(Unknown Source)   
    at java.lang.Thread.run(Thread.java:554)   
    [java] .   
    [java] Time: 0.577   

    [java] OK (1 test)   
</code></pre>

<p>到现在为止我们已经知道例4不是线程安全的，那就让我们看看如何修正它。</p>

<p><strong>同步</strong></p>

<p>要使例4的单例类为线程安全的很容易&#8212;-只要像下面一个同步化getInstance()方法：</p>

<pre><code>public synchronized static Singleton getInstance() {   
    if(singleton == null) {   
        simulateRandomActivity();   
        singleton = new Singleton();   
    }   
    logger.info("created singleton: " + singleton);   
    return singleton;   
}   
</code></pre>

<p>在同步化getInstance()方法后，我们就可以得到例5的测试案例返回的下面的结果：</p>

<pre><code>Buildfile: build.xml   

init:   
    [echo] Build 20030414 (14-04-2003 03:15)   

compile:   
    [javac] Compiling 2 source files   

run-test-text:   
INFO Thread-1: sleeping...   
INFO Thread-1: created singleton: Singleton@ef577d   
INFO Thread-2: created singleton: Singleton@ef577d   
    [java] .   
    [java] Time: 0.513   

    [java] OK (1 test)   
</code></pre>

<p>这此，这个测试案例工作正常，并且多线程的烦恼也被解决;然而，机敏的读者可能会认识到getInstance()方法只需要在第一次被调用时同步。因为同步的性能开销很昂贵（同步方法比非同步方法能降低到100次左右），或许我们可以引入一种性能改进方法，它只同步单例类的getInstance()方法中的赋值语句。</p>

<p><strong>一种性能改进的方法</strong></p>

<p>寻找一种性能改进方法时，你可能会选择像下面这样重写getInstance()方法：</p>

<pre><code>public static Singleton getInstance() {   
    if(singleton == null) {   
        synchronized(Singleton.class) {    
            singleton = new Singleton();   
        }   
    }   
return singleton;   
}   
</code></pre>

<p>这个代码片段只同步了关键的代码，而不是同步整个方法。然而这段代码却不是线程安全的。考虑一下下面的假定：线程1进入同步块，并且在它给singleton成员变量赋值之前线程1被切换。接着另一个线程进入if块。第二个线程将等待直到第一个线程完成，并且仍然会得到两个不同的单例类实例。有修复这个问题的方法吗？请读下去。</p>

<p><strong>双重加锁检查</strong></p>

<p>初看上去，双重加锁检查似乎是一种使懒汉式实例化为线程安全的技术。下面的代码片段展示了这种技术：</p>

<pre><code>public static Singleton getInstance() {   
    if(singleton == null) {   
         synchronized(Singleton.class) {   
            if(singleton == null) {   
                singleton = new Singleton();   
            }   
        }   
    }   
     return singleton;   
}   
</code></pre>

<p>如果两个线程同时访问getInstance()方法会发生什么？想像一下线程1进行同步块马上又被切换。接着，第二个线程进入if 块。当线程1退出同步块时，线程2会重新检查看是否singleton实例仍然为null。因为线程1设置了singleton成员变量，所以线程2的第二次检查会失败，第二个单例类实例也就不会被创建。似乎就是如此。<br/>
不幸的是，双重加锁检查不会保证正常工作，因为编译器会在Singleton的构造方法被调用之前随意给singleton赋一个值。如果在singleton引用被赋值之后而被初始化之前线程1被切换，线程2就会被返回一个对未初始化的单例类实例的引用。</p>

<p><strong>一个改进的线程安全的单例模式实现</strong></p>

<p>例7列出了一个简单、快速而又是线程安全的单例模式实现： <br/>
例7.一个简单的单例类</p>

<pre><code>public class Singleton {   
    public final static Singleton INSTANCE = new Singleton();   
    private Singleton() {   
        // Exists only to defeat instantiation.   
    }   
}   
</code></pre>

<p>这段代码是线程安全的是因为静态成员变量一定会在类被第一次访问时被创建。你得到了一个自动使用了懒汉式实例化的线程安全的实现;你应该这样使用它：</p>

<pre><code>Singleton singleton = Singleton.INSTANCE;   
singleton.dothis();   
singleton.dothat();   
...   
</code></pre>

<p>当然万事并不完美，前面的Singleton只是一个折衷的方案;如果你使用那个实现，你就无法改变它以便后来你可能想要允许多个单例类的实例。用一种更折哀的单例模式实现(通过一个getInstance()方法获得实例)你可以改变这个方法以便返回一个唯一的实例或者是数百个实例中的一个．你不能用一个公开且是静态的（public static)成员变量这样做．</p>

<p>你可以安全的使用例７的单例模式实现或者是例１的带一个同步的getInstance()方法的实现．然而，我们必须要研究另一个问题：你必须在编译期指定这个单例类，这样就不是很灵活．一个单例类的注册表会让我们在运行期指定一个单例类．</p>

<p>使用注册表 <br/>
使用一个单例类注册表可以：</p>

<p><strong>在运行期指定单例类</strong></p>

<p>防止产生多个单例类子类的实例 <br/>
在例8的单例类中，保持了一个通过类名进行注册的单例类注册表：  <br/>
例8 带注册表的单例类</p>

<pre><code>import java.util.HashMap;   
import org.apache.log4j.Logger;   

public class Singleton {   
    private static HashMap map = new HashMap();   
    private static Logger logger = Logger.getRootLogger();   

    protected Singleton() {   
        // Exists only to thwart instantiation   
    }   
public static synchronized Singleton getInstance(String classname) {   
    if(classname == null) throw new IllegalArgumentException("Illegal classname");   
        Singleton singleton = (Singleton)map.get(classname);   

    if(singleton != null) {   
        logger.info("got singleton from map: " + singleton);   
        return singleton;   
    }   
    if(classname.equals("SingeltonSubclass_One"))   
        singleton = new SingletonSubclass_One();            
    else if(classname.equals("SingeltonSubclass_Two"))   
        singleton = new SingletonSubclass_Two();   

    map.put(classname, singleton);   
    logger.info("created singleton: " + singleton);   
    return singleton;   
    }   
     // Assume functionality follows that's attractive to inherit   
}   
</code></pre>

<p>这段代码的基类首先创建出子类的实例，然后把它们存储在一个Map中。但是基类却得付出很高的代价因为你必须为每一个子类替换它的getInstance()方法。幸运的是我们可以使用反射处理这个问题。</p>

<p><strong>使用反射</strong></p>

<p>在例9的带注册表的单例类中，使用反射来实例化一个特殊的类的对象。与例8相对的是通过这种实现，Singleton.getInstance()方法不需要在每个被实现的子类中重写了。<br/>
例9 使用反射实例化单例类</p>

<pre><code>import java.util.HashMap;   
import org.apache.log4j.Logger;   

public class Singleton {   
    private static HashMap map = new HashMap();   
    private static Logger logger = Logger.getRootLogger();   

protected Singleton() {   
  // Exists only to thwart instantiation   
}   
public static synchronized Singleton getInstance(String classname) {   
    Singleton singleton = (Singleton)map.get(classname);   

    if(singleton != null) {   
        logger.info("got singleton from map: " + singleton);   
        return singleton;   
    }   
    try {   
     singleton = (Singleton)Class.forName(classname).newInstance();   
    }   
    catch(ClassNotFoundException cnf) {   
     logger.fatal("Couldn't find class " + classname);       
    }   
    catch(InstantiationException ie) {   
        logger.fatal("Couldn't instantiate an object of type " + classname);       
    }   
    catch(IllegalAccessException ia) {   
        logger.fatal("Couldn't access class " + classname);       
    }   
    map.put(classname, singleton);   
    logger.info("created singleton: " + singleton);   

    return singleton;   
    }   
}   
</code></pre>

<p>关于单例类的注册表应该说明的是：它们应该被封装在它们自己的类中以便最大限度的进行复用。</p>

<p><strong>封装注册表</strong></p>

<p>例10列出了一个单例注册表类。<br/>
例10 一个SingletonRegistry类</p>

<pre><code>import java.util.HashMap;   
import org.apache.log4j.Logger;   

public class SingletonRegistry {   
    public static SingletonRegistry REGISTRY = new SingletonRegistry();   

    private static HashMap map = new HashMap();   
    private static Logger logger = Logger.getRootLogger();   

    protected SingletonRegistry() {   
        // Exists to defeat instantiation   
    }   
    public static synchronized Object getInstance(String classname) {   
        Object singleton = map.get(classname);   

        if(singleton != null) {   
            return singleton;   
        }   
    try {   
        singleton = Class.forName(classname).newInstance();   
        logger.info("created singleton: " + singleton);   
    }   
    catch(ClassNotFoundException cnf) {   
        logger.fatal("Couldn't find class " + classname);       
    }   
    catch(InstantiationException ie) {   
        logger.fatal("Couldn't instantiate an object of type " +    
                   classname);       
    }   
    catch(IllegalAccessException ia) {   
        logger.fatal("Couldn't access class " + classname);       
    }   
    map.put(classname, singleton);   
    return singleton;   
    }   
}   
</code></pre>

<p>注意我是把SingletonRegistry类作为一个单例模式实现的。我也通用化了这个注册表以便它能存储和取回任何类型的对象。例11显示了的Singleton类使用了这个注册表。<br/>
例11 使用了一个封装的注册表的Singleton类</p>

<pre><code>import java.util.HashMap;   
import org.apache.log4j.Logger;   

public class Singleton {   

    protected Singleton() {   
        // Exists only to thwart instantiation.   
    }   
    public static Singleton getInstance() {   
        return (Singleton)SingletonRegistry.REGISTRY.getInstance(classname);   
    }   
}   
</code></pre>

<p>上面的Singleton类使用那个注册表的唯一实例通过类名取得单例对象。<br/>
现在我们已经知道如何实现线程安全的单例类和如何使用一个注册表去在运行期指定单例类名，接着让我们考查一下如何安排类载入器和处理序列化。</p>

<p><strong>Classloaders</strong></p>

<p>在许多情况下，使用多个类载入器是很普通的&#8211;包括servlet容器&#8211;所以不管你在实现你的单例类时是多么小心你都最终可以得到多个单例类的实例。如果你想要确保你的单例类只被同一个的类载入器装入，那你就必须自己指定这个类载入器;例如：</p>

<pre><code>private static Class getClass(String classname)    
                                     throws ClassNotFoundException {   
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();   

    if(classLoader == null)   
     classLoader = Singleton.class.getClassLoader();   

    return (classLoader.loadClass(classname));   
    }   
}   
</code></pre>

<p>这个方法会尝试把当前的线程与那个类载入器相关联;如果classloader为null，这个方法会使用与装入单例类基类的那个类载入器。这个方法可以用Class.forName()代替。</p>

<p><strong>序列化</strong></p>

<p>如果你序列化一个单例类，然后两次重构它，那么你就会得到那个单例类的两个实例，除非你实现readResolve()方法，像下面这样：<br/>
例12 一个可序列化的单例类</p>

<pre><code>import org.apache.log4j.Logger;   

public class Singleton implements java.io.Serializable {   
    public static Singleton INSTANCE = new Singleton();   

    protected Singleton() {   
        // Exists only to thwart instantiation.   
    }   
    private Object readResolve() {   
        return INSTANCE;   
    }  
}   
</code></pre>

<p>上面的单例类实现从readResolve()方法中返回一个唯一的实例;这样无论Singleton类何时被重构，它都只会返回那个相同的单例类实例。 <br/>
例13测试了例12的单例类：<br/>
例13 测试一个可序列化的单例类</p>

<pre><code>import java.io.*;   
import org.apache.log4j.Logger;   
import junit.framework.Assert;   
import junit.framework.TestCase;   

public class SingletonTest extends TestCase {   
    private Singleton sone = null, stwo = null;   
    private static Logger logger = Logger.getRootLogger();   

    public SingletonTest(String name) {   
        super(name);   
    }   
    public void setUp() {   
        sone = Singleton.INSTANCE;   
        stwo = Singleton.INSTANCE;   
    }   
    public void testSerialize() {   
        logger.info("testing singleton serialization...");   
        [b]      writeSingleton();   
        Singleton s1 = readSingleton();   
        Singleton s2 = readSingleton();   
        Assert.assertEquals(true, s1 == s2);[/b]   }   
        private void writeSingleton() {   
        try {   
            FileOutputStream fos = new FileOutputStream("serializedSingleton");   
            ObjectOutputStream oos = new ObjectOutputStream(fos);   
            Singleton s = Singleton.INSTANCE;   

            oos.writeObject(Singleton.INSTANCE);   
            oos.flush();   
        }   
        catch(NotSerializableException se) {   
            logger.fatal("Not Serializable Exception: " + se.getMessage());   
        }   
        catch(IOException iox) {   
            logger.fatal("IO Exception: " + iox.getMessage());   
        }   
    }   
    private Singleton readSingleton() {   
        Singleton s = null;   

        try {   
            FileInputStream fis = new FileInputStream("serializedSingleton");   
            ObjectInputStream ois = new ObjectInputStream(fis);   
            s = (Singleton)ois.readObject();   
        }   
        catch(ClassNotFoundException cnf) {   
            logger.fatal("Class Not Found Exception: " + cnf.getMessage());   
        }   
        catch(NotSerializableException se) {   
            logger.fatal("Not Serializable Exception: " + se.getMessage());   
        }   
        catch(IOException iox) {   
            logger.fatal("IO Exception: " + iox.getMessage());   
        }   
        return s;   
    }   
    public void testUnique() {   
        logger.info("testing singleton uniqueness...");   
        Singleton another = new Singleton();   

        logger.info("checking singletons for equality");   
        Assert.assertEquals(true, sone == stwo);   
    }   
}   
</code></pre>

<p>前面这个测试案例序列化例12中的单例类，并且两次重构它。然后这个测试案例检查看是否被重构的单例类实例是同一个对象。下面是测试案例的输出：</p>

<pre><code>Buildfile: build.xml   

init:   
    [echo] Build 20030422 (22-04-2003 11:32)   

compile:   

run-test-text:   
    [java] .INFO main: testing singleton serialization...   
    [java] .INFO main: testing singleton uniqueness...   
    [java] INFO main: checking singletons for equality   

    [java] Time: 0.1   

    [java] OK (2 tests)   
</code></pre>

<p><strong>单例模式结束语</strong></p>

<p>单例模式简单却容易让人迷惑，特别是对于Java的开发者来说。在这篇文章中，作者演示了Java开发者在顾及多线程、类载入器和序列化情况如何实现单例模式。作者也展示了你怎样才能实现一个单例类的注册表，以便能够在运行期指定单例类。</p>

<p>原文：<a href="http://calmness.iteye.com/blog/60179">http://calmness.iteye.com/blog/60179</a></p>
]]></content>
  </entry>
  
</feed>
