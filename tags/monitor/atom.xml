<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: monitor | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/monitor/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2013-06-06T16:04:56+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySql性能监控]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/01/10/mysql-monitor/"/>
    <updated>2013-01-10T19:03:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/01/10/mysql-monitor</id>
    <content type="html"><![CDATA[<h2>用mysqldumpslow分析mysql的slow query log</h2>

<p>mysql有一个功能就是可以log下来运行的比较慢的sql语句，默认是没有这个log的，为了开启这个功能，要修改my.cnf或者在mysql启动的时候加入一些参数。如果在my.cnf里面修改，需增加如下几行</p>

<pre><code>long_query_time = 1
log-slow-queries = /var/youpath/slow.log
log-queries-not-using-indexes[这个在mysql4.10以后才被引入]
</code></pre>

<p>long_query_time 是指执行超过多久的sql会被log下来，这里是1秒。<br/>
log-slow-queries 设置把日志写在那里，可以为空，系统会给一个缺省的文件host_name-slow.log，我生成的log就在mysql的data目录 <br/>
log-queries-not-using-indexes 就是字面意思，log下来没有使用索引的query。 <br/>
把上述参数打开，运行一段时间，就可以关掉了，省得影响生产环境。</p>

<!--more-->


<p>接下来就是分析了，我这里的文件名字叫host-slow.log。   <br/>
先mysqldumpslow –help以下，我主要用的是</p>

<pre><code>-s ORDER what to sort by (t, at, l, al, r, ar etc), ‘at’ is default
-t NUM just show the top n queries
-g PATTERN grep: only consider stmts that include this string
</code></pre>

<p>-s，是order的顺序，说明写的不够详细，俺用下来，包括看了代码，主要有
c,t,l,r和ac,at,al,ar，分别是按照query次数，时间，lock的时间和返回的记录数来排序，前面加了a的时倒叙  <br/>
-t，是top n的意思，即为返回前面多少条的数据  <br/>
-g，后边可以写一个正则匹配模式，大小写不敏感的</p>

<pre><code>mysqldumpslow -s c -t 20 host-slow.log
mysqldumpslow -s r -t 20 host-slow.log
</code></pre>

<p>上述命令可以看出访问次数最多的20个sql语句和返回记录集最多的20个sql。</p>

<pre><code>mysqldumpslow -t 10 -s t -g “left join” host-slow.log    
</code></pre>

<p>这个是按照时间返回前10条里面含有左连接的sql语句。 <br/>
用了这个工具就可以查询出来那些sql语句是性能的瓶颈，进行优化，比如加索引，该应用的实现方式等。</p>

<h2>linux 系统整体性能查看的方法:</h2>

<p>vmstat 10 -----每10秒刷新一次</p>

<pre><code>procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------   
r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st   
0  0      0  56508  10968  68380    0    0   184    40 1021   88  3 14 78  5  0    
0  0      0  56508  10976  68376    0    0     0     3 1251   49  0  0 100  0  0    
0  0      0  56508  10976  68376    0    0     0     0 1250   50  0  0 100  0  0    
0  0      0  56508  10984  68376    0    0     0     4 1251   51  0  0 100  0  0    
0  0      0  56508  10984  68376    0    0     0     0 1250   48  0  0 100  0  0    
0  0      0  56508  10984  68376    0    0     0     0 1250   50  0  0 100  0  0   
0  0      0  56508  10984  68376    0    0     0     0 1250   51  0  0 100  0  0      
0  0      0  56508  10992  68376    0    0     0     2 1250   49  0  0 100  0  0    
0  0      0  56508  10992  68376    0    0     0     0 1250   51  0  0 100  0  0   
</code></pre>

<p>procs: <br/>
r-->;在运行队列中等待的进程数  <br/>
b-->;在等待io的进程数 <br/>
w-->;可以进入运行队列但被替换的进程</p>

<p>memory  <br/>
swap-->;现时可用的交换内存（k表示） <br/>
free-->;空闲的内存（k表示）</p>

<p>pages <br/>
re－－》回收的页面 <br/>
mf－－》非严重错误的页面 <br/>
pi－－》进入页面数（k表示） <br/>
po－－》出页面数（k表示） <br/>
fr－－》空余的页面数（k表示） <br/>
de－－》提前读入的页面中的未命中数 <br/>
sr－－》通过时钟算法扫描的页面</p>

<p>disk 显示每秒的磁盘操作。 s表示scsi盘，0表示盘号</p>

<p>fault 显示每秒的中断数 <br/>
in－－》设备中断  <br/>
sy－－》系统中断 <br/>
cy－－》cpu交换</p>

<p>cpu 表示cpu的使用状态 <br/>
cs－－》用户进程使用的时间 <br/>
sy－－》系统进程使用的时间 <br/>
id－－》cpu空闲的时间</p>

<p>其中: <br/>
如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。 <br/>
如果pi，po 长期不等于0，表示内存不足。 <br/>
如果disk 经常不等于0， 且在 b中的队列 大于3， 表示 io性能不好。</p>

<p>每100s显示一次mysql 运行的状态:</p>

<pre><code>mysqladmin extended -i 100 –r
</code></pre>

<p>显示mysql服务器的线程列表</p>

<pre><code>mysqladmin -u root -p process    
Enter password:
+----+------+-----------+----+---------+------+-------+------------------+
| Id | User | Host      | db | Command | Time | State | Info             |
+----+------+-----------+----+---------+------+-------+------------------+
| 12 | root | localhost |    | Query   | 0    |       | show processlist |
+----+------+-----------+----+---------+------+-------+------------------+
</code></pre>

<p>相关命令：</p>

<p>一，获取mysql用户下的进程总数</p>

<pre><code>ps -ef | awk '{print $1}' | grep "mysql" | grep -v "grep" | wc-1
</code></pre>

<p>二，主机性能状态</p>

<pre><code>[root@ ~]# uptime
</code></pre>

<p> 13:05:52 up 53 days, 52 min,  1 user,  load average: 0.00, 0.00, 0.00</p>

<p>三，CPU使用率 <br/>
top 或 vmstat  <br/>
四，磁盘IO量  <br/>
vmstat 或  iostat <br/>
五，swap进出量[内存] <br/>
free  <br/>
六，数据库性能状态 <br/>
(1)QPS(每秒Query量) <br/>
QPS = Questions(or Queries) / seconds  <br/>
mysql > show status like 'Question'; <br/>
(2)TPS(每秒事务量) <br/>
TPS = (Com_commit + Com_rollback) / seconds
mysql > show status like 'Com_commit';  <br/>
mysql > show status like 'Com_rollback'; <br/>
(3)key Buffer 命中率  <br/>
key_buffer_read_hits = (1-key_reads / key_read_requests) * 100% <br/>
key_buffer_write_hits = (1-key_writes / key_write_requests) * 100%  <br/>
mysql> show status like 'Key%'; <br/>
(4)InnoDB Buffer命中率  <br/>
innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%  <br/>
mysql> show status like 'innodb_buffer_pool_read%';   <br/>
(5)Query Cache命中率  <br/>
Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;  <br/>
mysql> show status like 'Qcache%'; <br/>
(6)Table Cache状态量  <br/>
mysql> show status like 'open%';  <br/>
(7)Thread Cache 命中率  <br/>
Thread_cache_hits = (1 - Threads_created / connections ) * 100%  <br/>
mysql> show status like 'Thread%';  <br/>
mysql> show status like 'Connections';   <br/>
(8)锁定状态   <br/>
mysql> show status like '%lock%';  <br/>
(9)复制延时量  <br/>
mysql > show slave status  <br/>
(10) Tmp Table 状况(临时表状况) <br/>
mysql > show status like 'Create_tmp%';  <br/>
(11) Binlog Cache 使用状况  <br/>
mysql > show status like 'Binlog_cache%'; <br/>
(12) Innodb_log_waits 量  <br/>
mysql > show status like 'innodb_log_waits';</p>
]]></content>
  </entry>
  
</feed>