<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: apache | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/apache/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2014-11-25T12:56:14+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web系统性能调优常用技巧]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/09/24/performance-tuning-in-web-test/"/>
    <updated>2013-09-24T18:02:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/09/24/performance-tuning-in-web-test</id>
    <content type="html"><![CDATA[<h4>目标Web系统</h4>

<p>apache + tomcat + mysql + linux, 介绍如何定位瓶颈与调优</p>

<h4>Tomcat</h4>

<p>按照官方默认配置。 <br/>
并发150正常;达到210时，报connection refuse</p>

<p>$TOMCAT_HOME/conf/server.xml中</p>

<pre><code>&lt;Connector port="8080" protocol="HTTP/1.1"      connectionTimeout="20000" 
               redirectPort="8443" URIEncoding="UTF-8"/&gt;
</code></pre>

<p>maxThreads 默认值是200
acceptCount 默认值是100</p>

<p>解决方法：显式指明以上2项，并提高数值。并可配合min/maxSpareThreads</p>

<p>参数文档： <a href="http://tomcat.apache.org/tomcat-6.0-doc/config/http.html">http://tomcat.apache.org/tomcat-6.0-doc/config/http.html</a></p>

<!--more-->


<p>继续增加并发数，出现以下现象：</p>

<ul>
<li>420并发，观察到Jmeter的聚合报告有明显卡顿现象。</li>
<li><p>Noah监控，显示CPU使用率下降。大锯齿出现。</p>

<p>问题分析：</p>

<pre><code>  在加压过程中，对tomcat的JVM情况进行监控。出现FullGC,每次大概4s .
</code></pre></li>
</ul>


<p>如何监控GC吗？</p>

<pre><code>jstat -gcutil 3950 3000 5

  S0     S1         E          O      P       YGC     YGCT    FGC       FGCT     GCT   
  0.00  47.86  66.10   6.55  99.92      7       0.087     0         0.000    0.087
  0.00  47.86  66.90   6.55  99.94      7       0.087     0         0.000    0.087
  0.00  47.86  67.30   6.55  99.94      7       0.087     0         0.000    0.087
  0.00  47.86  67.30   6.55  99.94      7       0.087     0         0.000    0.087
  0.00  47.86  67.30   6.55  99.94      7       0.087     0         0.000    0.087
</code></pre>

<p>解决方法：</p>

<pre><code>     $TOMCAT_HOME/bin/catalina.sh   第一行添加
    export CATALINA_OPTS="-Xmx3500m -Xms2048m -XX:PermSize=256m XX:MaxPermSize=512m -Xss128k"
</code></pre>

<p>JAVA_OPTS   VS   CATALINA_OPTS（推荐使用）   <br/>
<strong>差别</strong>：JAVA_OPTS start run stop   适用所有JVM</p>

<pre><code>           CATALINA_OPTS   start run    专门配置tomcat    
</code></pre>

<p>tomcat默认-client ，production环境加-server</p>

<p>JVM参数文档：<a href="http://kenwublog.com/docs/java6-jvm-options-chinese-edition.htm">http://kenwublog.com/docs/java6-jvm-options-chinese-edition.htm</a></p>

<h5>Tomcat executor</h5>

<p>据信使用executor后，能在实际中有更好的性能以及稳定性！更为重要的是能在多个connector之间共用。</p>

<pre><code>&lt;Executor name="tomcatThreadPool" namePrefix="catalina-exec-" maxThreads="1000" minSpareThreads="25"/&gt;

&lt;Connector executor="tomcatThreadPool"  port="8080" protocol="HTTP/1.1"   connectionTimeout="20000"  redirectPort="8443" /&gt;  
</code></pre>

<p>此时，connector再使用maxThreads等属性将被忽略。</p>

<h5>Tomcat Connector protocol</h5>

<ul>
<li><p>bio   默认模式，性能低下，无任何优化，阻塞IO模式</p>

<p>  protocol = "org.apache.coyote.http11.Http11Protocol" or HTTP/1.1(for http connector)
  protocol = "org.apache.jk.server.JkCoyoteHandler" or AJP/1.3(for ajp connector)</p></li>
<li><p>nio   Java的异步io技术，非阻塞 IO</p>

<p>  protocol = "org.apache.coyote.http11.Http11NioProtocol"(for http connector)
  protocol = "org.apache.coyote.ajp.AjpProtocol"(for ajp connector)</p></li>
<li><p>apr  需要安装apr(Apache Portable Runtime)和Native。</p>

<p>  protocol = "org.apache.coyote.http11.Http11AprProtocol"(for http connector)
  protocol = "org.apache.coyote.ajp.AjpAprProtocol"  (for ajp connector)</p></li>
</ul>


<p>参考文档：  <br/>
&lt;http://tomcat.apache.org/tomcat-6.0-doc/config/http.html#Connector Comparison></p>

<p><a href="http://tomcat.apache.org/tomcat-6.0-doc/config/ajp.html">http://tomcat.apache.org/tomcat-6.0-doc/config/ajp.html</a></p>

<h5>MySQL</h5>

<p>大并发下，响应时间如何提高，绝大部分瓶颈都处于数据库端。</p>

<p>与数据库的连接，使用JDBC连接池</p>

<p>slow query监控：   <br/>
1. 开启慢查询 my.cnf</p>

<pre><code>long_query_time = 2
log-slow-queries =  slow.log
</code></pre>

<p>2.使用mysqldumpslow分析log</p>

<pre><code>mysqldumpslow -t 10 -s t  slow.log
</code></pre>

<p>解决：</p>

<ul>
<li>1.SQL调优   （http://coolshell.cn/articles/1846.html）</li>
<li>2.走类似lucene索引，空间换时间（idea实际测试中，吞吐提升7倍）</li>
<li>3.使用NoSQL?</li>
</ul>


<p>$MYSQL_HOME/etc/my.cnf  或者 my.ini（windows）</p>

<p>主要影响性能参数：</p>

<pre><code>max-connections = 3000     会话数上限
max_connect_errors = 10000    允许的最大连接错误量
query_cache_size =128M    查询缓存
query_cache_limit = 2M   小于这么大的才缓存，保护查询缓存
sort_buffer_size =256M    排序order by 或 group by 使用
</code></pre>

<p>参考：<a href="http://www.ha97.com/4110.html">http://www.ha97.com/4110.html</a></p>

<h4>Apache</h4>

<p>处理静态资源，无法处理动态（需要应用服务器支持）</p>

<p>静态资源直接交给apache处理</p>

<p>ab 命令进行测试，达到1000并发很easy</p>

<pre><code>ab -k -c 1000  -n 1000000  http://hostname:port/path
</code></pre>

<p>参考：<a href="http://httpd.apache.org/docs/2.2/programs/ab.html">http://httpd.apache.org/docs/2.2/programs/ab.html</a></p>

<h5>开启MPM支持大并发</h5>

<table border="1px">
<thead>
<th>Mpm模式</th><th>并发方式</th><th>内存占用</th><th>并发性能</th>
</thead>
<tbody>
<tr>
<td>prefork</td><td>进程</td><td>高</td><td>低并发下，吞吐率高</td>
</tr>
<tr>
<td>worker</td><td>进程+线程</td><td>低</td><td>支持海量并发</td>
</tr>
</tbody>
</table>


<p>确定apache模式命令：</p>

<pre><code>./httpd –l
</code></pre>

<p>输出：</p>

<pre><code>Compiled in modules:
core.c
worker.c
http_core.c
mod_so.c
</code></pre>

<p>修改httpd-mpm.conf</p>

<pre><code>&lt;IfModule mpm_worker_module&gt;
    StartServers          2
    MaxClients          150
    MinSpareThreads      25
    MaxSpareThreads      75
    ThreadsPerChild      25
    MaxRequestsPerChild   0
&lt;/IfModule&gt;
</code></pre>

<p>上面的配置需要满足以下公式：</p>

<pre><code>     ThreadLimit &gt;= ThreadsPerChild    
     MaxClients &lt;= ServerLimit * ThreadsPerChild 必须是ThreadsPerChild的倍数     
     MaxSpareThreads &gt;= MinSpareThreads+ThreadsPerChild    
</code></pre>

<h4>Linux</h4>

<h5>too many open files error</h5>

<p><code>ulimit -a</code>进行查看
修改<code>vi /etc/security/limits.conf</code></p>

<p>添加：</p>

<pre><code>*    -     nofile    65535
</code></pre>

<p>参考文档： <br/>
 <a href="http://blog.csdn.net/lifeibo/article/details/5972356">http://blog.csdn.net/lifeibo/article/details/5972356</a></p>

<p>Http连接是基于TCP的，这个时候需要对linux服务器进行优化。 <br/>
<strong>三次握手</strong></p>

<p><img src="/images/blog/2013/three-times-handshake.png" alt="三次握手" /></p>

<p><strong>四次挥手</strong></p>

<p><img src="/images/blog/2013/four-wave.png" alt="四次挥手" /></p>

<p>如何查看服务器TCP状态？  <br/>
命令：</p>

<pre><code>netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'
</code></pre>

<p>输出：</p>

<pre><code>ESTABLISHED 1423
FIN_WAIT1 1
FIN_WAIT2 262
SYN_SENT 1
TIME_WAIT 962
</code></pre>

<p>优化TCP连接相关参数：</p>

<p><code>vi /etc/sysctl.conf</code></p>

<pre><code>net.ipv4.tcp_fin_timeout = 30  保持在FIN-WAIT-2的时间。默认60秒。2.2内核是180秒
net.ipv4.tcp_keepalive_time = 1200     长连接keepalive打开，发送的频率。默认7200（2H）
net.ipv4.tcp_tw_reuse = 1     默认0，处于TIME-WAIT状态的socket可以用于新的TCP连接
net.ipv4.tcp_tw_recycle = 1   默认0，TIME-WAIT状态的sockets快速回收
net.ipv4.ip_local_port_range = 1024    65000 向外连接的端口范围，默认32768~61000
net.ipv4.tcp_max_syn_backlog = 8192  默认1024/128,未获得客户端连接请求并保存在队列中的最大数目。
net.ipv4.tcp_max_tw_buckets = 5000   默认180000，系统处理的最大TIME_WAIT数目。
net.ipv4.route.gc_timeout = 100  路由缓存刷新频率，失败多长时间跳到另一个。默认300.
net.ipv4.tcp_syncookies = 1 默认0，SYN队列溢出，启用cookies处理。
net.ipv4.tcp_syn_retries = 1       新建连接发送SYN次数，默认5，180秒
net.ipv4.tcp_synack_retries = 1    3次握手的第二步，重试几次。默认5.
</code></pre>

<p><code>/sbin/sysctl -p</code>   生效</p>

<p>参考文档：<a href="http://www.itlearner.com/article/4792">http://www.itlearner.com/article/4792</a></p>

<p>备注：此文由本人在公司内做的PPT分享制作而成，内容有些省略以及跳跃。欢迎留言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apache mpm介绍]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/12/apache-mpm/"/>
    <updated>2012-10-12T12:45:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/12/apache-mpm</id>
    <content type="html"><![CDATA[<h2>什么是MPM？</h2>

<p>MPM（Multi -Processing Modules，多路处理模块）是Apache2.x中影响性能的最核心特性。</p>

<p>是Apache 2.x才支持的一个可插入的并发模型，在编译的时候，我们只可以选择一个并发模型。</p>

<p>配置文件：/usr/local/apache2/conf/extra/httpd-mpm.conf</p>

<p>如果apache是默认安装的可能配置在httpd.conf文件中。根据实际情况查找配置。</p>

<p>使用格式：
进入apache的目录，对apache进行如下编译：</p>

<p>Linux代码
<code>./configure --help|grep mpm </code></p>

<!--more-->


<p>显示内容如下：</p>

<p>Linux代码</p>

<pre><code>--with-mpm=MPM  
Choose the process model for Apache to use.  
MPM={beos|worker|prefork|mpmt_os2| perchild|leader|threadpool}  
</code></pre>

<ul>
<li><p>1、Beos、mpmt_os2分别是BeOS和OS/2上缺省的MPM。</p></li>
<li><p>2、perchild主要设计目的是以不同的用户和组的身份来运行不同的子进程，这在运行多个需要CGI的虚拟主机时特别有用，会比1.3版中的SuExec 机制做得更好。</p></li>
<li><p>3、leader和threadpool都是基于worker的变体，还处于实验性阶段，某些情况下并不会按照预期设想的那样工作，所以 Apache官方也并不推荐使用。</p></li>
<li><p>4、prefork如果不用“–with-mpm ”显式指定某种MPM，prefork就是LInux/Unix平台上缺省的MPM.它所采用的预派生子进程方式也是 Apache 1.3中采用的模式.prefork本身并没有使用到线程，2.0版使用它是为了与1.3版保持兼容性；另一方面，prefork用单独的子进程来处理不同的请求，进程之间是彼此独立的，这也使其成为最稳定的MPM之一。<br/>
prefork的工作原理是，控制进程在最初建立“StartServers”个子进程后,为了满足MinSpareServers设置的需要创建一个进程,等待一秒钟，继续创建两个，再等待一秒钟，继续创建四个……如此按指数级增加创建的进程数,最多达到每秒32个，直到满足MinSpareServers设置的值为止。这就是预派生（prefork）的由来.这种模式可以不必在请求到来时再产生新的进程，从而减小了系统开销以增加性能。</p></li>
<li><p>5、worker相对于prefork,worker是2.x版中全新的支持多线程和多进程混合模型的MPM。由于使用线程来处理,所以可以处理相对海量的请求，而系统资源的开销要小于基于进程的服务器.但是，worker也使用了多进程，每个进程又生成多个线程，以获得基于进程服务器的稳定性.这种MPM的工作方式将是Apache 2.x的发展趋势。  <br/>
worker的工作原理是，由主控制进程生成“StartServers”个子进程，每个子进程中包含固定的ThreadsPerChild 线程数，各个线程独立地处理请求。同样，为了不在请求到来时再生成线程，MinSpareThreads和MaxSpareThreads设置了最少和最多的空闲线程数；而MaxClients设置了所有子进程中的线程总数.如果现有子进程中的线程总数不能满足负载，控制进程将派生新的子进程。</p></li>
</ul>


<h2>如何判断当前的服务器使用那种MPM 模块?</h2>

<p>若使用prefork，在make编译和make install安装后，使用“httpd -l”来确定当前使用的MPM，
如下示:</p>

<pre><code>[aaron@webslave1 extra]$ /usr/local/apache2/bin/httpd -l 
Compiled in modules: 
core.c 
...... 
prefork.c 
...... 
</code></pre>

<p>应该会看到prefork.c（如果看到worker.c说明使用的是worker MPM，依此类推）。再查看缺省生成的httpd.conf配置文件，里面包含如下配置段：</p>

<p>Linux代码</p>

<pre><code>&lt;IfModule prefork.c&gt;  
StartServers 5  
MinSpareServers 5  
MaxSpareServers 10  最大的空闲进程数 
MaxClients 150  Apache可以同时处理的请求(最重要)--即为常说的并发连接数!! 
MaxRequestsPerChild 0  每个子进程可处理的请求数 
&lt;/IfModule&gt;  
</code></pre>

<p>MaxSpareServers设置了最大的空闲进程数，如果空闲进程数大于这个值，Apache会自动kill掉一些多余进程。这个值不要设得过大，但如果设的值比MinSpareServers小，Apache会自动把其调整为MinSpareServers+1。如果站点负载较大，可考虑同时加大MinSpareServers和MaxSpareServers。</p>

<p>MaxRequestsPerChild设置的是每个子进程可处理的请求数。每个子进程在处理了“MaxRequestsPerChild”个请求后将自动销毁。0意味着无限，即子进程永不销毁。虽然缺省设为0可以使每个子进程处理更多的请求，但如果设成非零值也有两点重要的好处：</p>

<p>可防止意外的内存泄漏；
在服务器负载下降的时侯会自动减少子进程数。</p>

<p>因此，可根据服务器的负载来调整这个值。笔者认为10000左右比较合适。</p>

<p>MaxClients是这些指令中最为重要的一个，设定的是Apache可以同时处理的请求，是对Apache性能影响最大的参数。<br/>
其缺省值150是远远不够的，如果请求总数已达到这个值（可通过ps -ef|grep http|wc -l来确认），那么后面的请求就要排队，直到某个已处理请求完毕。这就是系统资源还剩下很多而HTTP访问却很慢的主要原因。系统管理员可以根据硬件配置和负载情况来动态调整这个值。<br/>
虽然理论上这个值越大，可以处理的请求就越多，但Apache默认的限制不能大于256。如果把这个值设为大于256，那么Apache将无法起动。事实上，256对于负载稍重的站点也是不够的。在Apache 1.3中，这是个硬限制。如果要加大这个值，必须在“configure”前手工修改的源代码树下的src/include/httpd.h中查找256，就会发现“#define HARD_SERVER_LIMIT 256”这行。把256改为要增大的值（如4000），然后重新编译Apache即可。在Apache 2.0中新加入了ServerLimit指令，使得无须重编译Apache就可以加大MaxClients。下面是笔者的prefork配置段：</p>

<p>Linux代码</p>

<pre><code>&lt;IfModule prefork.c&gt;  
StartServers 10  
MinSpareServers 10  
MaxSpareServers 15  
ServerLimit 2000  
MaxClients 1000  
MaxRequestsPerChild 10000  
&lt;/IfModule&gt;  
</code></pre>

<p>　上述配置中，ServerLimit的最大值是20000，对于大多数站点已经足够。如果一定要再加大这个数值，对位于源代码目录下
/httpd-2.2.15/server/mpm/prefork/prefork.c中以下两行做相应修改即可：<br/>
Linux代码</p>

<pre><code>#define DEFAULT_SERVER_LIMIT 256  
#define MAX_SERVER_LIMIT 20000  
</code></pre>

<p>worker的工作原理是，由主控制进程生成“StartServers”个子进程，每个子进程中包含固定的ThreadsPerChild线程数，各个线程独立地处理请求。同样，为了不在请求到来时再生成线程，MinSpareThreads和MaxSpareThreads设置了最少和最多的空闲线程数；而MaxClients设置了所有子进程中的线程总数。如果现有子进程中的线程总数不能满足负载，控制进程将派生新的子进程。</p>

<p>MinSpareThreads和MaxSpareThreads的最大缺省值分别是75和250。这两个参数对Apache的性能影响并不大，可以按照实际情况相应调节。
ThreadsPerChild是worker MPM中与性能相关最密切的指令。ThreadsPerChild的最大缺省值是64，如果负载较大，64也是不够的。这时要显式使用ThreadLimit指令，它的最大缺省值是20000。上述两个值位于源码树server/mpm/worker/worker.c中的以下两行：</p>

<p>Linux代码</p>

<pre><code>#define DEFAULT_THREAD_LIMIT 64  
#define MAX_THREAD_LIMIT 20000  
</code></pre>

<p>这两行对应着ThreadsPerChild和ThreadLimit的限制数。最好在configure之前就把64改成所希望的值。注意，不要把这两个值设得太高，超过系统的处理能力，从而因Apache不起动使系统很不稳定。
Worker模式下所能同时处理的请求总数是由子进程总数乘以ThreadsPerChild值决定的，应该大于等于MaxClients。如果负载很大，现有的子进程数不能满足时，控制进程会派生新的子进程。默认最大的子进程总数是16，加大时也需要显式声明ServerLimit（最大值是20000）。这两个值位于源码树server/mpm/worker/worker.c中的以下两行：</p>

<p>Linux代码</p>

<pre><code>#define DEFAULT_SERVER_LIMIT 16  
#define MAX_SERVER_LIMIT 20000  
</code></pre>

<p>需要注意的是，如果显式声明了ServerLimit，那么它乘以ThreadsPerChild的值必须大于等于MaxClients，而且MaxClients必须是ThreadsPerChild的整数倍，否则Apache将会自动调节到一个相应值（可能是个非期望值）。下面是笔者的worker配置段：</p>

<p>Linux代码</p>

<pre><code>&lt;IfModule worker.c&gt;  
StartServers 3  
MaxClients 2000  
ServerLimit 25  
MinSpareThreads 50  
MaxSpareThreads 200  
ThreadLimit 200  
ThreadsPerChild 100  
MaxRequestsPerChild 0  
&lt;/IfModule&gt;  
</code></pre>

<p>硬性公式：</p>

<pre><code>     ThreadLimit &gt;= ThreadsPerChild
     MaxClients &lt;= ServerLimit * ThreadsPerChild 必须是ThreadsPerChild的倍数
     MaxSpareThreads &gt;= MinSpareThreads+ThreadsPerChild
</code></pre>

<p>ServerLimit默认是16,最大20000;ThreadLimit默认是64,最大20000。<br/>
通过上面的叙述，可以了解到Apache 2.0中prefork和worker这两个重要MPM的工作原理，并可根据实际情况来配置Apache相关的核心参数，以获得最大的性能和稳定性。</p>
]]></content>
  </entry>
  
</feed>