<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: cglib | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/cglib/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2013-05-30T20:12:35+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式：代理（Proxy） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/proxy-in-java/"/>
    <updated>2012-11-02T16:21:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/proxy-in-java</id>
    <content type="html"><![CDATA[<h2>什么是代理？</h2>

<p>代理是指，本该有A做的工作，现在找一个代理人B，然后由B来进行实际的工作。<br/>
代理，简单来分，可以分为以下两类：</p>

<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>


<!--more-->


<h2>静态代理</h2>

<p>以实现两个数的加法场景为例：</p>

<pre><code>public interface IAdd {
    public int add(int a, int b);
}
</code></pre>

<p>实现类：</p>

<pre><code>public class Add implements IAdd {
    @Override
    public int add(int a, int b) {
        return a + b;
    }
}
</code></pre>

<p>直接使用的话：</p>

<pre><code>Add add = new Add();
add.add(3, 14);
</code></pre>

<p>那么我想在执行加运算时，做一些其他操作怎么办，已有的类ADD无法改，没有源码。这时很容易想到的就是扩展：</p>

<pre><code>public class AddProxy implements IAdd {
    private IAdd add;

    public AddProxy(IAdd add) {
        this.add = add;
    }
    @Override
    public int add(int a, int b) {
        System.out.println("...begin...");
        int result = add.add(3, 14);
        System.out.println("...end...");
        return result;
    }
}
</code></pre>

<p>这样做，没有修改已有的类，并且增加了一些操作，此处为一些提示信息。采用了组合的方式，实现了代理模式。具体使用时，直接使用AddProxy即可。</p>

<pre><code>IAdd add = new AddProxy(new Add());
int result = add.add(3, 14);
</code></pre>

<p>此为<strong>静态代理</strong>也。</p>

<h2>动态代理</h2>

<p>动态代理，是指运行时动态的生成代理类，完成功能。静态代理中，显然AddProxy是编译期已知的了。实现方式，主要有两种：</p>

<ul>
<li>JDK Proxy</li>
<li>Cglib Proxy</li>
</ul>


<h3>JDK Proxy</h3>

<p>Java自身提供了相关的类，来实现动态代理。  <br/>
首先要定义一个<code>java.lang.reflect.InvocationHandler</code>接口实现</p>

<pre><code>import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
/**
* @author shenyanchao
*/
public class AddInvocationHandler implements InvocationHandler {

    private Object target;
    //绑定要代理的目标类
    public void bind(Object target) {
        this.target = target;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args)
        throws Throwable {
        System.out.println("......begin....");
        Object result = method.invoke(target, args);
        System.out.println("......end....");
        return result;
    }
}
</code></pre>

<p>那么在具体使用时，代码如下：</p>

<pre><code>AddInvocationHandler addHandler = new AddInvocationHandler();
IAdd add = new Add();
addHandler.bind(add);
IAdd addProxy = (IAdd) Proxy.newProxyInstance(
            Add.class.getClassLoader(), Add.class.getInterfaces(),
            addHandler);
int jdkResult = addProxy.add(3, 14);
</code></pre>

<p>从代码可见，主要是通过<code>Proxy.newProxyInstance</code>来在运行时生成代理类。需要注意的是，第二个参数必须使用具体实现类Add来获得interfaces，也就是说其代理的类必须实现了接口。<code>addHandler</code>负责绑定要代理的target类，并调用invoke来增强Add功能。</p>

<h3>Cglib Proxy</h3>

<p>JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。 <br/>
要使用CgLib，首先要实现一个CallBack接口的类，由于本例是为了实现method的拦截，因此直接实现MethodInterceptor即可：</p>

<pre><code>import java.lang.reflect.Method;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;
/**
* @author shenyanchao
*/
public class AddInterceptor implements MethodInterceptor {

@Override
public Object intercept(Object obj, Method method, Object[] args,
        MethodProxy proxy) throws Throwable {
        System.out.println("....begin....");
        Object result = proxy.invokeSuper(obj, args);
        System.out.println("....end....");
        return result;
    }
}
</code></pre>

<p>具体使用时：</p>

<pre><code>Enhancer enhancer = new Enhancer();
enhancer.setSuperclass(Add.class);
enhancer.setCallback(new AddInterceptor());
Add add  =  (Add) enhancer.create();
int result = add.add(3, 14);
</code></pre>

<p>通过Enhancer制定需要增强的类，并设置CallBack函数来实现代理与功能增强。</p>
]]></content>
  </entry>
  
</feed>