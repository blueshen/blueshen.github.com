<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 读书笔记 | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/读书笔记/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2013-05-15T17:45:57+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《Node.js开发指南》读书笔记]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/03/11/node-dot-js-develop-guide-reading-note/"/>
    <updated>2013-03-11T16:53:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/03/11/node-dot-js-develop-guide-reading-note</id>
    <content type="html"><![CDATA[<h3>书籍信息</h3>

<p>Amazon: <a href="http://www.amazon.cn/Node-js%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97-%E9%83%AD%E5%AE%B6%E5%AE%9D/dp/B008HN793I">NodeJS开发指南</a></p>

<p>PDF: <a href="http://azrael.ihorsley.com/wordpress/wp-content/uploads/2012/11/Node.js%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97_%E4%B8%AD%E6%96%87%E6%AD%A3%E7%89%88.pdf">免费下载</a></p>

<h3>NodeJS简介</h3>

<p>是NodeJS的出现，让JavaScript在服务器端得以使用，重新焕发了生机。而不仅仅像大家所认为的，只是一个客户端脚本语言。<br/>
由于JavaScript自身的脚本语言特性，造成开发混乱，难以维护。CommonJS对这个进行了规范。像NodeJS,ringojs都是对这一规范的具体实现。
CommonJS规范包括：</p>

<ul>
<li>模块（modules）</li>
<li>包（packages）</li>
<li>系统（system）</li>
<li>二进制（binary）</li>
<li>控制台（console）</li>
<li>编码（encodings）</li>
<li>文件系统（filesystems）</li>
<li>套接字（sockets）</li>
<li>单元测试（unit testing）</li>
</ul>


<!--more-->


<h3>NodeJS的模块与包</h3>

<p>模块（module）和包(package)是NodeJS的基本。并且都是参照CommonJS标准来实现的。如果项目有一定的规模，势必要把各种功能模块进行切分，然后再组装起来。这也正式所有服务器端的通用做法。然而，在NodeJS中怎么实现模块之间的调用呢，这里是使用require函数的。模块和包通常区分不是很明确，可以认为是一致的。</p>

<h4>1.什么是模块？</h4>

<pre><code>var http = require("http");
</code></pre>

<p>其中http就是nodeJs中的一个核心模块. 像Java中的import一样，这里是使用require来引入这个模块。</p>

<h4>2.创建与发布模块</h4>

<p>NodeJS提供了exports和require两个对象来完成，exports用于公开模块的接口，require用于获取外部模块的接口。
如创建一个module.js:</p>

<pre><code>var name;
exports.setName=function(thyName){
     name=thyName;
     }
     exports.sayHello = function(){
    console.log('Hello '+name);
}
</code></pre>

<p>在同一个目录下，再创建一个getmodule.js:</p>

<pre><code>var mymodule = require('./module');
myModule.setName('shenyanchao');
myModule.sayHello();
</code></pre>

<p>运行后的结果：</p>

<pre><code>Hello shenyanchao
</code></pre>

<p>这就是一个简单的模块发布与调用关系。</p>

<h4>3.包（package）</h4>

<p>包是对模块的更进一步的抽象。类似与Java的类库概念。当包便多，甚至依赖很复杂的时候，就需要一个管理工具，就像是Java的Maven用来管理Jar包一样。NodeJs用NPM（Node Packages Manager）来发布、更新、依赖管理和版本控制。<br/>
直观上看，NodeJS的包是一个目录，并且包含一个package.json文件。一个符合CommonJS的包应有以下的特征：</p>

<ul>
<li>package.json在包的顶层目录下；</li>
<li>二进制可执行文件在bin目录下；</li>
<li>JS代码在lib目录下；</li>
<li>文档在doc目录下；</li>
<li>单元测试在test下；
这就相当于对包的目录结构进行了一个定义，类似于J2EE的规范一样，减少大家的学习成本，什么东西放在哪儿都一清二楚。如果在github或者googlecode上看开源项目，绝对都是这样的结构。</li>
</ul>


<p>模块与文件是一一对应的。文件不仅可以是 JavaScript 代码或二进制代码,还可以是一个文件夹。最简单的包,就是一个作为文件夹的模块。建立一个叫做 somepackage 的文件夹,在其中创建 index.js,内容如下:</p>

<pre><code>exports.hello = function() {
   console.log('Hello.');
};
</code></pre>

<p>然后在 somepackage 之外建立 getpackage.js,内容如下:</p>

<pre><code>var somePackage = require('./somepackage');
somePackage.hello();
</code></pre>

<p>运行 node getpackage.js,控制台将输出结果 Hello。 <br/>
我们使用这种方法可以把文件夹封装为一个模块,即所谓的包。包通常是一些模块的集合,在模块的基础上提供了更高层的抽象,相当于提供了一些固定接口的函数库。通过定制package.json,我们可以创建更复杂、更完善、更符合规范的包用于发布。 <br/>
<strong>package.json</strong>
在somepackage 文件夹下,我们创建一个叫做 package.json 的文件,内容如下所示:</p>

<pre><code>{
    "main" : "./lib/interface.js"
}
</code></pre>

<p>然后将 index.js 重命名为 interface.js 并放入 lib 子文件夹下。以同样的方式再次调用这个包,依然可以正常使用。 <br/>
NodeJS在调用某个包时,会首先检查包中 package.json 文件的 main 字段,将其作为包的接口模块,如package.json 或 main 字段不存在,会尝试寻找 index.js 或 index.node 作为包的接口。<br/>
package.json 是 CommonJS 规定的用来描述包的文件,完全符合规范的 package.json 文件应该含有以下字段。 <br/>
name:包的名称,必须是唯一的,由小写英文字母、数字和下划线组成,不能包含空格。 <br/>
description:包的简要说明。 <br/>
version:符合语义化版本识别 规范的版本字符串。<br/>
keywords:关键字数组,通常用于搜索。 <br/>
maintainers:维护者数组,每个元素要包含 name、email (可选) web (可选)字段。<br/>
contributors:贡献者数组,格式与maintainers相同。包的作者应该是贡献者数组的第一个元素。 <br/>
bugs:提交bug的地址,可以是网址或者电子邮件地址。 <br/>
licenses:许可证数组,每个元素要包含 type (许可证的名称)和 url (链接到许可证文本的地址)字段。 <br/>
repositories:仓库托管地址数组,每个元素要包含 type(仓库的类型, git )如url (仓库的地址)和 path (相对于仓库的路径,可选)字段。 <br/>
下面是mocha的package.json:</p>

<pre><code>{
 "name": "mocha",
 "version": "1.8.1",
"description": "simple, flexible, fun test framework",
 "keywords": [
 "mocha",
    "test",
 "bdd",
 "tdd",
 "tap"
],
 "author": {
 "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
 },
"repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/mocha.git"
 },
"main": "./index",
"bin": {
    "mocha": "./bin/mocha",
    "_mocha": "./bin/_mocha"
},
"engines": {
    "node": "&gt;= 0.4.x"
},
"scripts": {
    "test": "make test-all"
 },
"dependencies": {
    "commander": "0.6.1",
    "growl": "1.7.x",
    "jade": "0.26.3",
    "diff": "1.0.2",
    "debug": "*",
    "mkdirp": "0.3.3",
    "ms": "0.3.0"
},
"devDependencies": {
 "should": "*",
    "coffee-script": "1.2"
 },
"readme": "..."
}
</code></pre>

<p>也就是说，这里面提供了完善的信息来告诉npm，怎么样安装、升级、传播。 <br/>
如执行：</p>

<pre><code>npm install -g mocha
</code></pre>

<p>那么，npm将会依据json提供的信息来进行管理。</p>

<h4>4.npm的本地模式与全局模式</h4>

<p>npm默认会从http://npmjs.org上搜索并下载包，并将包安装在当前目录的node_modules子目录下。这种就称为本地模式。也就意味着只能在当前目录使用。如果想在全部地方可用，那就用<code>-g</code>参数。这样包就会安装到NODE_PATH里了，在任何目录都可以使用了。g应该就是global的缩写，很容易记。</p>

<h3>模块（modules）的加载机制</h3>

<p>前面，已经知道模块加载是通过require来进行的。NodeJS的模块可以分为2大类，一类是核心模块、一类是文件模块。核心模块有最高的优先级，如有模块命名冲突，NodeJS总是优先加载核心模块。<br/>
那么，文件模块是如何加载的呢？</p>

<h4>按路径加载模块</h4>

<p>1.如果require按“/”开头，那就是绝对路径进行加载。如require('/home/shenyanchao/module'),将会按照以下优先级尝试加载 /home/shenyanchao/module.js、/home/shenyanchao/module.json、/home/shenyanchao/module.node。 <br/>
2.如果require按“./”或者“../”开头，则是依相对路径来查找模块，这种较为常见。<br/>
3.对于核心模块,比如require('http')，nodeJS是怎么找到的呢，自然是通过NODE_PATH目录加载的。那么对于文件模块，如果不用绝对路径已经相对路径，那么该如何查找呢？ <br/>
如果，使用require('mymodule'),那么NodeJS将首先在当前目录的node_modules目录内进行尝试加载。如果没有找到，那么将会到当前目录的上一级目录的node_modules继续查找，并反复执行，直到根目录为止。 <br/>
例如： 我们在/home/shenyanchao/develop/app.js中使用require('mymodule')，NodeJS的查找路径如下：</p>

<ul>
<li>/home/shenyanchao/develop/node_modules/mymodule.js</li>
<li>/home/shenyanchao/node_modules/mymodule.js</li>
<li>/home/node_modules/mymodule.js</li>
<li>/node_modules/mymodule.js</li>
</ul>


<p>这个时候，明白了加载机制，就可以返回来，看一下模块的本地模式于全局模式来。当以本地模式<code>npm install mocha</code>的时候，会在当前目录建立一个node_modules目录，这就保证了系统内使用require('mocha')时，能够直接使用。而<code>npm install -g mocha</code>相当于把mocha安装到NODE_PATH，这样就使用类似于加载核心模块的形式进行加载了。</p>

<h3>express: JS的MVC框架</h3>

<p>这里介绍来一个强大的Web application Framework for Node。用于进行WEB项目的开发。类似于Java的SpringFramework。很轻量级，简单易用。 <br/>
express将NodeJS的开发，推向了一个新的高度。很有兴趣，待研究！  <br/>
express主页：<a href="http://expressjs.com/">http://expressjs.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《探索式软件测试》读书笔记(1)]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/01/21/exploratory-software-testing-reading-notes-1/"/>
    <updated>2013-01-21T19:14:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/01/21/exploratory-software-testing-reading-notes-1</id>
    <content type="html"><![CDATA[<p>书中，完全以旅游来讲解各种测试方法，从而让晦涩的理论变得浅显易懂。 <br/>
一般情况下，旅游地都会有这样一些区域：</p>

<ul>
<li><strong>商业区</strong>: 早晚交通拥挤，上班紧张。商业区有银行、办公楼、各类商店。对软件来说，指的是“在那里完成实际业务”。</li>
<li><strong>历史区</strong>: 城市一般都有写历史古迹，历史事件吸引着大批的旅游者。对软件来说，就是“历史遗留代码”。</li>
<li><strong>旅游区</strong>: 专门针对旅游者的区域，而一般人是不会去的。这是说故宫、长城吗？软件的有些特性和功能就是专门针对新用户的，老用户则不再使用。</li>
<li><strong>娱乐区</strong>: 旅游者看了所有景点和名胜古迹后，通常是很累的，筋疲力尽之后难免要去一些地方娱乐娱乐的，借此来消磨时间。软件也有这样的辅助特性和功能。</li>
<li><strong>旅馆区</strong>: 是人总是要有个休息的地方，睡一觉。可有时候，“休息”时还是很忙的。软件尤其如此。</li>
<li><strong>破旧区</strong>：每个城市都有阴暗的一面，但也有很多人无限向往之，贫民窟的百万富翁之类的。这些地方尽量不去，但是这些地方也可能存在一些漏洞。</li>
</ul>


<!--more-->


<h3>商业区测试类型</h3>

<p>商业区特点在于，上下班高峰以及午餐时间。并且是工作得以完成的地方。</p>

<blockquote><p><strong>指南测试法</strong>： 测试人员按照用户手册进行操作。 <br/>
各大旅游地，通常都有各种旅游攻略，告诉你应该去哪里，怎么选择路线等等。</p>

<p><strong>卖点测试法</strong>： 按照销售人员对客户演示的顺序（卖点）进行测试。 <br/>
令旅游者向往的任何一个地方一定有吸引他们的理由。</p>

<p><strong>地标测试法</strong>： 选择一个功能点，然后向另外的功能点测试。<br/>
在森林里漫步，首先要定位一个大致的方向，然后从一个地标开始走，走到下一个地标，最终到达目的地。</p>

<p><strong>极限测试法</strong>： 向软件提出很多难以回答的问题。 <br/>
旅游中，你可能会有很多问题要问，你的导游需要来回答你提出的问题。那如何判断一个导游是否真的很牛呢，发挥你的能力，向导游尽可能的发问。</p>

<p><strong>快递测试法</strong>： 专注与数据，保证数据在任何出现的地方都是同一个。<br/>
信息时代，网购盛行，快递更是得到大家青睐。但绝不允许出现的是，快递的东西在整个运输过程中发生了变化。即使是A->B->C->A也是不允许的，通常这个快递公司不会这么傻逼的，因此要绝对保证A->A->A->A，不能开封的说。</p>

<p><strong>深夜／清晨测试法</strong>： 在软件的空闲时段，去测试一些功能。 <br/>
下班后，城市很拥挤，这个时候的商业区是空荡荡的。但是，其实很多人还是在忙碌的运行的，以用来支持第2天的正常运转，比如设备检修，打扫卫生等等。对应与软件来说，这时候通常会有一些数据归档，定时任务等工作。这是软件人员需要关注的。</p>

<p><strong>遍历测试法</strong>： 通过选定一个目标，然后使用可以发现的最短路径来访问目标包含的所有对象。  <br/>
城市内的垃圾车，需要在夜间将各个地方的垃圾运走，垃圾车的司机通常对城市的所有路径都是特别熟悉的，他们通常都能按预先的规划，利用最短路径，将一个地方的垃圾装上，然后另外一家。</p></blockquote>

<h3>历史区测试类型</h3>

<p>主要是针对老功能以及修复代码的测试。</p>

<blockquote><p><strong>恶邻测试法</strong>： 随着测试的深入，发现BUG较多的区域，通常值得反复的测试。<br/>
每个旅游城市都有些不好的地方，旅游者通常被告知避免访问那里。但是也总有人会去的，通常这些地方更值得测试人员关注。</p>

<p><strong>博物馆测试法</strong>： 历史遗留代码值得测试人员多加关注。<br/>
展示古董的博物馆深受旅游者喜爱，但同时也要保证同现代建筑的和谐。</p>

<p><strong>上一版测试法</strong>： 当前产品如果是对先前版本的更新，那就必须运行先前版本的所有场景和测试用例。</p></blockquote>

<h3>娱乐区测试类型</h3>

<p>旅游者除了在繁忙的观光景点之外，还需要安排一些休闲时间。软件需要测试那些辅助特性，而不是主线特性，并确保这2种特性能够结合在一起。</p>

<blockquote><p><strong>配角测试法</strong>：鼓励测试人员，专注于某些特定特性，他们虽然不是主要功能，但是很可能紧邻着主要功能，容易引起别人的注意。 <br/>
导游向你介绍一栋建筑，可能你却毫无兴趣，只关注于建筑边草地上的MM。</p>

<p><strong>深巷测试法</strong>： 测试那些最不可能被用到或者那些最不吸引用户的特性。 <br/>
高质量的旅游是去大家喜闻乐见的地方，质量不好的旅游则是指到了别人不愿意去的地方。</p>

<p><strong>通宵测试法</strong>： 让程序一直运行，而不去关闭他。<br/>
通宵旅游，又称为夜总会之游。很多人都会在夜店狂欢，不断的喝酒，考验人的体力与素质。</p></blockquote>

<h3>旅游区测试类型</h3>

<p>每个重视旅游的城市，都有专供旅游者聚集的地方。旅行通常走马观花，简短。对软件来说，旅游不关心软件是否工作，关心的是快速访问软件的各种功能，仅仅在于到此一游。</p>

<blockquote><p><strong>收藏家测试法</strong>：  收集软件的输出，越多越好。尽可能观察所有的输出结果是否正确。<br/>
旅游区，通常都会有一些特色的产品或者赠品，甚至是门票。而有些游客是很喜欢收集这些东西的，尤其是免费的东西。</p>

<p><strong>长路径测试法</strong>： 测试距离目标功能点尽可能远的特性。指导思想是到达目的地之前尽量多的在应用程序中穿行。<br/>
在旅行中，有可能只是乘坐各种交通工具，往来与各个景点。殊不知，有时候，路上的风景也许更加的宜人，正所谓，慢慢走欣赏啊。</p>

<p><strong>超模测试法</strong>： 关注表面的东西，测试界面。<br/>
旅游中见到的都是美女，这是多么惬意的事情啊，还管什么旅游不旅游的呢。</p>

<p><strong>测一送一法</strong>: 测试同一个应用多个拷贝的情况。<br/>
旅行中，买一送一的促销手段，相比大家都了解。但这里不太一样，通常是从另外一个角度来说的，是说，如果你在一个拷贝上发现了一个缺陷，那么所有的拷贝都有同样的缺陷。</p>

<p><strong>苏格兰酒吧测试法</strong>： 测试者需要穷尽各种努力，来找到很不容易找的功能点，并测试之。<br/>
作者朋友，在旅游中加入了一个苏格兰泡吧团，从而找到很多隐藏于社区的各类酒吧。如果没有他们的带领，可能永远找不到这些地方。适用与大型的项目。</p></blockquote>

<h3>旅馆区测试类型</h3>

<p>休息的地方，远离喧嚣的热门景点。要求测试人员，放过主要的以及最受欢迎的功能，而测试一些经常被忽略或者测试计划中较少描述的次要辅助功能。</p>

<blockquote><p><strong>取消测试法</strong>： 启动操作然后停止它。学会使用取消按钮。 <br/>
任何一个旅行，都有可能因为天气、飞机、或者病痛而被迫中断。</p>

<p><strong>懒汉测试法</strong>： 测试人员做尽量少的实际工作，多使用默认值。程序则需要忙碌的来处理。 <br/>
一个旅游团，总有人不积极参与，那么导游通常需要积极努力，试着吸引懒汉来享受他的旅程。</p></blockquote>

<h3>破旧区测试类型</h3>

<blockquote><p><strong>破坏测试法</strong>： 试图利用每个可能的机会暗中破坏应用程序。让操纵环境变得恶劣。</p>

<p><strong>反叛测试法</strong>： 输入最不可能的数据，或者已知的恶意输入。<br/>
旅行团中，通常有这样的人，当大家都惊叹于某著名标志物时，他却惊呼地上的一只老鼠很迷人。总有一些人是对着干的。</p>

<p><strong>强迫症测试法</strong>： 患有“强迫症”的测试人员，一遍又一遍的输入同样的数据，执行同样的操作。 <br/>
如果步行旅游，但是规定参加它的人不允许踩到地上的任何裂缝，很难想象会有多少人感兴趣。但在测试中，通常会让人有所收获。</p></blockquote>
]]></content>
  </entry>
  
</feed>