<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: interpreter | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/interpreter/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2013-09-04T18:36:49+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式：解释器（interpreter） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/interpreter-in-java/"/>
    <updated>2012-11-02T20:09:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/interpreter-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>解释器模式是一种按照规定语法进行解析的方案，在现在项目中使用较少。正式定义：给定一门语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语句中的句子。</p>

<p>解释器模式有以下几个角色：</p>

<ul>
<li>AbstractExpression抽象解释器   <br/>
具体的解释任务由各个实现类完成。</li>
<li>TerminalExpression终结符表达式  <br/>
实现与文法中的元素相关联的解释操作，通常一个解释器模式中只有一个终结符表达式，但有多个实例，对应不同的终结符。</li>
<li>NonterminalExpression非终结符表达式   <br/>
文法中的每条规则对应于一个非终结表达式。非终结符表达式根据逻辑的复杂程度而增加，原则上每个文法规则都对应一个非终结符表达式。</li>
<li>Context环境角色</li>
</ul>

]]></content>
  </entry>
  
</feed>