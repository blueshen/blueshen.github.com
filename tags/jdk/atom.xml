<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: JDK | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/jdk/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2013-03-12T20:19:01+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式：代理（Proxy） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/proxy-in-java/"/>
    <updated>2012-11-02T16:21:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/proxy-in-java</id>
    <content type="html"><![CDATA[<h2>什么是代理？</h2>

<p>代理是指，本该有A做的工作，现在找一个代理人B，然后由B来进行实际的工作。<br/>
代理，简单来分，可以分为以下两类：</p>

<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>


<!--more-->


<h2>静态代理</h2>

<p>以实现两个数的加法场景为例：</p>

<pre><code>public interface IAdd {
    public int add(int a, int b);
}
</code></pre>

<p>实现类：</p>

<pre><code>public class Add implements IAdd {
    @Override
    public int add(int a, int b) {
        return a + b;
    }
}
</code></pre>

<p>直接使用的话：</p>

<pre><code>Add add = new Add();
add.add(3, 14);
</code></pre>

<p>那么我想在执行加运算时，做一些其他操作怎么办，已有的类ADD无法改，没有源码。这时很容易想到的就是扩展：</p>

<pre><code>public class AddProxy implements IAdd {
    private IAdd add;

    public AddProxy(IAdd add) {
        this.add = add;
    }
    @Override
    public int add(int a, int b) {
        System.out.println("...begin...");
        int result = add.add(3, 14);
        System.out.println("...end...");
        return result;
    }
}
</code></pre>

<p>这样做，没有修改已有的类，并且增加了一些操作，此处为一些提示信息。采用了组合的方式，实现了代理模式。具体使用时，直接使用AddProxy即可。</p>

<pre><code>IAdd add = new AddProxy(new Add());
int result = add.add(3, 14);
</code></pre>

<p>此为<strong>静态代理</strong>也。</p>

<h2>动态代理</h2>

<p>动态代理，是指运行时动态的生成代理类，完成功能。静态代理中，显然AddProxy是编译期已知的了。实现方式，主要有两种：</p>

<ul>
<li>JDK Proxy</li>
<li>Cglib Proxy</li>
</ul>


<h3>JDK Proxy</h3>

<p>Java自身提供了相关的类，来实现动态代理。  <br/>
首先要定义一个<code>java.lang.reflect.InvocationHandler</code>接口实现</p>

<pre><code>import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
/**
* @author shenyanchao
*/
public class AddInvocationHandler implements InvocationHandler {

    private Object target;
    //绑定要代理的目标类
    public void bind(Object target) {
        this.target = target;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args)
        throws Throwable {
        System.out.println("......begin....");
        Object result = method.invoke(target, args);
        System.out.println("......end....");
        return result;
    }
}
</code></pre>

<p>那么在具体使用时，代码如下：</p>

<pre><code>AddInvocationHandler addHandler = new AddInvocationHandler();
IAdd add = new Add();
addHandler.bind(add);
IAdd addProxy = (IAdd) Proxy.newProxyInstance(
            Add.class.getClassLoader(), Add.class.getInterfaces(),
            addHandler);
int jdkResult = addProxy.add(3, 14);
</code></pre>

<p>从代码可见，主要是通过<code>Proxy.newProxyInstance</code>来在运行时生成代理类。需要注意的是，第二个参数必须使用具体实现类Add来获得interfaces，也就是说其代理的类必须实现了接口。<code>addHandler</code>负责绑定要代理的target类，并调用invoke来增强Add功能。</p>

<h3>Cglib Proxy</h3>

<p>JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。 <br/>
要使用CgLib，首先要实现一个CallBack接口的类，由于本例是为了实现method的拦截，因此直接实现MethodInterceptor即可：</p>

<pre><code>import java.lang.reflect.Method;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;
/**
* @author shenyanchao
*/
public class AddInterceptor implements MethodInterceptor {

@Override
public Object intercept(Object obj, Method method, Object[] args,
        MethodProxy proxy) throws Throwable {
        System.out.println("....begin....");
        Object result = proxy.invokeSuper(obj, args);
        System.out.println("....end....");
        return result;
    }
}
</code></pre>

<p>具体使用时：</p>

<pre><code>Enhancer enhancer = new Enhancer();
enhancer.setSuperclass(Add.class);
enhancer.setCallback(new AddInterceptor());
Add add  =  (Add) enhancer.create();
int result = add.add(3, 14);
</code></pre>

<p>通过Enhancer制定需要增强的类，并设置CallBack函数来实现代理与功能增强。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[23个经典JDK设计模式]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/22/design-pattern-in-jdk-index/"/>
    <updated>2012-10-22T20:49:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/22/design-pattern-in-jdk-index</id>
    <content type="html"><![CDATA[<p>下面是JDK中有关23个经典设计模式的示例：</p>

<!--more-->


<h2>Structural（结构模式）</h2>

<p><strong>Adapter:</strong></p>

<p>把一个接口或是类变成另外一种。</p>

<p>● java.util.Arrays#asList()<br/>
● javax.swing.JTable(TableModel)<br/>
● java.io.InputStreamReader(InputStream) <br/>
● java.io.OutputStreamWriter(OutputStream) <br/>
● javax.xml.bind.annotation.adapters.XmlAdapter#marshal()<br/>
● javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal()</p>

<p><strong>Bridge:</strong></p>

<p>把抽象和实现解藕，于是接口和实现可在完全独立开来。</p>

<p>● AWT (提供了抽象层映射于实际的操作系统)<br/>
● JDBC</p>

<p><strong>Composite:</strong></p>

<p>让使用者把单独的对象和组合对象混用。</p>

<p>● javax.swing.JComponent#add(Component) <br/>
● java.awt.Container#add(Component) <br/>
● java.util.Map#putAll(Map) <br/>
● java.util.List#addAll(Collection) <br/>
● java.util.Set#addAll(Collection)</p>

<p><strong>Decorator:</strong></p>

<p>为一个对象动态的加上一系列的动作，而不需要因为这些动作的不同而产生大量的继承类。这个模式在JDK中几乎无处不在，所以，下面的列表只是一些典型的。</p>

<p>● java.io.BufferedInputStream(InputStream) <br/>
● java.io.DataInputStream(InputStream) <br/>
● java.io.BufferedOutputStream(OutputStream) <br/>
● java.util.zip.ZipOutputStream(OutputStream) <br/>
● java.util.Collections#checked[List|Map|Set|SortedSet|SortedMap]()</p>

<p><strong>Facade:</strong></p>

<p>用一个简单的接口包状一组组件，接口，抽象或是子系统。</p>

<p>● java.lang.Class <br/>
● javax.faces.webapp.FacesServlet</p>

<p><strong>Flyweight:</strong></p>

<p>有效率地存储大量的小的对象。</p>

<p>● java.lang.Integer#valueOf(int) <br/>
● java.lang.Boolean#valueOf(boolean) <br/>
● java.lang.Byte#valueOf(byte) <br/>
● java.lang.Character#valueOf(char)</p>

<p><strong>Proxy:</strong></p>

<p>用一个简单的对象来代替一个复杂的对象。</p>

<p>● java.lang.reflect.Proxy <br/>
● RMI</p>

<h2>Creational（创建模式）</h2>

<p><strong>Abstract factory:</strong></p>

<p>创建一组有关联的对象实例。这个模式在JDK中也是相当的常见，还有很多的framework例如Spring。我们很容易找到这样的实例。</p>

<p>● java.util.Calendar#getInstance()  <br/>
● java.util.Arrays#asList() <br/>
● java.util.ResourceBundle#getBundle() <br/>
● java.sql.DriverManager#getConnection() <br/>
● java.sql.Connection#createStatement() <br/>
● java.sql.Statement#executeQuery() <br/>
● java.text.NumberFormat#getInstance() <br/>
● javax.xml.transform.TransformerFactory#newInstance()</p>

<p><strong>Builder:</strong></p>

<p>主要用来简化一个复杂的对象的创建。这个模式也可以用来实现一个 Fluent Interface。</p>

<p>● java.lang.StringBuilder#append() <br/>
● java.lang.StringBuffer#append() <br/>
● java.sql.PreparedStatement <br/>
● javax.swing.GroupLayout.Group#addComponent()</p>

<p><strong>Factory:</strong></p>

<p>简单来说，按照需求返回一个类型的实例。</p>

<p>● java.lang.Proxy#newProxyInstance() <br/>
● java.lang.Object#toString() <br/>
● java.lang.Class#newInstance() <br/>
● java.lang.reflect.Array#newInstance() <br/>
● java.lang.reflect.Constructor#newInstance() <br/>
● java.lang.Boolean#valueOf(String) <br/>
● java.lang.Class#forName()</p>

<p><strong>Prototype:</strong></p>

<p>使用自己的实例创建另一个实例。有时候，创建一个实例然后再把已有实例的值拷贝过去，是一个很复杂的动作。所以，使用这个模式可以避免这样的复杂性。</p>

<p>● java.lang.Object#clone() <br/>
● java.lang.Cloneable</p>

<p><strong>Singleton:</strong></p>

<p>只允许一个实例。在 Effective Java中建议使用Emun.</p>

<p>● java.lang.Runtime#getRuntime() <br/>
● java.awt.Toolkit#getDefaultToolkit() <br/>
● java.awt.GraphicsEnvironment#getLocalGraphicsEnvironment() <br/>
● java.awt.Desktop#getDesktop()</p>

<h2>Behavioral(行为模式)</h2>

<p><strong>Chain of responsibility:</strong></p>

<p>把一个对象在一个链接传递直到被处理。在这个链上的所有的对象有相同的接口（抽象类）但却有不同的实现。</p>

<p>● java.util.logging.Logger#log() <br/>
● javax.servlet.Filter#doFilter()</p>

<p><strong>Command:</strong></p>

<p>把一个或一些命令封装到一个对象中。</p>

<p>● java.lang.Runnable <br/>
● javax.swing.Action</p>

<p><strong>Interpreter:</strong></p>

<p>一个语法解释器的模式。</p>

<p>● java.util.Pattern  <br/>
● java.text.Normalizer <br/>
● java.text.Format</p>

<p><strong>Iterator:</strong></p>

<p>提供一种一致的方法来顺序遍历一个容器中的所有元素。</p>

<p>● java.util.Iterator <br/>
● java.util.Enumeration</p>

<p><strong>Mediator:</strong></p>

<p>用来减少对象单的直接通讯的依赖关系。使用一个中间类来管理消息的方向。</p>

<p>● java.util.Timer <br/>
● java.util.concurrent.Executor#execute() <br/>
● java.util.concurrent.ExecutorService#submit() <br/>
● java.lang.reflect.Method#invoke()</p>

<p><strong>Memento:</strong></p>

<p>给一个对象的状态做一个快照。Date类在内部使用了一个long型来做这个快照。</p>

<p>● java.util.Date <br/>
● java.io.Serializable</p>

<p><strong>Null Object:</strong></p>

<p>这个模式用来解决如果一个Collection中没有元素的情况。</p>

<p>● java.util.Collections#emptyList() <br/>
● java.util.Collections#emptyMap() <br/>
● java.util.Collections#emptySet()</p>

<p><strong>Observer:</strong></p>

<p>允许一个对象向所有的侦听的对象广播自己的消息或事件。</p>

<p>● java.util.EventListener <br/>
● javax.servlet.http.HttpSessionBindingListener <br/>
● javax.servlet.http.HttpSessionAttributeListener <br/>
● javax.faces.event.PhaseListener</p>

<p><strong>State:</strong></p>

<p>这个模式允许你可以在运行时很容易地根据自身内部的状态改变对象的行为。</p>

<p>● java.util.Iterator <br/>
● javax.faces.lifecycle.LifeCycle#execute()</p>

<p><strong>Strategy:</strong></p>

<p>定义一组算法，并把其封装到一个对象中。然后在运行时，可以灵活的使用其中的一个算法。</p>

<p>● java.util.Comparator#compare() <br/>
● javax.servlet.http.HttpServlet <br/>
● javax.servlet.Filter#doFilter()</p>

<p><strong>Template method:</strong></p>

<p>允许子类重载部分父类而不需要完全重写。</p>

<p>● java.util.Collections#sort() <br/>
● java.io.InputStream#skip() <br/>
● java.io.InputStream#read() <br/>
● java.util.AbstractList#indexOf()</p>

<p><strong>Visitor:</strong></p>

<p>作用于某个对象群中各个对象的操作. 它可以使你在不改变这些对象本身的情况下,定义作用于这些对象的新操作.</p>

<p>● javax.lang.model.element.Element 和javax.lang.model.element.ElementVisitor <br/>
● javax.lang.model.type.TypeMirror 和javax.lang.model.type.TypeVisitor</p>

<p>在stakeoverflow也有相应的讨论：</p>

<p><a href="http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns">http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns</a></p>

<p>摘自：<a href="http://www.csdn.net/article/2010-11-29/282644">http://www.csdn.net/article/2010-11-29/282644</a></p>
]]></content>
  </entry>
  
</feed>