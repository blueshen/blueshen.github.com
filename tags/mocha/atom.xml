<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: mocha | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/mocha/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2014-11-25T12:56:14+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Karma来驱动mocha测试]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/03/27/use-karma-to-run-mocha-test/"/>
    <updated>2013-03-27T19:00:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/03/27/use-karma-to-run-mocha-test</id>
    <content type="html"><![CDATA[<h2>从Testacular到Karma的变化</h2>

<p>2013年03月18日，Testacular正式被重命名为Karma。具体原因，讲起来缺也很滑稽。这里面不含有任何的商业成分，只是因为Testacular与Testicular很相似，因此令人感觉尴尬。仅仅此而已，谁让JsTestDriver已经被别人给拿走了。<br/>
安装：</p>

<pre><code>npm install -g karma
</code></pre>

<h2>什么时候使用Karma？</h2>

<ul>
<li>在真实浏览器里测试。</li>
<li>在多种浏览器里进行测试（包括桌面、移动）。</li>
<li>在本地开发环境执行测试。</li>
<li>想在持续集成CI内运行测试。</li>
<li>想在每次保存代码时，自动执行测试。</li>
<li>热衷于terminal小黑屏。</li>
<li>不想陷入令人厌烦的测试生活。</li>
<li>想使用Istanbul自动生成coverage报告。</li>
<li>想在源码中使用RequireJS。</li>
</ul>


<h2>Karma不是Testing Framework</h2>

<p>Karma自从出现，就是一直作为一个Test Runner而存在的，只是用来驱动测试的框架。不过到目前为止，它支持以下流行的测试框架。</p>

<ul>
<li>Mocha</li>
<li>Jasmine</li>
<li>QUnit</li>
</ul>


<!--more-->


<h2>Karma与Test Framework集成</h2>

<p>Karma对各种Test Framework的支持是以插件的模式进行支持的。<br/>
只需要在karma.conf.js进行以下配置（mocha为例）：</p>

<pre><code>frameworks = ['mocha'];

plugins = [
'karma-mocha'
];
</code></pre>

<p>在此处只是配置了一下，具体支持的plugin要在当前目录下进行安装：</p>

<pre><code>npm install karma-mocha
</code></pre>

<p>其他框架依此类推。</p>

<h2>Karma报告</h2>

<p>Karma的报告（reporter）也是以插件模式进行的。</p>

<h4>JUnit Reporter</h4>

<p>首先，要定义reporter类型，在karma.conf.js添加：</p>

<pre><code>reporters = ['junit'];
</code></pre>

<p>如果想更近一步的话，可以配置一下报告的位置。</p>

<pre><code>junitReporter = {
    outputFile: 'junit-report/test-results.xml'
};
</code></pre>

<p>报告配置完了，自然要有依赖啊。执行<code>npm install karma-junit-reporter</code>来安装。然后在加上这个plugin:</p>

<pre><code>plugins = [
    'karma-junit-reporter'
];
</code></pre>

<h4>Coverage Reporter</h4>

<p>同JUnit Reporter一样，首先添加：</p>

<pre><code>reporters = ['coverage'];
</code></pre>

<p>进一步的配置coverage report:</p>

<pre><code>coverageReporter = {
    type : 'cobertura',
    dir : 'coverage/'
};
</code></pre>

<p>其中，type用于指出报告类型；dir用于指出生成报告的存放目录。<br/>
type包括：</p>

<ul>
<li>html (default)</li>
<li>lcov (lcov and html)</li>
<li>lcovonly</li>
<li>text (standard output)</li>
<li>text-summary (standard output)</li>
<li>cobertura (xml format supported by Jenkins)</li>
</ul>


<p>下面，需要安装依赖<code>npm install karma-coverage</code>。并在配置文件内添加：</p>

<pre><code>plugins = [
    'karma-coverage'
];
</code></pre>

<h2>创建一个样例</h2>

<p>1.执行‘karma init’,然后根据提示按Tab键进行相关选择。先生成一个默认的配置文件，这个是可以再修改的。</p>

<p>2.创建一个src文件夹，用于存放待测试的JS代码。然后在创建一个test文件夹，用于存放自己写的单元测试代码。</p>

<p>3.以mocha为例，将mocha集成到karma中，使用karma来驱动测试。这需要在karma.conf.js里进行如下配置：</p>

<pre><code>// Karma configuration
// Generated on Tue Mar 19 2013 20:46:08 GMT+0800 (CST)

// base path, that will be used to resolve files and exclude
basePath = './';

frameworks = ['mocha'];

// list of files / patterns to load in the browser
files = [
    {pattern: 'node_modules/chai/chai.js',include: true},
    'src/*.js',
    'test/*.js'
];


// list of files to exclude
exclude = [
    'karma.conf.js'
];


// use dots reporter, as travis terminal does not support escaping sequences
// possible values: 'dots', 'progress', 'junit', 'teamcity'
// CLI --reporters progress
reporters = ['progress','junit','coverage'];

junitReporter = {
    // will be resolved to basePath (in the same way as files/exclude patterns)
    outputFile: 'junit-report/test-results.xml'
};

preprocessors = {
    'src/*.js': 'coverage'
};

//Code Coverage options. report type available:
//- html (default)
//- lcov (lcov and html)
//- lcovonly
//- text (standard output)
//- text-summary (standard output)
//- cobertura (xml format supported by Jenkins)
coverageReporter = {
    // cf. http://gotwarlost.github.com/istanbul/public/apidocs/
    type : 'cobertura',
    dir : 'coverage/'
};


// web server port
port = 9876;


// cli runner port
runnerPort = 9100;


// enable / disable colors in the output (reporters and logs)
colors = true;


// level of logging
// possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG
logLevel = LOG_DEBUG;


// enable / disable watching file and executing tests whenever any file changes
autoWatch = true;


// Start these browsers, currently available:
// - Chrome
// - ChromeCanary
// - Firefox
// - Opera
// - Safari (only Mac)
// - PhantomJS
// - IE (only Windows)
// CLI --browsers Chrome,Firefox,Safari
browsers = ['Chrome'];


// If browser does not capture in given timeout [ms], kill it
captureTimeout = 6000;


// Continuous Integration mode
// if true, it capture browsers, run tests and exit
singleRun = true;


plugins = [
    'karma-mocha',
    'karma-chrome-launcher',
    'karma-firefox-launcher',
    'karma-junit-reporter',
    'karma-coverage'
];
</code></pre>

<p>4.放入相应的代码到src以及test目录里。执行'karma start'命令, 浏览器将会被打开，然后执行相应的Test。效果如下图： <br/>
<img src="/images/blog/karma-chrome.png" alt="Karma in Chrome" /></p>

<p>完整样例代码： <br/>
<a href="https://github.com/blueshen/Karma-mocha-example">https://github.com/blueshen/Karma-mocha-example</a></p>

<h2>IntelliJ IDEA集成</h2>

<p>为了在项目中开发方便，那么在开发中集成到IDE中，会节省N多时间的。下面就先来说说于IDEA的集成。 <br/>
1.安装NodeJS插件： Settings --> IDE Settings --> Plugins --> Browse repositories --> NodeJS  选中，然后右键Download and Install进行安装。重启后成功安装。 <br/>
2.配置Karma Server: 从菜单Run --> Edit Configurations... -->点击 ‘+’新建一个Node.js类型的配置。出现以下的界面：  <br/>
<img src="/images/blog/karma-node-server.png" alt="karma-node-server" /></p>

<p>其中：  <br/>
Name： 任意，本处为Karma node Server <br/>
Path to Node: node可执行全路径。$NODE_PATH/bin/node   <br/>
Working Directory: 当前项目的跟路径 <br/>
Path to Node App JS File: 此处为karma的可执行全路径。 <br/>
Application Parameters: 要执行的命令，此处为start   <br/>
Environment variables: 就是环境变量了。此处我定义了CHROME_BIN来指出CHROME浏览器路径。</p>

<p>3.配置Karma run   <br/>
同Karma Server，只是修改Application Parameters为run
<img src="/images/blog/karma-node-run.png" alt="karma-node-run" /></p>

<p>配置成功后，运行Karma node Server可以看到浏览器就可以正常启动了。console也正确的输出。如同在terminal里执行一般。需要注意的是，本地开发时，需要将<code>singleRun=false</code>,也就是说执行完测试之后不退出。只有在CI环境下才用true。</p>

<p>在浏览器启动之后，如果修改了源代码，Test能否自动执行呢？可以将<code>autoWatch=true</code>,这样当你修改代码后，保存后能自动执行，方便开发了。如果‘autoWatch=false’了，那么这时间就要执行Karma run了，用于在Karma Server上重新执行。</p>
]]></content>
  </entry>
  
</feed>