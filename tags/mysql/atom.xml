<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: mysql | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/mysql/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2014-11-14T14:02:34+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web系统性能调优常用技巧]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/09/24/performance-tuning-in-web-test/"/>
    <updated>2013-09-24T18:02:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/09/24/performance-tuning-in-web-test</id>
    <content type="html"><![CDATA[<h4>目标Web系统</h4>

<p>apache + tomcat + mysql + linux, 介绍如何定位瓶颈与调优</p>

<h4>Tomcat</h4>

<p>按照官方默认配置。 <br/>
并发150正常;达到210时，报connection refuse</p>

<p>$TOMCAT_HOME/conf/server.xml中</p>

<pre><code>&lt;Connector port="8080" protocol="HTTP/1.1"      connectionTimeout="20000" 
               redirectPort="8443" URIEncoding="UTF-8"/&gt;
</code></pre>

<p>maxThreads 默认值是200
acceptCount 默认值是100</p>

<p>解决方法：显式指明以上2项，并提高数值。并可配合min/maxSpareThreads</p>

<p>参数文档： <a href="http://tomcat.apache.org/tomcat-6.0-doc/config/http.html">http://tomcat.apache.org/tomcat-6.0-doc/config/http.html</a></p>

<!--more-->


<p>继续增加并发数，出现以下现象：</p>

<ul>
<li>420并发，观察到Jmeter的聚合报告有明显卡顿现象。</li>
<li><p>Noah监控，显示CPU使用率下降。大锯齿出现。</p>

<p>问题分析：</p>

<pre><code>  在加压过程中，对tomcat的JVM情况进行监控。出现FullGC,每次大概4s .
</code></pre></li>
</ul>


<p>如何监控GC吗？</p>

<pre><code>jstat -gcutil 3950 3000 5

  S0     S1         E          O      P       YGC     YGCT    FGC       FGCT     GCT   
  0.00  47.86  66.10   6.55  99.92      7       0.087     0         0.000    0.087
  0.00  47.86  66.90   6.55  99.94      7       0.087     0         0.000    0.087
  0.00  47.86  67.30   6.55  99.94      7       0.087     0         0.000    0.087
  0.00  47.86  67.30   6.55  99.94      7       0.087     0         0.000    0.087
  0.00  47.86  67.30   6.55  99.94      7       0.087     0         0.000    0.087
</code></pre>

<p>解决方法：</p>

<pre><code>     $TOMCAT_HOME/bin/catalina.sh   第一行添加
    export CATALINA_OPTS="-Xmx3500m -Xms2048m -XX:PermSize=256m XX:MaxPermSize=512m -Xss128k"
</code></pre>

<p>JAVA_OPTS   VS   CATALINA_OPTS（推荐使用）   <br/>
<strong>差别</strong>：JAVA_OPTS start run stop   适用所有JVM</p>

<pre><code>           CATALINA_OPTS   start run    专门配置tomcat    
</code></pre>

<p>tomcat默认-client ，production环境加-server</p>

<p>JVM参数文档：<a href="http://kenwublog.com/docs/java6-jvm-options-chinese-edition.htm">http://kenwublog.com/docs/java6-jvm-options-chinese-edition.htm</a></p>

<h5>Tomcat executor</h5>

<p>据信使用executor后，能在实际中有更好的性能以及稳定性！更为重要的是能在多个connector之间共用。</p>

<pre><code>&lt;Executor name="tomcatThreadPool" namePrefix="catalina-exec-" maxThreads="1000" minSpareThreads="25"/&gt;

&lt;Connector executor="tomcatThreadPool"  port="8080" protocol="HTTP/1.1"   connectionTimeout="20000"  redirectPort="8443" /&gt;  
</code></pre>

<p>此时，connector再使用maxThreads等属性将被忽略。</p>

<h5>Tomcat Connector protocol</h5>

<ul>
<li><p>bio   默认模式，性能低下，无任何优化，阻塞IO模式</p>

<p>  protocol = "org.apache.coyote.http11.Http11Protocol" or HTTP/1.1(for http connector)
  protocol = "org.apache.jk.server.JkCoyoteHandler" or AJP/1.3(for ajp connector)</p></li>
<li><p>nio   Java的异步io技术，非阻塞 IO</p>

<p>  protocol = "org.apache.coyote.http11.Http11NioProtocol"(for http connector)
  protocol = "org.apache.coyote.ajp.AjpProtocol"(for ajp connector)</p></li>
<li><p>apr  需要安装apr(Apache Portable Runtime)和Native。</p>

<p>  protocol = "org.apache.coyote.http11.Http11AprProtocol"(for http connector)
  protocol = "org.apache.coyote.ajp.AjpAprProtocol"  (for ajp connector)</p></li>
</ul>


<p>参考文档：  <br/>
&lt;http://tomcat.apache.org/tomcat-6.0-doc/config/http.html#Connector Comparison></p>

<p><a href="http://tomcat.apache.org/tomcat-6.0-doc/config/ajp.html">http://tomcat.apache.org/tomcat-6.0-doc/config/ajp.html</a></p>

<h5>MySQL</h5>

<p>大并发下，响应时间如何提高，绝大部分瓶颈都处于数据库端。</p>

<p>与数据库的连接，使用JDBC连接池</p>

<p>slow query监控：   <br/>
1. 开启慢查询 my.cnf</p>

<pre><code>long_query_time = 2
log-slow-queries =  slow.log
</code></pre>

<p>2.使用mysqldumpslow分析log</p>

<pre><code>mysqldumpslow -t 10 -s t  slow.log
</code></pre>

<p>解决：</p>

<ul>
<li>1.SQL调优   （http://coolshell.cn/articles/1846.html）</li>
<li>2.走类似lucene索引，空间换时间（idea实际测试中，吞吐提升7倍）</li>
<li>3.使用NoSQL?</li>
</ul>


<p>$MYSQL_HOME/etc/my.cnf  或者 my.ini（windows）</p>

<p>主要影响性能参数：</p>

<pre><code>max-connections = 3000     会话数上限
max_connect_errors = 10000    允许的最大连接错误量
query_cache_size =128M    查询缓存
query_cache_limit = 2M   小于这么大的才缓存，保护查询缓存
sort_buffer_size =256M    排序order by 或 group by 使用
</code></pre>

<p>参考：<a href="http://www.ha97.com/4110.html">http://www.ha97.com/4110.html</a></p>

<h4>Apache</h4>

<p>处理静态资源，无法处理动态（需要应用服务器支持）</p>

<p>静态资源直接交给apache处理</p>

<p>ab 命令进行测试，达到1000并发很easy</p>

<pre><code>ab -k -c 1000  -n 1000000  http://hostname:port/path
</code></pre>

<p>参考：<a href="http://httpd.apache.org/docs/2.2/programs/ab.html">http://httpd.apache.org/docs/2.2/programs/ab.html</a></p>

<h5>开启MPM支持大并发</h5>

<table border="1px">
<thead>
<th>Mpm模式</th><th>并发方式</th><th>内存占用</th><th>并发性能</th>
</thead>
<tbody>
<tr>
<td>prefork</td><td>进程</td><td>高</td><td>低并发下，吞吐率高</td>
</tr>
<tr>
<td>worker</td><td>进程+线程</td><td>低</td><td>支持海量并发</td>
</tr>
</tbody>
</table>


<p>确定apache模式命令：</p>

<pre><code>./httpd –l
</code></pre>

<p>输出：</p>

<pre><code>Compiled in modules:
core.c
worker.c
http_core.c
mod_so.c
</code></pre>

<p>修改httpd-mpm.conf</p>

<pre><code>&lt;IfModule mpm_worker_module&gt;
    StartServers          2
    MaxClients          150
    MinSpareThreads      25
    MaxSpareThreads      75
    ThreadsPerChild      25
    MaxRequestsPerChild   0
&lt;/IfModule&gt;
</code></pre>

<p>上面的配置需要满足以下公式：</p>

<pre><code>     ThreadLimit &gt;= ThreadsPerChild    
     MaxClients &lt;= ServerLimit * ThreadsPerChild 必须是ThreadsPerChild的倍数     
     MaxSpareThreads &gt;= MinSpareThreads+ThreadsPerChild    
</code></pre>

<h4>Linux</h4>

<h5>too many open files error</h5>

<p><code>ulimit -a</code>进行查看
修改<code>vi /etc/security/limits.conf</code></p>

<p>添加：</p>

<pre><code>*    -     nofile    65535
</code></pre>

<p>参考文档： <br/>
 <a href="http://blog.csdn.net/lifeibo/article/details/5972356">http://blog.csdn.net/lifeibo/article/details/5972356</a></p>

<p>Http连接是基于TCP的，这个时候需要对linux服务器进行优化。 <br/>
<strong>三次握手</strong></p>

<p><img src="/images/blog/2013/three-times-handshake.png" alt="三次握手" /></p>

<p><strong>四次挥手</strong></p>

<p><img src="/images/blog/2013/four-wave.png" alt="四次挥手" /></p>

<p>如何查看服务器TCP状态？  <br/>
命令：</p>

<pre><code>netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'
</code></pre>

<p>输出：</p>

<pre><code>ESTABLISHED 1423
FIN_WAIT1 1
FIN_WAIT2 262
SYN_SENT 1
TIME_WAIT 962
</code></pre>

<p>优化TCP连接相关参数：</p>

<p><code>vi /etc/sysctl.conf</code></p>

<pre><code>net.ipv4.tcp_fin_timeout = 30  保持在FIN-WAIT-2的时间。默认60秒。2.2内核是180秒
net.ipv4.tcp_keepalive_time = 1200     长连接keepalive打开，发送的频率。默认7200（2H）
net.ipv4.tcp_tw_reuse = 1     默认0，处于TIME-WAIT状态的socket可以用于新的TCP连接
net.ipv4.tcp_tw_recycle = 1   默认0，TIME-WAIT状态的sockets快速回收
net.ipv4.ip_local_port_range = 1024    65000 向外连接的端口范围，默认32768~61000
net.ipv4.tcp_max_syn_backlog = 8192  默认1024/128,未获得客户端连接请求并保存在队列中的最大数目。
net.ipv4.tcp_max_tw_buckets = 5000   默认180000，系统处理的最大TIME_WAIT数目。
net.ipv4.route.gc_timeout = 100  路由缓存刷新频率，失败多长时间跳到另一个。默认300.
net.ipv4.tcp_syncookies = 1 默认0，SYN队列溢出，启用cookies处理。
net.ipv4.tcp_syn_retries = 1       新建连接发送SYN次数，默认5，180秒
net.ipv4.tcp_synack_retries = 1    3次握手的第二步，重试几次。默认5.
</code></pre>

<p><code>/sbin/sysctl -p</code>   生效</p>

<p>参考文档：<a href="http://www.itlearner.com/article/4792">http://www.itlearner.com/article/4792</a></p>

<p>备注：此文由本人在公司内做的PPT分享制作而成，内容有些省略以及跳跃。欢迎留言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySql性能监控]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/01/10/mysql-monitor/"/>
    <updated>2013-01-10T19:03:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/01/10/mysql-monitor</id>
    <content type="html"><![CDATA[<h2>用mysqldumpslow分析mysql的slow query log</h2>

<p>mysql有一个功能就是可以log下来运行的比较慢的sql语句，默认是没有这个log的，为了开启这个功能，要修改my.cnf或者在mysql启动的时候加入一些参数。如果在my.cnf里面修改，需增加如下几行</p>

<pre><code>long_query_time = 1
log-slow-queries = /var/youpath/slow.log
log-queries-not-using-indexes[这个在mysql4.10以后才被引入]
</code></pre>

<p>long_query_time 是指执行超过多久的sql会被log下来，这里是1秒。<br/>
log-slow-queries 设置把日志写在那里，可以为空，系统会给一个缺省的文件host_name-slow.log，我生成的log就在mysql的data目录 <br/>
log-queries-not-using-indexes 就是字面意思，log下来没有使用索引的query。 <br/>
把上述参数打开，运行一段时间，就可以关掉了，省得影响生产环境。</p>

<!--more-->


<p>接下来就是分析了，我这里的文件名字叫host-slow.log。   <br/>
先mysqldumpslow –help以下，我主要用的是</p>

<pre><code>-s ORDER what to sort by (t, at, l, al, r, ar etc), ‘at’ is default
-t NUM just show the top n queries
-g PATTERN grep: only consider stmts that include this string
</code></pre>

<p>-s，是order的顺序，说明写的不够详细，俺用下来，包括看了代码，主要有
c,t,l,r和ac,at,al,ar，分别是按照query次数，时间，lock的时间和返回的记录数来排序，前面加了a的时倒叙  <br/>
-t，是top n的意思，即为返回前面多少条的数据  <br/>
-g，后边可以写一个正则匹配模式，大小写不敏感的</p>

<pre><code>mysqldumpslow -s c -t 20 host-slow.log
mysqldumpslow -s r -t 20 host-slow.log
</code></pre>

<p>上述命令可以看出访问次数最多的20个sql语句和返回记录集最多的20个sql。</p>

<pre><code>mysqldumpslow -t 10 -s t -g “left join” host-slow.log    
</code></pre>

<p>这个是按照时间返回前10条里面含有左连接的sql语句。 <br/>
用了这个工具就可以查询出来那些sql语句是性能的瓶颈，进行优化，比如加索引，该应用的实现方式等。</p>

<h2>linux 系统整体性能查看的方法:</h2>

<p>vmstat 10 -----每10秒刷新一次</p>

<pre><code>procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------   
r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st   
0  0      0  56508  10968  68380    0    0   184    40 1021   88  3 14 78  5  0    
0  0      0  56508  10976  68376    0    0     0     3 1251   49  0  0 100  0  0    
0  0      0  56508  10976  68376    0    0     0     0 1250   50  0  0 100  0  0    
0  0      0  56508  10984  68376    0    0     0     4 1251   51  0  0 100  0  0    
0  0      0  56508  10984  68376    0    0     0     0 1250   48  0  0 100  0  0    
0  0      0  56508  10984  68376    0    0     0     0 1250   50  0  0 100  0  0   
0  0      0  56508  10984  68376    0    0     0     0 1250   51  0  0 100  0  0      
0  0      0  56508  10992  68376    0    0     0     2 1250   49  0  0 100  0  0    
0  0      0  56508  10992  68376    0    0     0     0 1250   51  0  0 100  0  0   
</code></pre>

<p>procs: <br/>
r-->;在运行队列中等待的进程数  <br/>
b-->;在等待io的进程数 <br/>
w-->;可以进入运行队列但被替换的进程</p>

<p>memory  <br/>
swap-->;现时可用的交换内存（k表示） <br/>
free-->;空闲的内存（k表示）</p>

<p>pages <br/>
re－－》回收的页面 <br/>
mf－－》非严重错误的页面 <br/>
pi－－》进入页面数（k表示） <br/>
po－－》出页面数（k表示） <br/>
fr－－》空余的页面数（k表示） <br/>
de－－》提前读入的页面中的未命中数 <br/>
sr－－》通过时钟算法扫描的页面</p>

<p>disk 显示每秒的磁盘操作。 s表示scsi盘，0表示盘号</p>

<p>fault 显示每秒的中断数 <br/>
in－－》设备中断  <br/>
sy－－》系统中断 <br/>
cy－－》cpu交换</p>

<p>cpu 表示cpu的使用状态 <br/>
cs－－》用户进程使用的时间 <br/>
sy－－》系统进程使用的时间 <br/>
id－－》cpu空闲的时间</p>

<p>其中: <br/>
如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。 <br/>
如果pi，po 长期不等于0，表示内存不足。 <br/>
如果disk 经常不等于0， 且在 b中的队列 大于3， 表示 io性能不好。</p>

<p>每100s显示一次mysql 运行的状态:</p>

<pre><code>mysqladmin extended -i 100 –r
</code></pre>

<p>显示mysql服务器的线程列表</p>

<pre><code>mysqladmin -u root -p process    
Enter password:
+----+------+-----------+----+---------+------+-------+------------------+
| Id | User | Host      | db | Command | Time | State | Info             |
+----+------+-----------+----+---------+------+-------+------------------+
| 12 | root | localhost |    | Query   | 0    |       | show processlist |
+----+------+-----------+----+---------+------+-------+------------------+
</code></pre>

<p>相关命令：</p>

<p>一，获取mysql用户下的进程总数</p>

<pre><code>ps -ef | awk '{print $1}' | grep "mysql" | grep -v "grep" | wc-1
</code></pre>

<p>二，主机性能状态</p>

<pre><code>[root@ ~]# uptime
</code></pre>

<p> 13:05:52 up 53 days, 52 min,  1 user,  load average: 0.00, 0.00, 0.00</p>

<p>三，CPU使用率 <br/>
top 或 vmstat  <br/>
四，磁盘IO量  <br/>
vmstat 或  iostat <br/>
五，swap进出量[内存] <br/>
free  <br/>
六，数据库性能状态 <br/>
(1)QPS(每秒Query量) <br/>
QPS = Questions(or Queries) / seconds  <br/>
mysql > show status like 'Question'; <br/>
(2)TPS(每秒事务量) <br/>
TPS = (Com_commit + Com_rollback) / seconds
mysql > show status like 'Com_commit';  <br/>
mysql > show status like 'Com_rollback'; <br/>
(3)key Buffer 命中率  <br/>
key_buffer_read_hits = (1-key_reads / key_read_requests) * 100% <br/>
key_buffer_write_hits = (1-key_writes / key_write_requests) * 100%  <br/>
mysql> show status like 'Key%'; <br/>
(4)InnoDB Buffer命中率  <br/>
innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%  <br/>
mysql> show status like 'innodb_buffer_pool_read%';   <br/>
(5)Query Cache命中率  <br/>
Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;  <br/>
mysql> show status like 'Qcache%'; <br/>
(6)Table Cache状态量  <br/>
mysql> show status like 'open%';  <br/>
(7)Thread Cache 命中率  <br/>
Thread_cache_hits = (1 - Threads_created / connections ) * 100%  <br/>
mysql> show status like 'Thread%';  <br/>
mysql> show status like 'Connections';   <br/>
(8)锁定状态   <br/>
mysql> show status like '%lock%';  <br/>
(9)复制延时量  <br/>
mysql > show slave status  <br/>
(10) Tmp Table 状况(临时表状况) <br/>
mysql > show status like 'Create_tmp%';  <br/>
(11) Binlog Cache 使用状况  <br/>
mysql > show status like 'Binlog_cache%'; <br/>
(12) Innodb_log_waits 量  <br/>
mysql > show status like 'innodb_log_waits';</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysqldump命令使用]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/12/04/mysqldump/"/>
    <updated>2012-12-04T15:32:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/12/04/mysqldump</id>
    <content type="html"><![CDATA[<p>mysqldump命令用来备份数据库，默认会导出一整条insert语句，虽说执行起来会快一些。但是遇到大表，很可能因为缓冲区过载而挂掉。</p>

<p>mysqldump --skip-opt 加入这个参数，就可以导出多条独立的insert语句。</p>

<p>例如：</p>

<pre><code>mysqldump --skip-opt -uroot -p database tablename &gt; script.sql
</code></pre>
]]></content>
  </entry>
  
</feed>