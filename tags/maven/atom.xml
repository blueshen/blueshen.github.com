<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: maven | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/maven/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2013-09-04T18:36:49+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sonar的安装与使用]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/09/04/use-sonar/"/>
    <updated>2013-09-04T17:02:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/09/04/use-sonar</id>
    <content type="html"><![CDATA[<h3>什么是Sonar？</h3>

<p><a href="http://www.sonarqube.org/">Sonar</a>是一个开源的代码质量管理平台。它能对代码进行如下7个维度的管理。</p>

<p><img src="http://www.sonarqube.org/wp-content/themes/sonar/images/7axes.png" alt="" />
使用插件，它可以对20多种语言进行代码质量管理，这其中包括Java，C#，C/C++,PL/SQL等等。</p>

<h3>安装Sonar</h3>

<p>1.下载sonar,地址<a href="http://www.sonarqube.org/downloads/">http://www.sonarqube.org/downloads/</a>。通常选取稳定版本下载即可，这是一个zip文件。 <br/>
2.解压下载的sonar到一个目录。我们称这个解压后的路径为SONAR_HOME  <br/>
3.进入$SONAR_HOME/bin/${os-version}/,找到sonar.sh,执行<code>./sonar.sh console</code>即可。在windows下是StartSonar.bat。<br/>
4.现在进入<a href="http://localhost:9000">http://localhost:9000</a>,就看到了界面。默认的登录使用admin:admin</p>

<p>这个时候，Sonar已经运行啦。但是在生产环境是不行的。上面跑起来的只是一个样例，使用的是h2内存数据库。我们可不想重启服务后，生产环境的数据都没了。</p>

<!--more-->


<h3>配置Sonar数据库</h3>

<p>1.首先新建一个数据库。</p>

<pre><code>CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;  
grant all privileges on sonar.* to 'sonar'@'%' identified by '你的密码';  
flush privileges; 
</code></pre>

<p>这样就准备好了数据库sonar,并授权给sonar这个用户。</p>

<p>2.找到$SONAR_HOME/conf/sonar.properties。
注释掉默认的数据库配置，然后配上自己的数据库信息即可。这里以mysql为例。</p>

<pre><code># Comment the following line to deactivate the default embedded database.
#sonar.jdbc.url:                            jdbc:h2:tcp://localhost:9092/sonar
#sonar.jdbc.driverClassName:                org.h2.Driver

-------------------
# The schema must be created first.
</code></pre>

<p>sonar.jdbc.username:                       sonar
sonar.jdbc.password:                       sonar</p>

<pre><code>#----- MySQL 5.x
# Comment the embedded database and uncomment the following line to use MySQL
sonar.jdbc.url:                            jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true

# Optional properties
sonar.jdbc.driverClassName:                com.mysql.jdbc.Driver
</code></pre>

<p>配置好之后，这样所有的数据都会存放到mysql内啦。不用再担心数据问题啦。要添加其他数据库，同理。</p>

<h3>把Sonar变为中文</h3>

<p>英文看这不方便啊。有2种方法可以将Sonar变为中文界面。</p>

<p>1.用管理员登录后，在Update Center种找到Localization里的Chinese Pack安装就可以了。<br/>
2.直接下载<a href="http://repository.codehaus.org/org/codehaus/sonar-plugins/l10n/sonar-l10n-zh-plugin/1.6/sonar-l10n-zh-plugin-1.6.jar">http://repository.codehaus.org/org/codehaus/sonar-plugins/l10n/sonar-l10n-zh-plugin/1.6/sonar-l10n-zh-plugin-1.6.jar</a>这个插件jar包到$SONAR_HOME/extensions/plugins内，重启即可。</p>

<h3>把Sonar放到JEE容器内</h3>

<p>默认的情况下，sonar启动是采用内置的jetty的，为了方便管理，一般在生产环境可以放到JEE容器内，这里就以Tomcat为例了。 <br/>
Sonar在经过上面几步的配置后，已经满足了基本的需求。接下来就可以进入到$SONAR_HOME/war/内。执行build-war命令。这样就生成了一个sonar.war，把这个war包发布到Tomcat即可。</p>

<h3>如何对源码进行检测</h3>

<p>1.配置maven的settings.xml,添加一下内容：</p>

<pre><code>    &lt;profile&gt;
         &lt;id&gt;sonar&lt;/id&gt;
         &lt;activation&gt;
             &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
         &lt;/activation&gt;
         &lt;properties&gt;
              &lt;sonar.jdbc.url&gt;
              jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;amp;characterEncoding=utf8
              &lt;/sonar.jdbc.url&gt;
              &lt;sonar.jdbc.driver&gt;com.mysql.jdbc.Driver&lt;/sonar.jdbc.driver&gt;
              &lt;sonar.jdbc.username&gt;sonar&lt;/sonar.jdbc.username&gt;
              &lt;sonar.jdbc.password&gt;sonar&lt;/sonar.jdbc.password&gt;
             &lt;sonar.host.url&gt;http://localhost:9000/sonar&lt;/sonar.host.url&gt;
         &lt;/properties&gt;
      &lt;/profile&gt;
</code></pre>

<p>其中的数据库配置以及sonar主机地址都依据实际进行修改即可。 <br/>
2.在maven项目种执行</p>

<pre><code>mvn clean install
mvn sonar:sonar
</code></pre>

<p>3.打开sonar主页，就可以看到结果了。</p>

<h3>Sonar与Jenkins的集成。</h3>

<p>1.安装<a href="http://docs.codehaus.org/display/SONAR/Jenkins+Plugin">jenkins-sonar-plugin</a>到Jenkins内。  <br/>
2.在Jenkins里的系统配置中，填写Sonar安装信息。  <br/>
3.在Jenkins的JOB中，配置post-build action中添加上Sonar即可。这样在项目构建后，会自动的执行Sonar分析。并将结果放在首页进行展现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从Github发布jar包到Maven Central]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/06/19/publishing-from-github-to-maven-central/"/>
    <updated>2013-06-19T19:50:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/06/19/publishing-from-github-to-maven-central</id>
    <content type="html"><![CDATA[<p>除非你的项目是Apache或者Codehaus管理的，否则你是不可能直接把artifacts发布到Maven Central的。然而，Sonatype提供了它们的Nexus repositories,我们可以将开源项目提交上去，然后会自动同步到Maven Central。</p>

<p>下面介绍下如何做：</p>

<h3>准备工作</h3>

<p>1.添加source code management信息到pom.xml:</p>

<pre><code>&lt;scm&gt;
    &lt;connection&gt;scm:git:git@github.com:blueshen/ut-maven-plugin.git&lt;/connection&gt;
    &lt;developerConnection&gt;scm:git:git@github.com:blueshen/ut-maven-plugin.git&lt;/developerConnection&gt;
    &lt;url&gt;git@github.com:blueshen/ut-maven-plugin.git&lt;/url&gt;
&lt;/scm&gt;
</code></pre>

<p>2.创建GPG的密钥对并发布公钥。参看<a href="https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven">Sonatype documentation</a>的具体步骤.推荐使用Linux,Mac来发布。</p>

<blockquote><p><code>gpg --gen-key</code> 创建key  <br/>
<code>gpg --list-keys</code> 查看所有的key <br/>
<code>gpg --send-keys --keyserver pool.sks-keyservers.net yourkey</code>   发布你的key到服务器上</p></blockquote>

<p>3.确保你的工程POM符合<a href="https://docs.sonatype.org/display/Repository/Central+Sync+Requirements">要求</a><br/>
4.创建一个<a href="https://issues.sonatype.org/">Sonatype JIRA</a>账户，并发布一个ticket来让Nexus repository建立。用户名，密码后面要用的。这中间牵涉到人工操作，会花费一些时间。</p>

<!--more-->


<h3>使用Maven来发布到Sonatype Nexus repository</h3>

<h4>pom.xml配置有2种方法：</h4>

<p>1.添加maven-release-plugin到pom.xml:</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.2.2&lt;/version&gt;
    &lt;configuration&gt;
        &lt;arguments&gt;-Dgpg.passphrase=${gpg.passphrase}&lt;/arguments&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<p>添加Sonatype repositories:</p>

<pre><code>&lt;distributionManagement&gt;
    &lt;snapshotRepository&gt;
        &lt;id&gt;sonatype-nexus-snapshots&lt;/id&gt;
        &lt;name&gt;Sonatype Nexus snapshot repository&lt;/name&gt;
        &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;
    &lt;/snapshotRepository&gt;
    &lt;repository&gt;
        &lt;id&gt;sonatype-nexus-staging&lt;/id&gt;
        &lt;name&gt;Sonatype Nexus release repository&lt;/name&gt;
        &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;
    &lt;/repository&gt;
&lt;/distributionManagement&gt;
</code></pre>

<p>设置artifact signing:</p>

<pre><code>&lt;profiles&gt;
    &lt;profile&gt;
        &lt;id&gt;release-sign-artifacts&lt;/id&gt;
        &lt;activation&gt;
            &lt;property&gt;
                &lt;name&gt;performRelease&lt;/name&gt;
                &lt;value&gt;true&lt;/value&gt;
            &lt;/property&gt;
        &lt;/activation&gt;
        &lt;build&gt;
            &lt;plugins&gt;
                &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;
                    &lt;version&gt;1.4&lt;/version&gt;
                    &lt;configuration&gt;
                        &lt;passphrase&gt;${gpg.passphrase}&lt;/passphrase&gt;
                    &lt;/configuration&gt;
                    &lt;executions&gt;
                        &lt;execution&gt;
                            &lt;id&gt;sign-artifacts&lt;/id&gt;
                            &lt;phase&gt;verify&lt;/phase&gt;
                            &lt;goals&gt;
                                &lt;goal&gt;sign&lt;/goal&gt;
                            &lt;/goals&gt;
                        &lt;/execution&gt;
                    &lt;/executions&gt;
                &lt;/plugin&gt;
            &lt;/plugins&gt;
        &lt;/build&gt;
    &lt;/profile&gt;
&lt;/profiles&gt;
</code></pre>

<p>2.直接添加sonatype parent到POM.XML（推荐）</p>

<pre><code>&lt;parent&gt;
    &lt;groupId&gt;org.sonatype.oss&lt;/groupId&gt;
    &lt;artifactId&gt;oss-parent&lt;/artifactId&gt;
    &lt;version&gt;7&lt;/version&gt;
&lt;/parent&gt;
</code></pre>

<h4>maven settings.xml配置</h4>

<p>编辑或者创建~/.m2/settings.xml并包含验证信息:</p>

<pre><code>&lt;settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;
    &lt;servers&gt;
        &lt;server&gt;
            &lt;id&gt;sonatype-nexus-snapshots&lt;/id&gt;
            &lt;username&gt;myusername&lt;/username&gt;
            &lt;password&gt;mypassword&lt;/password&gt;
        &lt;/server&gt;
        &lt;server&gt;
            &lt;id&gt;sonatype-nexus-staging&lt;/id&gt;
            &lt;username&gt;myusername&lt;/username&gt;
            &lt;password&gt;mypassword&lt;/password&gt;
        &lt;/server&gt;
    &lt;/servers&gt;

    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;sign&lt;/id&gt;
            &lt;activation&gt;
                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
            &lt;/activation&gt;
            &lt;properties&gt;
                &lt;gpg.passphrase&gt;mypassphrase&lt;/gpg.passphrase&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;
&lt;/settings&gt;
</code></pre>

<p>Maven有一个<a href="http://maven.apache.org/guides/mini/guide-encryption.html">避免使用明文的方法</a>,但我还没试用过。</p>

<h3>准备一个release版本</h3>

<p>为了准备一个release版本, 执行:</p>

<pre><code>$ mvn release:clean    
$ mvn release:prepare
</code></pre>

<p><a href="http://maven.apache.org/plugins/maven-release-plugin/examples/prepare-release.html">参考这个</a>.这里具体做了以下工作：如果你的工程的版本是0.1-SNAPSHOT. 准备一个发布版本会去掉-SNAPSHOT后缀，然后提交到github，并将这时的代码打一个tag。同时，更新本地项目到0.2-SNAPSHOT版本.</p>

<p>如果你要撤销release,可以使用<code>git reset --hard HEAD~2</code>进行<a href="http://stackoverflow.com/a/6866485/150884">回退</a>,使用<code>git tag -d ut-maven-plugin-0.1</code><a href="http://nathanhoad.net/how-to-delete-a-remote-git-tag">删除Tag</a>,然后使用<code>git push origin :refs/tags/ut-maven-plugin-0.1</code>提交.</p>

<h3>发布到Sonatype</h3>

<p>1.如果一切OK，你就可以使用<a href="http://maven.apache.org/plugins/maven-release-plugin/examples/perform-release.html">mvn release:perform</a>来发布工程到Sonatype。<br/>
2.登录到Sonatype Nexus，在Staging Repositories找到你的artifacts。 <br/>
3.点击close,关闭后，点击Release发布artifacts。Sonatype有一些<a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt">很好的指引</a>. 你可以使用<a href="http://www.sonatype.com/books/nexus-book/reference/staging-sect-managing-plugin.html">Maven repository management plugin</a>来自动化这些步骤,尽管我自己还没有试过。   <br/>
4.在你的JIRA ticket下添加一个评论，说你已经推了release版本。下次Sonatype同步的时候，就会将你的artifacts放到Maven Central了。以后再发布新版本的时候，就不用添加评论了，会自动同步的。</p>

<p>参考文档<a href="http://datumedge.blogspot.jp/2012/05/publishing-from-github-to-maven-central.html">http://datumedge.blogspot.jp/2012/05/publishing-from-github-to-maven-central.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[write my maven plugin]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/06/13/write-my-maven-plugin/"/>
    <updated>2013-06-13T20:35:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/06/13/write-my-maven-plugin</id>
    <content type="html"><![CDATA[<p>mvn archetype:generate -DgroupId=cn.shenyanchao.ut -DartifactId=ut-maven-plugin -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-plugin</p>

<p><a href="http://maven.apache.org/guides/plugin/guide-java-plugin-development.html">http://maven.apache.org/guides/plugin/guide-java-plugin-development.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Maven Archetype来生成项目框架]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/05/21/use-maven-archetype-to-generate-project-architecture/"/>
    <updated>2013-05-21T16:36:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/05/21/use-maven-archetype-to-generate-project-architecture</id>
    <content type="html"><![CDATA[<h3>Maven in 5 Minutes</h3>

<p><a href="http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">maven官方文档</a>的入门章节就介绍了如何创建一个maven项目。大致如下：</p>

<pre><code>mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false     
</code></pre>

<p>我相信，很多人都是从这里开始的。但是为什么是这样呢？这里面都是怎么实现的？  <br/>
其实，这里面是maven archetype的作用。它可以根据模板为你生成样例项目。</p>

<!--more-->


<h3>Maven Archetype Plugin</h3>

<p>我们使用这个插件可以依据已经存在的项目来生成一个架构。这样其他人就可以使用这个架构来快速生成自己的项目了。  <br/>
Maven Archetype Plugin有4个Goal:</p>

<ul>
<li>archetype:create 已过时，用于从archetype创建maven project</li>
<li>archetype:generate  替代create,并且可以用交互的模式</li>
<li>archetype:create-from-project 依据存在的project 创建archetype</li>
<li>archetype:crawl 查找repo里存在的archetypes并更新目录。</li>
</ul>


<h3>实战演练一把</h3>

<p>假设我们已经有了一个项目名叫seleniumframework-start: <br/>
进入到这个工程的根目录，首先执行：</p>

<pre><code>mvn clean archetype:create-from-project
</code></pre>

<p>这样就生成了一个archetype的代码。其路径位于./target/generated-sources/archetype目录内。其中pom.xml类似：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;com.baidu.selenium.archetypes&lt;/groupId&gt;
  &lt;artifactId&gt;seleniumframework-start-archetype&lt;/artifactId&gt;
  &lt;version&gt;1.0.0&lt;/version&gt;
  &lt;packaging&gt;maven-archetype&lt;/packaging&gt;

  &lt;name&gt;seleniumframework-start-archetype&lt;/name&gt;

  &lt;build&gt;
    &lt;extensions&gt;
      &lt;extension&gt;
        &lt;groupId&gt;org.apache.maven.archetype&lt;/groupId&gt;
        &lt;artifactId&gt;archetype-packaging&lt;/artifactId&gt;
        &lt;version&gt;2.2&lt;/version&gt;
      &lt;/extension&gt;
    &lt;/extensions&gt;

    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;artifactId&gt;maven-archetype-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.2&lt;/version&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p>这个就是要生成的seleniumframework-start-archetype的pom.xml了。一般情况下生成的代码是不能直接使用的，需要做一些修改。这其中主要有以下几个变量需要替换：</p>

<ul>
<li>${groupId}</li>
<li>${artifactId}</li>
<li>${version}</li>
<li>${package}</li>
</ul>


<p>找到./target/generated-sources/archetype/src/main/resources/archetype-resources目录，这里面就是要生成的文件模板了，这个时候需要注意以上几个占位符出现的地方是否正确，可以按照需要进行修改。常见的情况是把XML文件里的<code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</code>转为了<code>&lt;?xml version="${version}" encoding="UTF-8"?&gt;^</code>。这并不是我们想要的，<code>${version}</code>是用来指项目的版本号，因此此处去掉占位符。有的其他地方，应该要使用占位符的可以根据需要修改。修改完毕，那么返回./target/generated-sources/archetype目录，install之：</p>

<pre><code>mvn clean install
</code></pre>

<p>这样，这个archetype就安装到了local repository。
如何使用呢？咱们试试。</p>

<pre><code>mvn archetype:generate -DarchetypeGroupId=com.baidu.selenium.archetypes -DarchetypeArtifactId=seleniumframework-start-archetype -DarchetypeVersion=1.0.0
</code></pre>

<p>其中，有一些交互信息需要确认。依次是groupId,artifactId,version,package。按照要求输入后，这些信息就是用来分别替代上面说的几个变量了，项目就顺利生成了。<br/>
此时，seleniumframework-start-archetype还只能自己使用，因为它只存在于local repository内。为了让大家共享成果，将这个包deploy到伺服器就OK了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装配置Maven]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/19/install-maven/"/>
    <updated>2012-10-19T23:40:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/19/install-maven</id>
    <content type="html"><![CDATA[<h2>Maven安装</h2>

<p>1.下载Maven：从<a href="http://maven.apache.org/download.html">Maven官方</a>下载,并解压。比如解压到：D:\apache-maven-3.0.4   <br/>
2.配置环境变量：</p>

<ul>
<li>M2_HOME：D:\apache-maven-3.0.4</li>
<li>path：%M2_HOME%\bin;</li>
</ul>


<p>打开cmd命令窗口,验证配置是否成功：<code>mvn -v</code>。成功后会显示正确的版本信息。<br/>
3.修改默认的repository <br/>
maven默认放在C:\Users\user.m2\repository目录下（不同系统可能不一样）。Window下一般不建议放在C盘。可以通过如下方式修改： <br/>
进入%M2_HOME%\conf\settings.xml中，添加<code>&lt;localRepository&gt;e:/repo&lt;/localRepository&gt;</code>这样一行。默认的路径就指向新的目录了。</p>
]]></content>
  </entry>
  
</feed>