<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: maven | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/maven/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2013-06-05T20:54:18+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Maven Archetype来生成项目框架]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/05/21/use-maven-archetype-to-generate-project-architecture/"/>
    <updated>2013-05-21T16:36:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/05/21/use-maven-archetype-to-generate-project-architecture</id>
    <content type="html"><![CDATA[<h3>Maven in 5 Minutes</h3>

<p><a href="http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">maven官方文档</a>的入门章节就介绍了如何创建一个maven项目。大致如下：</p>

<pre><code>mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false     
</code></pre>

<p>我相信，很多人都是从这里开始的。但是为什么是这样呢？这里面都是怎么实现的？  <br/>
其实，这里面是maven archetype的作用。它可以根据模板为你生成样例项目。</p>

<!--more-->


<h3>Maven Archetype Plugin</h3>

<p>我们使用这个插件可以依据已经存在的项目来生成一个架构。这样其他人就可以使用这个架构来快速生成自己的项目了。  <br/>
Maven Archetype Plugin有4个Goal:</p>

<ul>
<li>archetype:create 已过时，用于从archetype创建maven project</li>
<li>archetype:generate  替代create,并且可以用交互的模式</li>
<li>archetype:create-from-project 依据存在的project 创建archetype</li>
<li>archetype:crawl 查找repo里存在的archetypes并更新目录。</li>
</ul>


<h3>实战演练一把</h3>

<p>假设我们已经有了一个项目名叫seleniumframework-start: <br/>
进入到这个工程的根目录，首先执行：</p>

<pre><code>mvn clean archetype:create-from-project
</code></pre>

<p>这样就生成了一个archetype的代码。其路径位于./target/generated-sources/archetype目录内。其中pom.xml类似：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;com.baidu.selenium.archetypes&lt;/groupId&gt;
  &lt;artifactId&gt;seleniumframework-start-archetype&lt;/artifactId&gt;
  &lt;version&gt;1.0.0&lt;/version&gt;
  &lt;packaging&gt;maven-archetype&lt;/packaging&gt;

  &lt;name&gt;seleniumframework-start-archetype&lt;/name&gt;

  &lt;build&gt;
    &lt;extensions&gt;
      &lt;extension&gt;
        &lt;groupId&gt;org.apache.maven.archetype&lt;/groupId&gt;
        &lt;artifactId&gt;archetype-packaging&lt;/artifactId&gt;
        &lt;version&gt;2.2&lt;/version&gt;
      &lt;/extension&gt;
    &lt;/extensions&gt;

    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;artifactId&gt;maven-archetype-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.2&lt;/version&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p>这个就是要生成的seleniumframework-start-archetype的pom.xml了。一般情况下生成的代码是不能直接使用的，需要做一些修改。这其中主要有以下几个变量需要替换：</p>

<ul>
<li>${groupId}</li>
<li>${artifactId}</li>
<li>${version}</li>
<li>${package}</li>
</ul>


<p>找到./target/generated-sources/archetype/src/main/resources/archetype-resources目录，这里面就是要生成的文件模板了，这个时候需要注意以上几个占位符出现的地方是否正确，可以按照需要进行修改。常见的情况是把XML文件里的<code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</code>转为了<code>&lt;?xml version="${version}" encoding="UTF-8"?&gt;^</code>。这并不是我们想要的，<code>${version}</code>是用来指项目的版本号，因此此处去掉占位符。有的其他地方，应该要使用占位符的可以根据需要修改。修改完毕，那么返回./target/generated-sources/archetype目录，install之：</p>

<pre><code>mvn clean install
</code></pre>

<p>这样，这个archetype就安装到了local repository。
如何使用呢？咱们试试。</p>

<pre><code>mvn archetype:generate -DarchetypeGroupId=com.baidu.selenium.archetypes -DarchetypeArtifactId=seleniumframework-start-archetype -DarchetypeVersion=1.0.0
</code></pre>

<p>其中，有一些交互信息需要确认。依次是groupId,artifactId,version,package。按照要求输入后，这些信息就是用来分别替代上面说的几个变量了，项目就顺利生成了。<br/>
此时，seleniumframework-start-archetype还只能自己使用，因为它只存在于local repository内。为了让大家共享成果，将这个包deploy到伺服器就OK了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装配置Maven]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/19/install-maven/"/>
    <updated>2012-10-19T23:40:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/19/install-maven</id>
    <content type="html"><![CDATA[<h2>Maven安装</h2>

<p>1.下载Maven：从<a href="http://maven.apache.org/download.html">Maven官方</a>下载,并解压。比如解压到：D:\apache-maven-3.0.4   <br/>
2.配置环境变量：</p>

<ul>
<li>M2_HOME：D:\apache-maven-3.0.4</li>
<li>path：%M2_HOME%\bin;</li>
</ul>


<p>打开cmd命令窗口,验证配置是否成功：<code>mvn -v</code>。成功后会显示正确的版本信息。<br/>
3.修改默认的repository <br/>
maven默认放在C:\Users\user.m2\repository目录下（不同系统可能不一样）。Window下一般不建议放在C盘。可以通过如下方式修改： <br/>
进入%M2_HOME%\conf\settings.xml中，添加<code>&lt;localRepository&gt;e:/repo&lt;/localRepository&gt;</code>这样一行。默认的路径就指向新的目录了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[maven生命周期详解]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/19/maven-life-cycle/"/>
    <updated>2012-10-19T22:21:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/19/maven-life-cycle</id>
    <content type="html"><![CDATA[<p>Maven强大的一个重要的原因是它有一个十分完善的生命周期模型(lifecycle)，这个生命周期可以从两方面来理解，第一，顾名思义，运行Maven的每个步骤都由它来定义的，这种预定义的默认行为使得我们使用Maven变得简单，相比而言，Ant的每个步骤都要你手工去定义。第二，这个模型是一种标准，在不同的项目中，使用Maven的接口是一样的，这样就不用去仔细理解每个项目的构建了，一般情况下，mvn clean install 这样的命令是通用的。我想，一定是吸收了许多项目的经验，Maven才能定义出如此完善的模型。</p>

<!--more-->


<p>
Maven有三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，初学者容易将Maven的生命周期看成一个整体，其实不然。这三套生命周期分别是：</p>

<ul>
<li>Clean Lifecycle 在进行真正的构建之前进行一些清理工作。</li>
<li>Default Lifecycle 构建的核心部分，编译，测试，打包，部署等等。</li>
<li>Site Lifecycle 生成项目报告，站点，发布站点。</li>
</ul>


<p>我再次强调一下它们是相互独立的，你可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然你也可以直接运行 mvn clean install site 运行所有这三套生命周期。</p>

<p>知道了每套生命周期的大概用途和相互关系以后，来逐个详细看一下每套生命周期，Clean和Site相对比较简单，先解释一下。</p>

<p>每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行mvn clean ，这个的clean是Clean生命周期的一个阶段。有点绕？要知道有Clean生命周期，也有clean阶段。Clean生命周期一共包含了三个阶段：</p>

<ul>
<li>pre-clean  执行一些需要在clean之前完成的工作</li>
<li>clean  移除所有上一次构建生成的文件</li>
<li>post-clean  执行一些需要在clean之后立刻完成的工作</li>
</ul>


<p>mvn clean 中的clean就是上面的clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，mvn clean 等同于 mvn pre-clean clean ，如果我们运行 mvn post-clean ，那么 pre-clean，clean 都会被运行。这是Maven很重要的一个规则，可以大大简化命令行的输入。</p>

<p>下面看一下Site生命周期的各个阶段：</p>

<ul>
<li>pre-site     执行一些需要在生成站点文档之前完成的工作</li>
<li>site    生成项目的站点文档</li>
<li>post-site     执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li>
<li>site-deploy     将生成的站点文档部署到特定的服务器上</li>
</ul>


<p>这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。</p>

<p>最后，来看一下Maven的最重要的Default生命周期，绝大部分工作都发生在这个生命周期中，这里，我只解释一些比较重要和常用的阶段：</p>

<ul>
<li>validate</li>
<li>generate-sources</li>
<li>process-sources</li>
<li>generate-resources</li>
<li>process-resources     复制并处理资源文件，至目标目录，准备打包。</li>
<li>compile     编译项目的源代码。</li>
<li>process-classes</li>
<li>generate-test-sources</li>
<li>process-test-sources</li>
<li>generate-test-resources</li>
<li>process-test-resources     复制并处理资源文件，至目标测试目录。</li>
<li>test-compile     编译测试源代码。</li>
<li>process-test-classes</li>
<li>test     使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</li>
<li>prepare-package</li>
<li>package     接受编译好的代码，打包成可发布的格式，如 JAR 。</li>
<li>pre-integration-test</li>
<li>integration-test</li>
<li>post-integration-test</li>
<li>verify</li>
<li>install     将包安装至本地仓库，以让其它项目依赖。</li>
<li>deploy     将最终的包复制到远程的仓库，以让其它开发人员与项目共享。</li>
</ul>


<p>基本上，根据名称我们就能猜出每个阶段的用途，关于其它阶段的解释，请参考 <a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html</a></p>

<p>记住，运行任何一个阶段的时候，它前面的所有阶段都会被运行，这也就是为什么我们运行mvn install 的时候，代码会被编译，测试，打包。</p>

<p>此外，Maven的插件机制是完全依赖Maven的生命周期的，因此理解生命周期至关重要，在之后的文章里，我将会进一步解释Maven的插件机制。</p>

<p>转摘自：<a href="http://juvenshun.iteye.com/blog/213959">http://juvenshun.iteye.com/blog/213959</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PMD静态代码检查]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/10/11/pmd/"/>
    <updated>2012-10-11T11:20:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/10/11/pmd</id>
    <content type="html"><![CDATA[<h2>一 maven插件：maven-pmd-plugin</h2>

<blockquote><p>pom.xml添加如下内容：</p></blockquote>

<pre><code>    &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.7.1&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;phase&gt;package&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;check&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
            &lt;configuration&gt;
                &lt;failurePriority&gt;2&lt;/failurePriority&gt;
                &lt;targetJdk&gt;1.6&lt;/targetJdk&gt;
                &lt;rulesets&gt;
                    &lt;ruleset&gt;/pmd-rulesets.xml&lt;/ruleset&gt;
                &lt;/rulesets&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
</code></pre>

<blockquote><p>failurePriority用于指定在什么错误级别会failure，级别0~5不等。0为最高，5为最低。此处设为2,意为0、1、2级别的错误都会导致报错。级别可以根据项目的要求进行配置</p></blockquote>

<!--more-->


<blockquote><p>其中<strong>pmd-rulesets.xml</strong>是规则文件,由pmd制定的一些规则，这些规则可以在pmd-*.jar里找到。 <strong>pmd-rulesets.xml</strong>类似于以下：</p></blockquote>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;ruleset xmlns="http://pmd.sf.net/ruleset/1.0.0" name="pmd-rulsets" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"&gt;
    &lt;description&gt;PMD Plugin preferences rule set&lt;/description&gt;
    &lt;rule ref="rulesets/typeresolution.xml/LooseCoupling"/&gt;
    &lt;rule ref="rulesets/typeresolution.xml/CloneMethodMustImplementCloneable"/&gt;
    &lt;rule ref="rulesets/typeresolution.xml/SignatureDeclareThrowsException"/&gt;
    &lt;rule ref="rulesets/braces.xml/IfStmtsMustUseBraces"/&gt;
    &lt;rule ref="rulesets/braces.xml/WhileLoopsMustUseBraces"/&gt;
&lt;/ruleset&gt;
</code></pre>

<h3>如何使用</h3>

<pre><code>mvn pmd:pmd
mvn pmd:check   
</code></pre>

<hr />

<h2>二 pmd在eclipse中的使用</h2>

<blockquote><p>1.安装</p>

<blockquote><p>Help -> Install New Software -> Add...<br/>
设置update site:<a href="http://pmd.sourceforge.net/eclipse">http://pmd.sourceforge.net/eclipse</a><br/>
一路next安装成功即可</p></blockquote>

<p>2.eclipse中的设置</p>

<blockquote><p>Window -> Prefrences -> PMD -> Rules Configuration<br/>
在其中可以设置相关Rules，这里面的Rules对应maven-pmd-plugins中的pmd-rulesets.xml，可以根据自己的需求进行定制</p></blockquote>

<p>3.eclipse中的使用</p>

<blockquote><p>右键选中project -> PMD -> Check Code with PMD<br/>
执行结束后，会打开PMD视图，会依据不同的Priority级别显示不同的颜色。其中红色标注的X是级别为错误级别的。</p></blockquote></blockquote>

<hr />
]]></content>
  </entry>
  
</feed>