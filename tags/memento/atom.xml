<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: memento | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/memento/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2014-06-20T16:41:58+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式:备忘录（memento） in java]]></title>
    <link href="http://www.shenyanchao.cn/blog/2012/11/02/memento-in-java/"/>
    <updated>2012-11-02T20:10:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2012/11/02/memento-in-java</id>
    <content type="html"><![CDATA[<p><strong>定义：</strong>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>

<p>备忘录模式有以下三个角色：</p>

<ul>
<li>Originator发起人角色  <br/>
记录当前时刻的内部状态，负责定义哪些属于备份范围的状态，负责创建和恢复备忘录数据。</li>
<li>Memento备忘录角色   <br/>
负责存储Originator发起人对象的内部状态，在需要的时候提供发起人需要的内部状态。</li>
<li>Caretaker备忘录管理员角色  <br/>
对备忘录进行管理、保存和提供备忘录。</li>
</ul>


<!--more-->


<p>发起人角色：</p>

<pre><code>public class Originator{
    //内部状态
    private String state = "";

    public String getState(){
        return state;
    }

    public void setState(String state){
        this.state = state;
    }

    //创建一个备忘录
    public Memento createMemento(){
        return new Memento(this.state);
    }
    //恢复一个备忘录
    public void restoreMemento(Memento _memento){
        this.setState(_memento.getState());
    }
}
</code></pre>

<p>备忘录角色：</p>

<pre><code>public class Memento{
    //发起人的内部状态
    private String state = "";
    //构造函数传递参数
    public Memento(String _state){
        this.state = _state;
    }  
    public String getState(){
        return state;
    }

    public void setState(String state){
        this.state = state;
    }
}
</code></pre>

<p>备忘录管理员角色：</p>

<pre><code>public class Caretaker{
    //备忘录对象
    private Memento memento;
    public Memento getMemento(){
        return memento;
    }
    public void setMemento(Memento memento){
        this.memento = memento;
    }
}
</code></pre>

<p>现在看看是如何使用的：</p>

<pre><code>public class Client{
    public static void main(String[] args){
        Originator originator = new Originator();
        Caretaker caretaker = new Caretaker();
        caretaker.setMemento(originator.createMemento()); 
        originator.restoreMemento(caretaker.getMemento);
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>