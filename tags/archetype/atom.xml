<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: archetype | Blues 小站]]></title>
  <link href="http://www.shenyanchao.cn/tags/archetype/atom.xml" rel="self"/>
  <link href="http://www.shenyanchao.cn/"/>
  <updated>2014-09-02T19:45:01+08:00</updated>
  <id>http://www.shenyanchao.cn/</id>
  <author>
    <name><![CDATA[ShenYanchao]]></name>
    <email><![CDATA[zhiyi.shen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[write my maven plugin]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/06/13/write-my-maven-plugin/"/>
    <updated>2013-06-13T20:35:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/06/13/write-my-maven-plugin</id>
    <content type="html"><![CDATA[<p>mvn archetype:generate -DgroupId=cn.shenyanchao.ut -DartifactId=ut-maven-plugin -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-plugin</p>

<p><a href="http://maven.apache.org/guides/plugin/guide-java-plugin-development.html">http://maven.apache.org/guides/plugin/guide-java-plugin-development.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Maven Archetype来生成项目框架]]></title>
    <link href="http://www.shenyanchao.cn/blog/2013/05/21/use-maven-archetype-to-generate-project-architecture/"/>
    <updated>2013-05-21T16:36:00+08:00</updated>
    <id>http://www.shenyanchao.cn/blog/2013/05/21/use-maven-archetype-to-generate-project-architecture</id>
    <content type="html"><![CDATA[<h3>Maven in 5 Minutes</h3>

<p><a href="http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">maven官方文档</a>的入门章节就介绍了如何创建一个maven项目。大致如下：</p>

<pre><code>mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false     
</code></pre>

<p>我相信，很多人都是从这里开始的。但是为什么是这样呢？这里面都是怎么实现的？  <br/>
其实，这里面是maven archetype的作用。它可以根据模板为你生成样例项目。</p>

<!--more-->


<h3>Maven Archetype Plugin</h3>

<p>我们使用这个插件可以依据已经存在的项目来生成一个架构。这样其他人就可以使用这个架构来快速生成自己的项目了。  <br/>
Maven Archetype Plugin有4个Goal:</p>

<ul>
<li>archetype:create 已过时，用于从archetype创建maven project</li>
<li>archetype:generate  替代create,并且可以用交互的模式</li>
<li>archetype:create-from-project 依据存在的project 创建archetype</li>
<li>archetype:crawl 查找repo里存在的archetypes并更新目录。</li>
</ul>


<h3>实战演练一把</h3>

<p>假设我们已经有了一个项目名叫seleniumframework-start: <br/>
进入到这个工程的根目录，首先执行：</p>

<pre><code>mvn clean archetype:create-from-project
</code></pre>

<p>这样就生成了一个archetype的代码。其路径位于./target/generated-sources/archetype目录内。其中pom.xml类似：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;com.baidu.selenium.archetypes&lt;/groupId&gt;
  &lt;artifactId&gt;seleniumframework-start-archetype&lt;/artifactId&gt;
  &lt;version&gt;1.0.0&lt;/version&gt;
  &lt;packaging&gt;maven-archetype&lt;/packaging&gt;

  &lt;name&gt;seleniumframework-start-archetype&lt;/name&gt;

  &lt;build&gt;
    &lt;extensions&gt;
      &lt;extension&gt;
        &lt;groupId&gt;org.apache.maven.archetype&lt;/groupId&gt;
        &lt;artifactId&gt;archetype-packaging&lt;/artifactId&gt;
        &lt;version&gt;2.2&lt;/version&gt;
      &lt;/extension&gt;
    &lt;/extensions&gt;

    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;artifactId&gt;maven-archetype-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.2&lt;/version&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p>这个就是要生成的seleniumframework-start-archetype的pom.xml了。一般情况下生成的代码是不能直接使用的，需要做一些修改。这其中主要有以下几个变量需要替换：</p>

<ul>
<li>${groupId}</li>
<li>${artifactId}</li>
<li>${version}</li>
<li>${package}</li>
</ul>


<p>找到./target/generated-sources/archetype/src/main/resources/archetype-resources目录，这里面就是要生成的文件模板了，这个时候需要注意以上几个占位符出现的地方是否正确，可以按照需要进行修改。常见的情况是把XML文件里的<code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</code>转为了<code>&lt;?xml version="${version}" encoding="UTF-8"?&gt;^</code>。这并不是我们想要的，<code>${version}</code>是用来指项目的版本号，因此此处去掉占位符。有的其他地方，应该要使用占位符的可以根据需要修改。修改完毕，那么返回./target/generated-sources/archetype目录，install之：</p>

<pre><code>mvn clean install
</code></pre>

<p>这样，这个archetype就安装到了local repository。
如何使用呢？咱们试试。</p>

<pre><code>mvn archetype:generate -DarchetypeGroupId=com.baidu.selenium.archetypes \
-DarchetypeArtifactId=seleniumframework-start-archetype -DarchetypeVersion=1.0.0
</code></pre>

<p>其中，有一些交互信息需要确认。依次是groupId,artifactId,version,package。按照要求输入后，这些信息就是用来分别替代上面说的几个变量了，项目就顺利生成了。<br/>
此时，seleniumframework-start-archetype还只能自己使用，因为它只存在于local repository内。为了让大家共享成果，将这个包deploy到伺服器就OK了。</p>
]]></content>
  </entry>
  
</feed>